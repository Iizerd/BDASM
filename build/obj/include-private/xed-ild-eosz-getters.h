/// @file include-private/xed-ild-eosz-getters.h

// This file was automatically generated.
// Do not edit this file.

#if !defined(INCLUDE_PRIVATE_XED_ILD_EOSZ_GETTERS_H)
# define INCLUDE_PRIVATE_XED_ILD_EOSZ_GETTERS_H
/*BEGIN_LEGAL

Copyright (c) 2021 Intel Corporation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  
END_LEGAL */
#include "xed-internal-header.h"
#include "xed-ild-private.h"
#include "xed-ild-eosz.h"
#include "xed-operand-accessors.h"
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_REFINING66_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_DF64_FORCE64_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_IGNORE66_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_REFINING66_CR_WIDTH_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_DF64_IMMUNE66_LOOP64_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_CR_WIDTH_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_IMMUNE_REXW_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_IMMUNE66_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_DF64_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_FORCE64_EOSZ_getter(const xed_decoded_inst_t* x);

static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_REFINING66_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_REFINING66_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_DF64_FORCE64_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_DF64_FORCE64_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_IGNORE66_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_IGNORE66_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_REFINING66_CR_WIDTH_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_REFINING66_CR_WIDTH_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_DF64_IMMUNE66_LOOP64_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_DF64_IMMUNE66_LOOP64_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_CR_WIDTH_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_CR_WIDTH_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_IMMUNE_REXW_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_IMMUNE_REXW_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_IMMUNE66_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_IMMUNE66_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_DF64_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_DF64_EOSZ(_mode, _osz, _rexw);
}
static XED_INLINE xed_bits_t xed_lookup_function_OSZ_NONTERM_FORCE64_EOSZ_getter(const xed_decoded_inst_t* x)
{
xed_bits_t _mode;
xed_bits_t _osz;
xed_bits_t _rexw;
_mode = (xed_bits_t)xed3_operand_get_mode(x);
_osz = (xed_bits_t)xed3_operand_get_osz(x);
_rexw = (xed_bits_t)xed3_operand_get_rexw(x);
return xed_lookup_function_OSZ_NONTERM_FORCE64_EOSZ(_mode, _osz, _rexw);
}
#endif
