Opening output files
FE:EMIT_FILE obj/xed-operand-ctype-enum.txt
FE:EMIT_FILE obj/xed-operand-ctype-enum.c
FE:EMIT_FILE obj/xed-operand-ctype-enum.h
FE:EMIT_FILE obj/xed-operand-ctype-map.h
FE:EMIT_FILE obj/xed-operand-ctype-map.c
LER: Comparing YMM0 and ZMM0 for XMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for XMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for XMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for XMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for XMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for XMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for XMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for XMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for XMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for XMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for XMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for XMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for XMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for XMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for XMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for XMM15
	taking new wider version
LER: Comparing YMM0 and ZMM0 for YMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for YMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for YMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for YMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for YMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for YMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for YMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for YMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for YMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for YMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for YMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for YMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for YMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for YMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for YMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for YMM15
	taking new wider version
[RGROUPS] ['BNDCFG', 'BNDSTAT', 'BOUND', 'CR', 'DR', 'FLAGS', 'GPR16', 'GPR32', 'GPR64', 'GPR8', 'GPR8h', 'INVALID', 'IP', 'MASK', 'MMX', 'MSR', 'MXCSR', 'PSEUDO', 'PSEUDOX87', 'SR', 'TMP', 'TREG', 'UIF', 'X87', 'XCR', 'XMM', 'YMM', 'ZMM']
FE:EMIT_FILE obj/xed-reg-enum.txt
FE:EMIT_FILE obj/xed-reg-enum.c
FE:EMIT_FILE obj/xed-reg-enum.h
FE:EMIT_FILE obj/xed-reg-class-enum.txt
FE:EMIT_FILE obj/xed-reg-class-enum.c
FE:EMIT_FILE obj/xed-reg-class-enum.h
FE:EMIT_FILE obj/xed-init-reg-class.c
FE:EMIT_FILE obj/xed-operand-width-enum.txt
FE:EMIT_FILE obj/xed-operand-width-enum.c
FE:EMIT_FILE obj/xed-operand-width-enum.h
FE:EMIT_FILE obj/xed-init-width.c
Adding scalable width:  ASZ
Adding scalable width:  SSZ
Adding scalable width:  P
Adding scalable width:  P2
Adding scalable width:  S
Adding scalable width:  V
Adding scalable width:  Y
Adding scalable width:  Z
Adding scalable width:  SPW8
Adding scalable width:  SPW
Adding scalable width:  SPW5
Adding scalable width:  SPW3
Adding scalable width:  SPW2
MAKING ELEMENT BASE TYPE ENUM
FE:EMIT_FILE obj/xed-operand-element-type-enum.c
FE:EMIT_FILE obj/xed-operand-element-type-enum.h
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.txt
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.c
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.h
FE:EMIT_FILE obj/xed-init-operand-type-mappings.c
FE:EMIT_FILE obj/xed-init-pointer-names.h
FE:EMIT_FILE obj/xed-init-pointer-names.c
Reading state bits
Done reading state bits
Reading structured input
Reading Instructions (ISA) input
=============================================
Creating a generator 0
=============================================
ALines (lines before reading input) = 75476
read_input 0
NONTERMINAL: ISA notype
Adding ISA to nonterminal dict
Nonterminal ISA()::
Nonterminal name ISA
read_flat_input 0
Hit a nonterminal, returning at: REMOVE_SEGMENT()::
BLines (lines remaining after reading input) = 75474
=============================================
Creating a generator 1
=============================================
ALines (lines before reading input) = 75474
read_input 1
NONTERMINAL: REMOVE_SEGMENT notype
Adding REMOVE_SEGMENT to nonterminal dict
Nonterminal REMOVE_SEGMENT()::
Nonterminal name REMOVE_SEGMENT
read_flat_input 1
Hit a nonterminal, returning at: PREFIXES()::
BLines (lines remaining after reading input) = 75470
=============================================
Creating a generator 2
=============================================
ALines (lines before reading input) = 75470
read_input 4
NONTERMINAL: PREFIXES notype
Adding PREFIXES to nonterminal dict
Nonterminal PREFIXES()::
Nonterminal name PREFIXES
read_flat_input 4
Hit a nonterminal, returning at: BRANCH_HINT()::
BLines (lines remaining after reading input) = 75422
=============================================
Creating a generator 3
=============================================
ALines (lines before reading input) = 75422
read_input 50
NONTERMINAL: BRANCH_HINT notype
Adding BRANCH_HINT to nonterminal dict
Nonterminal BRANCH_HINT()::
Nonterminal name BRANCH_HINT
read_flat_input 50
Hit a nonterminal, returning at: CET_NO_TRACK()::
BLines (lines remaining after reading input) = 75418
=============================================
Creating a generator 4
=============================================
ALines (lines before reading input) = 75418
read_input 53
NONTERMINAL: CET_NO_TRACK notype
Adding CET_NO_TRACK to nonterminal dict
Nonterminal CET_NO_TRACK()::
Nonterminal name CET_NO_TRACK
read_flat_input 53
Hit a nonterminal, returning at: xed_reg_enum_t ArAX()::
BLines (lines remaining after reading input) = 75414
=============================================
Creating a generator 5
=============================================
ALines (lines before reading input) = 75414
read_input 56
NONTERMINAL: ArAX type= xed_reg_enum_t
Adding ArAX to nonterminal dict
Nonterminal xed_reg_enum_t ArAX()::
Nonterminal name ArAX
read_flat_input 56
Hit a nonterminal, returning at: xed_reg_enum_t ArBX()::
BLines (lines remaining after reading input) = 75410
=============================================
Creating a generator 6
=============================================
ALines (lines before reading input) = 75410
read_input 59
NONTERMINAL: ArBX type= xed_reg_enum_t
Adding ArBX to nonterminal dict
Nonterminal xed_reg_enum_t ArBX()::
Nonterminal name ArBX
read_flat_input 59
Hit a nonterminal, returning at: xed_reg_enum_t ArCX()::
BLines (lines remaining after reading input) = 75406
=============================================
Creating a generator 7
=============================================
ALines (lines before reading input) = 75406
read_input 62
NONTERMINAL: ArCX type= xed_reg_enum_t
Adding ArCX to nonterminal dict
Nonterminal xed_reg_enum_t ArCX()::
Nonterminal name ArCX
read_flat_input 62
Hit a nonterminal, returning at: xed_reg_enum_t ArDX()::
BLines (lines remaining after reading input) = 75402
=============================================
Creating a generator 8
=============================================
ALines (lines before reading input) = 75402
read_input 65
NONTERMINAL: ArDX type= xed_reg_enum_t
Adding ArDX to nonterminal dict
Nonterminal xed_reg_enum_t ArDX()::
Nonterminal name ArDX
read_flat_input 65
Hit a nonterminal, returning at: xed_reg_enum_t ArSI()::
BLines (lines remaining after reading input) = 75398
=============================================
Creating a generator 9
=============================================
ALines (lines before reading input) = 75398
read_input 68
NONTERMINAL: ArSI type= xed_reg_enum_t
Adding ArSI to nonterminal dict
Nonterminal xed_reg_enum_t ArSI()::
Nonterminal name ArSI
read_flat_input 68
Hit a nonterminal, returning at: xed_reg_enum_t ArDI()::
BLines (lines remaining after reading input) = 75394
=============================================
Creating a generator 10
=============================================
ALines (lines before reading input) = 75394
read_input 71
NONTERMINAL: ArDI type= xed_reg_enum_t
Adding ArDI to nonterminal dict
Nonterminal xed_reg_enum_t ArDI()::
Nonterminal name ArDI
read_flat_input 71
Hit a nonterminal, returning at: xed_reg_enum_t ArSP()::
BLines (lines remaining after reading input) = 75390
=============================================
Creating a generator 11
=============================================
ALines (lines before reading input) = 75390
read_input 74
NONTERMINAL: ArSP type= xed_reg_enum_t
Adding ArSP to nonterminal dict
Nonterminal xed_reg_enum_t ArSP()::
Nonterminal name ArSP
read_flat_input 74
Hit a nonterminal, returning at: xed_reg_enum_t ArBP()::
BLines (lines remaining after reading input) = 75386
=============================================
Creating a generator 12
=============================================
ALines (lines before reading input) = 75386
read_input 77
NONTERMINAL: ArBP type= xed_reg_enum_t
Adding ArBP to nonterminal dict
Nonterminal xed_reg_enum_t ArBP()::
Nonterminal name ArBP
read_flat_input 77
Hit a nonterminal, returning at: xed_reg_enum_t SrSP()::
BLines (lines remaining after reading input) = 75382
=============================================
Creating a generator 13
=============================================
ALines (lines before reading input) = 75382
read_input 80
NONTERMINAL: SrSP type= xed_reg_enum_t
Adding SrSP to nonterminal dict
Nonterminal xed_reg_enum_t SrSP()::
Nonterminal name SrSP
read_flat_input 80
Hit a nonterminal, returning at: xed_reg_enum_t SrBP()::
BLines (lines remaining after reading input) = 75378
=============================================
Creating a generator 14
=============================================
ALines (lines before reading input) = 75378
read_input 83
NONTERMINAL: SrBP type= xed_reg_enum_t
Adding SrBP to nonterminal dict
Nonterminal xed_reg_enum_t SrBP()::
Nonterminal name SrBP
read_flat_input 83
Hit a nonterminal, returning at: xed_reg_enum_t Ar8()::
BLines (lines remaining after reading input) = 75374
=============================================
Creating a generator 15
=============================================
ALines (lines before reading input) = 75374
read_input 86
NONTERMINAL: Ar8 type= xed_reg_enum_t
Adding Ar8 to nonterminal dict
Nonterminal xed_reg_enum_t Ar8()::
Nonterminal name Ar8
read_flat_input 86
Hit a nonterminal, returning at: xed_reg_enum_t Ar9()::
BLines (lines remaining after reading input) = 75370
=============================================
Creating a generator 16
=============================================
ALines (lines before reading input) = 75370
read_input 89
NONTERMINAL: Ar9 type= xed_reg_enum_t
Adding Ar9 to nonterminal dict
Nonterminal xed_reg_enum_t Ar9()::
Nonterminal name Ar9
read_flat_input 89
Hit a nonterminal, returning at: xed_reg_enum_t Ar10()::
BLines (lines remaining after reading input) = 75366
=============================================
Creating a generator 17
=============================================
ALines (lines before reading input) = 75366
read_input 92
NONTERMINAL: Ar10 type= xed_reg_enum_t
Adding Ar10 to nonterminal dict
Nonterminal xed_reg_enum_t Ar10()::
Nonterminal name Ar10
read_flat_input 92
Hit a nonterminal, returning at: xed_reg_enum_t Ar11()::
BLines (lines remaining after reading input) = 75362
=============================================
Creating a generator 18
=============================================
ALines (lines before reading input) = 75362
read_input 95
NONTERMINAL: Ar11 type= xed_reg_enum_t
Adding Ar11 to nonterminal dict
Nonterminal xed_reg_enum_t Ar11()::
Nonterminal name Ar11
read_flat_input 95
Hit a nonterminal, returning at: xed_reg_enum_t Ar12()::
BLines (lines remaining after reading input) = 75358
=============================================
Creating a generator 19
=============================================
ALines (lines before reading input) = 75358
read_input 98
NONTERMINAL: Ar12 type= xed_reg_enum_t
Adding Ar12 to nonterminal dict
Nonterminal xed_reg_enum_t Ar12()::
Nonterminal name Ar12
read_flat_input 98
Hit a nonterminal, returning at: xed_reg_enum_t Ar13()::
BLines (lines remaining after reading input) = 75354
=============================================
Creating a generator 20
=============================================
ALines (lines before reading input) = 75354
read_input 101
NONTERMINAL: Ar13 type= xed_reg_enum_t
Adding Ar13 to nonterminal dict
Nonterminal xed_reg_enum_t Ar13()::
Nonterminal name Ar13
read_flat_input 101
Hit a nonterminal, returning at: xed_reg_enum_t Ar14()::
BLines (lines remaining after reading input) = 75350
=============================================
Creating a generator 21
=============================================
ALines (lines before reading input) = 75350
read_input 104
NONTERMINAL: Ar14 type= xed_reg_enum_t
Adding Ar14 to nonterminal dict
Nonterminal xed_reg_enum_t Ar14()::
Nonterminal name Ar14
read_flat_input 104
Hit a nonterminal, returning at: xed_reg_enum_t Ar15()::
BLines (lines remaining after reading input) = 75346
=============================================
Creating a generator 22
=============================================
ALines (lines before reading input) = 75346
read_input 107
NONTERMINAL: Ar15 type= xed_reg_enum_t
Adding Ar15 to nonterminal dict
Nonterminal xed_reg_enum_t Ar15()::
Nonterminal name Ar15
read_flat_input 107
Hit a nonterminal, returning at: xed_reg_enum_t rIP()::
BLines (lines remaining after reading input) = 75342
=============================================
Creating a generator 23
=============================================
ALines (lines before reading input) = 75342
read_input 110
NONTERMINAL: rIP type= xed_reg_enum_t
Adding rIP to nonterminal dict
Nonterminal xed_reg_enum_t rIP()::
Nonterminal name rIP
read_flat_input 110
Hit a nonterminal, returning at: xed_reg_enum_t rIPa()::
BLines (lines remaining after reading input) = 75338
=============================================
Creating a generator 24
=============================================
ALines (lines before reading input) = 75338
read_input 113
NONTERMINAL: rIPa type= xed_reg_enum_t
Adding rIPa to nonterminal dict
Nonterminal xed_reg_enum_t rIPa()::
Nonterminal name rIPa
read_flat_input 113
Hit a nonterminal, returning at: xed_reg_enum_t OeAX()::
BLines (lines remaining after reading input) = 75335
=============================================
Creating a generator 25
=============================================
ALines (lines before reading input) = 75335
read_input 115
NONTERMINAL: OeAX type= xed_reg_enum_t
Adding OeAX to nonterminal dict
Nonterminal xed_reg_enum_t OeAX()::
Nonterminal name OeAX
read_flat_input 115
Hit a nonterminal, returning at: xed_reg_enum_t OrAX()::
BLines (lines remaining after reading input) = 75331
=============================================
Creating a generator 26
=============================================
ALines (lines before reading input) = 75331
read_input 118
NONTERMINAL: OrAX type= xed_reg_enum_t
Adding OrAX to nonterminal dict
Nonterminal xed_reg_enum_t OrAX()::
Nonterminal name OrAX
read_flat_input 118
Hit a nonterminal, returning at: xed_reg_enum_t OrDX()::
BLines (lines remaining after reading input) = 75327
=============================================
Creating a generator 27
=============================================
ALines (lines before reading input) = 75327
read_input 121
NONTERMINAL: OrDX type= xed_reg_enum_t
Adding OrDX to nonterminal dict
Nonterminal xed_reg_enum_t OrDX()::
Nonterminal name OrDX
read_flat_input 121
Hit a nonterminal, returning at: xed_reg_enum_t OrCX()::
BLines (lines remaining after reading input) = 75323
=============================================
Creating a generator 28
=============================================
ALines (lines before reading input) = 75323
read_input 124
NONTERMINAL: OrCX type= xed_reg_enum_t
Adding OrCX to nonterminal dict
Nonterminal xed_reg_enum_t OrCX()::
Nonterminal name OrCX
read_flat_input 124
Hit a nonterminal, returning at: xed_reg_enum_t OrBX()::
BLines (lines remaining after reading input) = 75319
=============================================
Creating a generator 29
=============================================
ALines (lines before reading input) = 75319
read_input 127
NONTERMINAL: OrBX type= xed_reg_enum_t
Adding OrBX to nonterminal dict
Nonterminal xed_reg_enum_t OrBX()::
Nonterminal name OrBX
read_flat_input 127
Hit a nonterminal, returning at: xed_reg_enum_t OrSP()::
BLines (lines remaining after reading input) = 75315
=============================================
Creating a generator 30
=============================================
ALines (lines before reading input) = 75315
read_input 130
NONTERMINAL: OrSP type= xed_reg_enum_t
Adding OrSP to nonterminal dict
Nonterminal xed_reg_enum_t OrSP()::
Nonterminal name OrSP
read_flat_input 130
Hit a nonterminal, returning at: xed_reg_enum_t OrBP()::
BLines (lines remaining after reading input) = 75311
=============================================
Creating a generator 31
=============================================
ALines (lines before reading input) = 75311
read_input 133
NONTERMINAL: OrBP type= xed_reg_enum_t
Adding OrBP to nonterminal dict
Nonterminal xed_reg_enum_t OrBP()::
Nonterminal name OrBP
read_flat_input 133
Hit a nonterminal, returning at: xed_reg_enum_t rFLAGS()::
BLines (lines remaining after reading input) = 75307
=============================================
Creating a generator 32
=============================================
ALines (lines before reading input) = 75307
read_input 136
NONTERMINAL: rFLAGS type= xed_reg_enum_t
Adding rFLAGS to nonterminal dict
Nonterminal xed_reg_enum_t rFLAGS()::
Nonterminal name rFLAGS
read_flat_input 136
Hit a nonterminal, returning at: xed_reg_enum_t MMX_R()::
BLines (lines remaining after reading input) = 75303
=============================================
Creating a generator 33
=============================================
ALines (lines before reading input) = 75303
read_input 139
NONTERMINAL: MMX_R type= xed_reg_enum_t
Adding MMX_R to nonterminal dict
Nonterminal xed_reg_enum_t MMX_R()::
Nonterminal name MMX_R
read_flat_input 139
Hit a nonterminal, returning at: xed_reg_enum_t MMX_B()::
BLines (lines remaining after reading input) = 75294
=============================================
Creating a generator 34
=============================================
ALines (lines before reading input) = 75294
read_input 147
NONTERMINAL: MMX_B type= xed_reg_enum_t
Adding MMX_B to nonterminal dict
Nonterminal xed_reg_enum_t MMX_B()::
Nonterminal name MMX_B
read_flat_input 147
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_R()::
BLines (lines remaining after reading input) = 75285
=============================================
Creating a generator 35
=============================================
ALines (lines before reading input) = 75285
read_input 155
NONTERMINAL: GPRv_R type= xed_reg_enum_t
Adding GPRv_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_R()::
Nonterminal name GPRv_R
read_flat_input 155
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_SB()::
BLines (lines remaining after reading input) = 75281
=============================================
Creating a generator 36
=============================================
ALines (lines before reading input) = 75281
read_input 158
NONTERMINAL: GPRv_SB type= xed_reg_enum_t
Adding GPRv_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_SB()::
Nonterminal name GPRv_SB
read_flat_input 158
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_R()::
BLines (lines remaining after reading input) = 75277
=============================================
Creating a generator 37
=============================================
ALines (lines before reading input) = 75277
read_input 161
NONTERMINAL: GPRz_R type= xed_reg_enum_t
Adding GPRz_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_R()::
Nonterminal name GPRz_R
read_flat_input 161
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_B()::
BLines (lines remaining after reading input) = 75273
=============================================
Creating a generator 38
=============================================
ALines (lines before reading input) = 75273
read_input 164
NONTERMINAL: GPRv_B type= xed_reg_enum_t
Adding GPRv_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_B()::
Nonterminal name GPRv_B
read_flat_input 164
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_B()::
BLines (lines remaining after reading input) = 75269
=============================================
Creating a generator 39
=============================================
ALines (lines before reading input) = 75269
read_input 167
NONTERMINAL: GPRz_B type= xed_reg_enum_t
Adding GPRz_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_B()::
Nonterminal name GPRz_B
read_flat_input 167
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_B()::
BLines (lines remaining after reading input) = 75265
=============================================
Creating a generator 40
=============================================
ALines (lines before reading input) = 75265
read_input 170
NONTERMINAL: GPRy_B type= xed_reg_enum_t
Adding GPRy_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_B()::
Nonterminal name GPRy_B
read_flat_input 170
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_R()::
BLines (lines remaining after reading input) = 75261
=============================================
Creating a generator 41
=============================================
ALines (lines before reading input) = 75261
read_input 173
NONTERMINAL: GPRy_R type= xed_reg_enum_t
Adding GPRy_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_R()::
Nonterminal name GPRy_R
read_flat_input 173
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_R()::
BLines (lines remaining after reading input) = 75257
=============================================
Creating a generator 42
=============================================
ALines (lines before reading input) = 75257
read_input 176
NONTERMINAL: GPR64_R type= xed_reg_enum_t
Adding GPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_R()::
Nonterminal name GPR64_R
read_flat_input 176
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_B()::
BLines (lines remaining after reading input) = 75240
=============================================
Creating a generator 43
=============================================
ALines (lines before reading input) = 75240
read_input 192
NONTERMINAL: GPR64_B type= xed_reg_enum_t
Adding GPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_B()::
Nonterminal name GPR64_B
read_flat_input 192
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_SB()::
BLines (lines remaining after reading input) = 75223
=============================================
Creating a generator 44
=============================================
ALines (lines before reading input) = 75223
read_input 208
NONTERMINAL: GPR64_SB type= xed_reg_enum_t
Adding GPR64_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_SB()::
Nonterminal name GPR64_SB
read_flat_input 208
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_X()::
BLines (lines remaining after reading input) = 75206
=============================================
Creating a generator 45
=============================================
ALines (lines before reading input) = 75206
read_input 224
NONTERMINAL: GPR64_X type= xed_reg_enum_t
Adding GPR64_X to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_X()::
Nonterminal name GPR64_X
read_flat_input 224
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_R()::
BLines (lines remaining after reading input) = 75189
=============================================
Creating a generator 46
=============================================
ALines (lines before reading input) = 75189
read_input 240
NONTERMINAL: GPR32_R type= xed_reg_enum_t
Adding GPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_R()::
Nonterminal name GPR32_R
read_flat_input 240
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_B()::
BLines (lines remaining after reading input) = 75172
=============================================
Creating a generator 47
=============================================
ALines (lines before reading input) = 75172
read_input 256
NONTERMINAL: GPR32_B type= xed_reg_enum_t
Adding GPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_B()::
Nonterminal name GPR32_B
read_flat_input 256
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_SB()::
BLines (lines remaining after reading input) = 75155
=============================================
Creating a generator 48
=============================================
ALines (lines before reading input) = 75155
read_input 272
NONTERMINAL: GPR32_SB type= xed_reg_enum_t
Adding GPR32_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_SB()::
Nonterminal name GPR32_SB
read_flat_input 272
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_X()::
BLines (lines remaining after reading input) = 75138
=============================================
Creating a generator 49
=============================================
ALines (lines before reading input) = 75138
read_input 288
NONTERMINAL: GPR32_X type= xed_reg_enum_t
Adding GPR32_X to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_X()::
Nonterminal name GPR32_X
read_flat_input 288
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_R()::
BLines (lines remaining after reading input) = 75121
=============================================
Creating a generator 50
=============================================
ALines (lines before reading input) = 75121
read_input 304
NONTERMINAL: GPR16_R type= xed_reg_enum_t
Adding GPR16_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_R()::
Nonterminal name GPR16_R
read_flat_input 304
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_B()::
BLines (lines remaining after reading input) = 75104
=============================================
Creating a generator 51
=============================================
ALines (lines before reading input) = 75104
read_input 320
NONTERMINAL: GPR16_B type= xed_reg_enum_t
Adding GPR16_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_B()::
Nonterminal name GPR16_B
read_flat_input 320
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_SB()::
BLines (lines remaining after reading input) = 75087
=============================================
Creating a generator 52
=============================================
ALines (lines before reading input) = 75087
read_input 336
NONTERMINAL: GPR16_SB type= xed_reg_enum_t
Adding GPR16_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_SB()::
Nonterminal name GPR16_SB
read_flat_input 336
Hit a nonterminal, returning at: xed_reg_enum_t CR_R()::
BLines (lines remaining after reading input) = 75070
=============================================
Creating a generator 53
=============================================
ALines (lines before reading input) = 75070
read_input 352
NONTERMINAL: CR_R type= xed_reg_enum_t
Adding CR_R to nonterminal dict
Nonterminal xed_reg_enum_t CR_R()::
Nonterminal name CR_R
read_flat_input 352
Hit a nonterminal, returning at: xed_reg_enum_t CR_B()::
BLines (lines remaining after reading input) = 75053
=============================================
Creating a generator 54
=============================================
ALines (lines before reading input) = 75053
read_input 368
NONTERMINAL: CR_B type= xed_reg_enum_t
Adding CR_B to nonterminal dict
Nonterminal xed_reg_enum_t CR_B()::
Nonterminal name CR_B
read_flat_input 368
Hit a nonterminal, returning at: xed_reg_enum_t DR_R()::
BLines (lines remaining after reading input) = 75036
=============================================
Creating a generator 55
=============================================
ALines (lines before reading input) = 75036
read_input 384
NONTERMINAL: DR_R type= xed_reg_enum_t
Adding DR_R to nonterminal dict
Nonterminal xed_reg_enum_t DR_R()::
Nonterminal name DR_R
read_flat_input 384
Hit a nonterminal, returning at: xed_reg_enum_t X87()::
BLines (lines remaining after reading input) = 75019
=============================================
Creating a generator 56
=============================================
ALines (lines before reading input) = 75019
read_input 400
NONTERMINAL: X87 type= xed_reg_enum_t
Adding X87 to nonterminal dict
Nonterminal xed_reg_enum_t X87()::
Nonterminal name X87
read_flat_input 400
Hit a nonterminal, returning at: xed_reg_enum_t SEG()::
BLines (lines remaining after reading input) = 75010
=============================================
Creating a generator 57
=============================================
ALines (lines before reading input) = 75010
read_input 408
NONTERMINAL: SEG type= xed_reg_enum_t
Adding SEG to nonterminal dict
Nonterminal xed_reg_enum_t SEG()::
Nonterminal name SEG
read_flat_input 408
Hit a nonterminal, returning at: xed_reg_enum_t SEG_MOV()::
BLines (lines remaining after reading input) = 75001
=============================================
Creating a generator 58
=============================================
ALines (lines before reading input) = 75001
read_input 416
NONTERMINAL: SEG_MOV type= xed_reg_enum_t
Adding SEG_MOV to nonterminal dict
Nonterminal xed_reg_enum_t SEG_MOV()::
Nonterminal name SEG_MOV
read_flat_input 416
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG()::
BLines (lines remaining after reading input) = 74992
=============================================
Creating a generator 59
=============================================
ALines (lines before reading input) = 74992
read_input 424
NONTERMINAL: FINAL_DSEG type= xed_reg_enum_t
Adding FINAL_DSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG()::
Nonterminal name FINAL_DSEG
read_flat_input 424
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_NOT64()::
BLines (lines remaining after reading input) = 74988
=============================================
Creating a generator 60
=============================================
ALines (lines before reading input) = 74988
read_input 427
NONTERMINAL: FINAL_DSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_NOT64()::
Nonterminal name FINAL_DSEG_NOT64
read_flat_input 427
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_MODE64()::
BLines (lines remaining after reading input) = 74980
=============================================
Creating a generator 61
=============================================
ALines (lines before reading input) = 74980
read_input 434
NONTERMINAL: FINAL_DSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_MODE64()::
Nonterminal name FINAL_DSEG_MODE64
read_flat_input 434
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1()::
BLines (lines remaining after reading input) = 74972
=============================================
Creating a generator 62
=============================================
ALines (lines before reading input) = 74972
read_input 441
NONTERMINAL: FINAL_DSEG1 type= xed_reg_enum_t
Adding FINAL_DSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1()::
Nonterminal name FINAL_DSEG1
read_flat_input 441
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_NOT64()::
BLines (lines remaining after reading input) = 74968
=============================================
Creating a generator 63
=============================================
ALines (lines before reading input) = 74968
read_input 444
NONTERMINAL: FINAL_DSEG1_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG1_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_NOT64()::
Nonterminal name FINAL_DSEG1_NOT64
read_flat_input 444
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_MODE64()::
BLines (lines remaining after reading input) = 74960
=============================================
Creating a generator 64
=============================================
ALines (lines before reading input) = 74960
read_input 451
NONTERMINAL: FINAL_DSEG1_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG1_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_MODE64()::
Nonterminal name FINAL_DSEG1_MODE64
read_flat_input 451
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG()::
BLines (lines remaining after reading input) = 74952
=============================================
Creating a generator 65
=============================================
ALines (lines before reading input) = 74952
read_input 458
NONTERMINAL: FINAL_ESEG type= xed_reg_enum_t
Adding FINAL_ESEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG()::
Nonterminal name FINAL_ESEG
read_flat_input 458
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG1()::
BLines (lines remaining after reading input) = 74948
=============================================
Creating a generator 66
=============================================
ALines (lines before reading input) = 74948
read_input 461
NONTERMINAL: FINAL_ESEG1 type= xed_reg_enum_t
Adding FINAL_ESEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG1()::
Nonterminal name FINAL_ESEG1
read_flat_input 461
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG1()::
BLines (lines remaining after reading input) = 74944
=============================================
Creating a generator 67
=============================================
ALines (lines before reading input) = 74944
read_input 464
NONTERMINAL: FINAL_SSEG1 type= xed_reg_enum_t
Adding FINAL_SSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG1()::
Nonterminal name FINAL_SSEG1
read_flat_input 464
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG0()::
BLines (lines remaining after reading input) = 74940
=============================================
Creating a generator 68
=============================================
ALines (lines before reading input) = 74940
read_input 467
NONTERMINAL: FINAL_SSEG0 type= xed_reg_enum_t
Adding FINAL_SSEG0 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG0()::
Nonterminal name FINAL_SSEG0
read_flat_input 467
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG()::
BLines (lines remaining after reading input) = 74936
=============================================
Creating a generator 69
=============================================
ALines (lines before reading input) = 74936
read_input 470
NONTERMINAL: FINAL_SSEG type= xed_reg_enum_t
Adding FINAL_SSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG()::
Nonterminal name FINAL_SSEG
read_flat_input 470
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_NOT64()::
BLines (lines remaining after reading input) = 74932
=============================================
Creating a generator 70
=============================================
ALines (lines before reading input) = 74932
read_input 473
NONTERMINAL: FINAL_SSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_SSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_NOT64()::
Nonterminal name FINAL_SSEG_NOT64
read_flat_input 473
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_MODE64()::
BLines (lines remaining after reading input) = 74924
=============================================
Creating a generator 71
=============================================
ALines (lines before reading input) = 74924
read_input 480
NONTERMINAL: FINAL_SSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_SSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_MODE64()::
Nonterminal name FINAL_SSEG_MODE64
read_flat_input 480
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_R()::
BLines (lines remaining after reading input) = 74916
=============================================
Creating a generator 72
=============================================
ALines (lines before reading input) = 74916
read_input 487
NONTERMINAL: GPR8_R type= xed_reg_enum_t
Adding GPR8_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_R()::
Nonterminal name GPR8_R
read_flat_input 487
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_B()::
BLines (lines remaining after reading input) = 74895
=============================================
Creating a generator 73
=============================================
ALines (lines before reading input) = 74895
read_input 507
NONTERMINAL: GPR8_B type= xed_reg_enum_t
Adding GPR8_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_B()::
Nonterminal name GPR8_B
read_flat_input 507
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_SB()::
BLines (lines remaining after reading input) = 74874
=============================================
Creating a generator 74
=============================================
ALines (lines before reading input) = 74874
read_input 527
NONTERMINAL: GPR8_SB type= xed_reg_enum_t
Adding GPR8_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_SB()::
Nonterminal name GPR8_SB
read_flat_input 527
Hit a nonterminal, returning at: OSZ_NONTERM()::
BLines (lines remaining after reading input) = 74853
=============================================
Creating a generator 75
=============================================
ALines (lines before reading input) = 74853
read_input 547
NONTERMINAL: OSZ_NONTERM notype
Adding OSZ_NONTERM to nonterminal dict
Nonterminal OSZ_NONTERM()::
Nonterminal name OSZ_NONTERM
read_flat_input 547
Hit a nonterminal, returning at: DF64()::
BLines (lines remaining after reading input) = 74844
=============================================
Creating a generator 76
=============================================
ALines (lines before reading input) = 74844
read_input 555
NONTERMINAL: DF64 notype
Adding DF64 to nonterminal dict
Nonterminal DF64()::
Nonterminal name DF64
read_flat_input 555
Hit a nonterminal, returning at: REFINING66()::
BLines (lines remaining after reading input) = 74837
=============================================
Creating a generator 77
=============================================
ALines (lines before reading input) = 74837
read_input 561
NONTERMINAL: REFINING66 notype
Adding REFINING66 to nonterminal dict
Nonterminal REFINING66()::
Nonterminal name REFINING66
read_flat_input 561
Hit a nonterminal, returning at: IGNORE66()::
BLines (lines remaining after reading input) = 74832
=============================================
Creating a generator 78
=============================================
ALines (lines before reading input) = 74832
read_input 565
NONTERMINAL: IGNORE66 notype
Adding IGNORE66 to nonterminal dict
Nonterminal IGNORE66()::
Nonterminal name IGNORE66
read_flat_input 565
Hit a nonterminal, returning at: IMMUNE66()::
BLines (lines remaining after reading input) = 74827
=============================================
Creating a generator 79
=============================================
ALines (lines before reading input) = 74827
read_input 569
NONTERMINAL: IMMUNE66 notype
Adding IMMUNE66 to nonterminal dict
Nonterminal IMMUNE66()::
Nonterminal name IMMUNE66
read_flat_input 569
Hit a nonterminal, returning at: CR_WIDTH()::
BLines (lines remaining after reading input) = 74822
=============================================
Creating a generator 80
=============================================
ALines (lines before reading input) = 74822
read_input 573
NONTERMINAL: CR_WIDTH notype
Adding CR_WIDTH to nonterminal dict
Nonterminal CR_WIDTH()::
Nonterminal name CR_WIDTH
read_flat_input 573
Hit a nonterminal, returning at: IMMUNE66_LOOP64()::
BLines (lines remaining after reading input) = 74818
=============================================
Creating a generator 81
=============================================
ALines (lines before reading input) = 74818
read_input 576
NONTERMINAL: IMMUNE66_LOOP64 notype
Adding IMMUNE66_LOOP64 to nonterminal dict
Nonterminal IMMUNE66_LOOP64()::
Nonterminal name IMMUNE66_LOOP64
read_flat_input 576
Hit a nonterminal, returning at: IMMUNE_REXW()::
BLines (lines remaining after reading input) = 74814
=============================================
Creating a generator 82
=============================================
ALines (lines before reading input) = 74814
read_input 579
NONTERMINAL: IMMUNE_REXW notype
Adding IMMUNE_REXW to nonterminal dict
Nonterminal IMMUNE_REXW()::
Nonterminal name IMMUNE_REXW
read_flat_input 579
Hit a nonterminal, returning at: FORCE64()::
BLines (lines remaining after reading input) = 74808
=============================================
Creating a generator 83
=============================================
ALines (lines before reading input) = 74808
read_input 584
NONTERMINAL: FORCE64 notype
Adding FORCE64 to nonterminal dict
Nonterminal FORCE64()::
Nonterminal name FORCE64
read_flat_input 584
Hit a nonterminal, returning at: ASZ_NONTERM()::
BLines (lines remaining after reading input) = 74805
=============================================
Creating a generator 84
=============================================
ALines (lines before reading input) = 74805
read_input 585
NONTERMINAL: ASZ_NONTERM notype
Adding ASZ_NONTERM to nonterminal dict
Nonterminal ASZ_NONTERM()::
Nonterminal name ASZ_NONTERM
read_flat_input 585
Hit a nonterminal, returning at: ONE()::
BLines (lines remaining after reading input) = 74798
=============================================
Creating a generator 85
=============================================
ALines (lines before reading input) = 74798
read_input 591
NONTERMINAL: ONE notype
Adding ONE to nonterminal dict
Nonterminal ONE()::
Nonterminal name ONE
read_flat_input 591
Hit a nonterminal, returning at: UIMMv()::
BLines (lines remaining after reading input) = 74794
=============================================
Creating a generator 86
=============================================
ALines (lines before reading input) = 74794
read_input 594
NONTERMINAL: UIMMv notype
Adding UIMMv to nonterminal dict
Nonterminal UIMMv()::
Nonterminal name UIMMv
read_flat_input 594
Hit a nonterminal, returning at: SIMMz()::
BLines (lines remaining after reading input) = 74790
=============================================
Creating a generator 87
=============================================
ALines (lines before reading input) = 74790
read_input 597
NONTERMINAL: SIMMz notype
Adding SIMMz to nonterminal dict
Nonterminal SIMMz()::
Nonterminal name SIMMz
read_flat_input 597
Hit a nonterminal, returning at: SIMM8()::
BLines (lines remaining after reading input) = 74786
=============================================
Creating a generator 88
=============================================
ALines (lines before reading input) = 74786
read_input 600
NONTERMINAL: SIMM8 notype
Adding SIMM8 to nonterminal dict
Nonterminal SIMM8()::
Nonterminal name SIMM8
read_flat_input 600
Hit a nonterminal, returning at: UIMM8()::
BLines (lines remaining after reading input) = 74784
=============================================
Creating a generator 89
=============================================
ALines (lines before reading input) = 74784
read_input 601
NONTERMINAL: UIMM8 notype
Adding UIMM8 to nonterminal dict
Nonterminal UIMM8()::
Nonterminal name UIMM8
read_flat_input 601
Hit a nonterminal, returning at: UIMM8_1()::
BLines (lines remaining after reading input) = 74782
=============================================
Creating a generator 90
=============================================
ALines (lines before reading input) = 74782
read_input 602
NONTERMINAL: UIMM8_1 notype
Adding UIMM8_1 to nonterminal dict
Nonterminal UIMM8_1()::
Nonterminal name UIMM8_1
read_flat_input 602
Hit a nonterminal, returning at: UIMM16()::
BLines (lines remaining after reading input) = 74780
=============================================
Creating a generator 91
=============================================
ALines (lines before reading input) = 74780
read_input 603
NONTERMINAL: UIMM16 notype
Adding UIMM16 to nonterminal dict
Nonterminal UIMM16()::
Nonterminal name UIMM16
read_flat_input 603
Hit a nonterminal, returning at: UIMM32()::
BLines (lines remaining after reading input) = 74778
=============================================
Creating a generator 92
=============================================
ALines (lines before reading input) = 74778
read_input 604
NONTERMINAL: UIMM32 notype
Adding UIMM32 to nonterminal dict
Nonterminal UIMM32()::
Nonterminal name UIMM32
read_flat_input 604
Hit a nonterminal, returning at: BRDISP8()::
BLines (lines remaining after reading input) = 74776
=============================================
Creating a generator 93
=============================================
ALines (lines before reading input) = 74776
read_input 605
NONTERMINAL: BRDISP8 notype
Adding BRDISP8 to nonterminal dict
Nonterminal BRDISP8()::
Nonterminal name BRDISP8
read_flat_input 605
Hit a nonterminal, returning at: BRDISP32()::
BLines (lines remaining after reading input) = 74774
=============================================
Creating a generator 94
=============================================
ALines (lines before reading input) = 74774
read_input 606
NONTERMINAL: BRDISP32 notype
Adding BRDISP32 to nonterminal dict
Nonterminal BRDISP32()::
Nonterminal name BRDISP32
read_flat_input 606
Hit a nonterminal, returning at: BRDISPz()::
BLines (lines remaining after reading input) = 74772
=============================================
Creating a generator 95
=============================================
ALines (lines before reading input) = 74772
read_input 607
NONTERMINAL: BRDISPz notype
Adding BRDISPz to nonterminal dict
Nonterminal BRDISPz()::
Nonterminal name BRDISPz
read_flat_input 607
Hit a nonterminal, returning at: MEMDISPv()::
BLines (lines remaining after reading input) = 74768
=============================================
Creating a generator 96
=============================================
ALines (lines before reading input) = 74768
read_input 610
NONTERMINAL: MEMDISPv notype
Adding MEMDISPv to nonterminal dict
Nonterminal MEMDISPv()::
Nonterminal name MEMDISPv
read_flat_input 610
Hit a nonterminal, returning at: MEMDISP32()::
BLines (lines remaining after reading input) = 74764
=============================================
Creating a generator 97
=============================================
ALines (lines before reading input) = 74764
read_input 613
NONTERMINAL: MEMDISP32 notype
Adding MEMDISP32 to nonterminal dict
Nonterminal MEMDISP32()::
Nonterminal name MEMDISP32
read_flat_input 613
Hit a nonterminal, returning at: MEMDISP16()::
BLines (lines remaining after reading input) = 74762
=============================================
Creating a generator 98
=============================================
ALines (lines before reading input) = 74762
read_input 614
NONTERMINAL: MEMDISP16 notype
Adding MEMDISP16 to nonterminal dict
Nonterminal MEMDISP16()::
Nonterminal name MEMDISP16
read_flat_input 614
Hit a nonterminal, returning at: MEMDISP8()::
BLines (lines remaining after reading input) = 74760
=============================================
Creating a generator 99
=============================================
ALines (lines before reading input) = 74760
read_input 615
NONTERMINAL: MEMDISP8 notype
Adding MEMDISP8 to nonterminal dict
Nonterminal MEMDISP8()::
Nonterminal name MEMDISP8
read_flat_input 615
Hit a nonterminal, returning at: MEMDISP()::
BLines (lines remaining after reading input) = 74758
=============================================
Creating a generator 100
=============================================
ALines (lines before reading input) = 74758
read_input 616
NONTERMINAL: MEMDISP notype
Adding MEMDISP to nonterminal dict
Nonterminal MEMDISP()::
Nonterminal name MEMDISP
read_flat_input 616
Hit a nonterminal, returning at: MODRM()::
BLines (lines remaining after reading input) = 74753
=============================================
Creating a generator 101
=============================================
ALines (lines before reading input) = 74753
read_input 620
NONTERMINAL: MODRM notype
Adding MODRM to nonterminal dict
Nonterminal MODRM()::
Nonterminal name MODRM
read_flat_input 620
Hit a nonterminal, returning at: MODRM64alt32()::
BLines (lines remaining after reading input) = 74746
=============================================
Creating a generator 102
=============================================
ALines (lines before reading input) = 74746
read_input 626
NONTERMINAL: MODRM64alt32 notype
Adding MODRM64alt32 to nonterminal dict
Nonterminal MODRM64alt32()::
Nonterminal name MODRM64alt32
read_flat_input 626
Hit a nonterminal, returning at: MODRM32()::
BLines (lines remaining after reading input) = 74697
=============================================
Creating a generator 103
=============================================
ALines (lines before reading input) = 74697
read_input 674
NONTERMINAL: MODRM32 notype
Adding MODRM32 to nonterminal dict
Nonterminal MODRM32()::
Nonterminal name MODRM32
read_flat_input 674
Hit a nonterminal, returning at: MODRM16()::
BLines (lines remaining after reading input) = 74672
=============================================
Creating a generator 104
=============================================
ALines (lines before reading input) = 74672
read_input 698
NONTERMINAL: MODRM16 notype
Adding MODRM16 to nonterminal dict
Nonterminal MODRM16()::
Nonterminal name MODRM16
read_flat_input 698
Hit a nonterminal, returning at: SIB()::
BLines (lines remaining after reading input) = 74647
=============================================
Creating a generator 105
=============================================
ALines (lines before reading input) = 74647
read_input 722
NONTERMINAL: SIB notype
Adding SIB to nonterminal dict
Nonterminal SIB()::
Nonterminal name SIB
read_flat_input 722
Hit a nonterminal, returning at: SIB_BASE0()::
BLines (lines remaining after reading input) = 74582
=============================================
Creating a generator 106
=============================================
ALines (lines before reading input) = 74582
read_input 786
NONTERMINAL: SIB_BASE0 notype
Adding SIB_BASE0 to nonterminal dict
Nonterminal SIB_BASE0()::
Nonterminal name SIB_BASE0
read_flat_input 786
Hit a nonterminal, returning at: OVERRIDE_SEG0()::
BLines (lines remaining after reading input) = 74561
=============================================
Creating a generator 107
=============================================
ALines (lines before reading input) = 74561
read_input 806
NONTERMINAL: OVERRIDE_SEG0 notype
Adding OVERRIDE_SEG0 to nonterminal dict
Nonterminal OVERRIDE_SEG0()::
Nonterminal name OVERRIDE_SEG0
read_flat_input 806
Hit a nonterminal, returning at: OVERRIDE_SEG1()::
BLines (lines remaining after reading input) = 74557
=============================================
Creating a generator 108
=============================================
ALines (lines before reading input) = 74557
read_input 809
NONTERMINAL: OVERRIDE_SEG1 notype
Adding OVERRIDE_SEG1 to nonterminal dict
Nonterminal OVERRIDE_SEG1()::
Nonterminal name OVERRIDE_SEG1
read_flat_input 809
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R()::
BLines (lines remaining after reading input) = 74553
=============================================
Creating a generator 109
=============================================
ALines (lines before reading input) = 74553
read_input 812
NONTERMINAL: XMM_R type= xed_reg_enum_t
Adding XMM_R to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R()::
Nonterminal name XMM_R
read_flat_input 812
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_32()::
BLines (lines remaining after reading input) = 74549
=============================================
Creating a generator 110
=============================================
ALines (lines before reading input) = 74549
read_input 815
NONTERMINAL: XMM_R_32 type= xed_reg_enum_t
Adding XMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_32()::
Nonterminal name XMM_R_32
read_flat_input 815
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_64()::
BLines (lines remaining after reading input) = 74540
=============================================
Creating a generator 111
=============================================
ALines (lines before reading input) = 74540
read_input 823
NONTERMINAL: XMM_R_64 type= xed_reg_enum_t
Adding XMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_64()::
Nonterminal name XMM_R_64
read_flat_input 823
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B()::
BLines (lines remaining after reading input) = 74523
=============================================
Creating a generator 112
=============================================
ALines (lines before reading input) = 74523
read_input 839
NONTERMINAL: XMM_B type= xed_reg_enum_t
Adding XMM_B to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B()::
Nonterminal name XMM_B
read_flat_input 839
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_32()::
BLines (lines remaining after reading input) = 74519
=============================================
Creating a generator 113
=============================================
ALines (lines before reading input) = 74519
read_input 842
NONTERMINAL: XMM_B_32 type= xed_reg_enum_t
Adding XMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_32()::
Nonterminal name XMM_B_32
read_flat_input 842
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_64()::
BLines (lines remaining after reading input) = 74510
=============================================
Creating a generator 114
=============================================
ALines (lines before reading input) = 74510
read_input 850
NONTERMINAL: XMM_B_64 type= xed_reg_enum_t
Adding XMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_64()::
Nonterminal name XMM_B_64
read_flat_input 850
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 74493
=============================================
Creating a generator 115
=============================================
ALines (lines before reading input) = 74493
read_input 866
NONTERMINAL: AVX_SPLITTER notype
Adding AVX_SPLITTER to nonterminal dict
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 866
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 74491
=============================================
Creating a generator 116
=============================================
ALines (lines before reading input) = 74491
read_input 867
NONTERMINAL: EVEX_SPLITTER notype
Adding EVEX_SPLITTER to nonterminal dict
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 867
Hit a nonterminal, returning at: BND_R_CHECK()::
BLines (lines remaining after reading input) = 74489
=============================================
Creating a generator 117
=============================================
ALines (lines before reading input) = 74489
read_input 868
NONTERMINAL: BND_R_CHECK notype
Adding BND_R_CHECK to nonterminal dict
Nonterminal BND_R_CHECK()::
Nonterminal name BND_R_CHECK
read_flat_input 868
Hit a nonterminal, returning at: BND_B_CHECK()::
BLines (lines remaining after reading input) = 74472
=============================================
Creating a generator 118
=============================================
ALines (lines before reading input) = 74472
read_input 884
NONTERMINAL: BND_B_CHECK notype
Adding BND_B_CHECK to nonterminal dict
Nonterminal BND_B_CHECK()::
Nonterminal name BND_B_CHECK
read_flat_input 884
Hit a nonterminal, returning at: xed_reg_enum_t BND_R()::
BLines (lines remaining after reading input) = 74455
=============================================
Creating a generator 119
=============================================
ALines (lines before reading input) = 74455
read_input 900
NONTERMINAL: BND_R type= xed_reg_enum_t
Adding BND_R to nonterminal dict
Nonterminal xed_reg_enum_t BND_R()::
Nonterminal name BND_R
read_flat_input 900
Hit a nonterminal, returning at: xed_reg_enum_t BND_B()::
BLines (lines remaining after reading input) = 74438
=============================================
Creating a generator 120
=============================================
ALines (lines before reading input) = 74438
read_input 916
NONTERMINAL: BND_B type= xed_reg_enum_t
Adding BND_B to nonterminal dict
Nonterminal xed_reg_enum_t BND_B()::
Nonterminal name BND_B
read_flat_input 916
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_R()::
BLines (lines remaining after reading input) = 74421
=============================================
Creating a generator 121
=============================================
ALines (lines before reading input) = 74421
read_input 932
NONTERMINAL: A_GPR_R type= xed_reg_enum_t
Adding A_GPR_R to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_R()::
Nonterminal name A_GPR_R
read_flat_input 932
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_B()::
BLines (lines remaining after reading input) = 74404
=============================================
Creating a generator 122
=============================================
ALines (lines before reading input) = 74404
read_input 948
NONTERMINAL: A_GPR_B type= xed_reg_enum_t
Adding A_GPR_B to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_B()::
Nonterminal name A_GPR_B
read_flat_input 948
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE()::
BLines (lines remaining after reading input) = 74387
=============================================
Creating a generator 123
=============================================
ALines (lines before reading input) = 74387
read_input 964
NONTERMINAL: XMM_SE type= xed_reg_enum_t
Adding XMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE()::
Nonterminal name XMM_SE
read_flat_input 964
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE64()::
BLines (lines remaining after reading input) = 74383
=============================================
Creating a generator 124
=============================================
ALines (lines before reading input) = 74383
read_input 967
NONTERMINAL: XMM_SE64 type= xed_reg_enum_t
Adding XMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE64()::
Nonterminal name XMM_SE64
read_flat_input 967
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE32()::
BLines (lines remaining after reading input) = 74366
=============================================
Creating a generator 125
=============================================
ALines (lines before reading input) = 74366
read_input 983
NONTERMINAL: XMM_SE32 type= xed_reg_enum_t
Adding XMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE32()::
Nonterminal name XMM_SE32
read_flat_input 983
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE()::
BLines (lines remaining after reading input) = 74349
=============================================
Creating a generator 126
=============================================
ALines (lines before reading input) = 74349
read_input 999
NONTERMINAL: YMM_SE type= xed_reg_enum_t
Adding YMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE()::
Nonterminal name YMM_SE
read_flat_input 999
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE64()::
BLines (lines remaining after reading input) = 74345
=============================================
Creating a generator 127
=============================================
ALines (lines before reading input) = 74345
read_input 1002
NONTERMINAL: YMM_SE64 type= xed_reg_enum_t
Adding YMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE64()::
Nonterminal name YMM_SE64
read_flat_input 1002
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE32()::
BLines (lines remaining after reading input) = 74328
=============================================
Creating a generator 128
=============================================
ALines (lines before reading input) = 74328
read_input 1018
NONTERMINAL: YMM_SE32 type= xed_reg_enum_t
Adding YMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE32()::
Nonterminal name YMM_SE32
read_flat_input 1018
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N()::
BLines (lines remaining after reading input) = 74311
=============================================
Creating a generator 129
=============================================
ALines (lines before reading input) = 74311
read_input 1034
NONTERMINAL: XMM_N type= xed_reg_enum_t
Adding XMM_N to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N()::
Nonterminal name XMM_N
read_flat_input 1034
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_32()::
BLines (lines remaining after reading input) = 74307
=============================================
Creating a generator 130
=============================================
ALines (lines before reading input) = 74307
read_input 1037
NONTERMINAL: XMM_N_32 type= xed_reg_enum_t
Adding XMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_32()::
Nonterminal name XMM_N_32
read_flat_input 1037
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_64()::
BLines (lines remaining after reading input) = 74298
=============================================
Creating a generator 131
=============================================
ALines (lines before reading input) = 74298
read_input 1045
NONTERMINAL: XMM_N_64 type= xed_reg_enum_t
Adding XMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_64()::
Nonterminal name XMM_N_64
read_flat_input 1045
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N()::
BLines (lines remaining after reading input) = 74281
=============================================
Creating a generator 132
=============================================
ALines (lines before reading input) = 74281
read_input 1061
NONTERMINAL: YMM_N type= xed_reg_enum_t
Adding YMM_N to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N()::
Nonterminal name YMM_N
read_flat_input 1061
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_32()::
BLines (lines remaining after reading input) = 74277
=============================================
Creating a generator 133
=============================================
ALines (lines before reading input) = 74277
read_input 1064
NONTERMINAL: YMM_N_32 type= xed_reg_enum_t
Adding YMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_32()::
Nonterminal name YMM_N_32
read_flat_input 1064
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_64()::
BLines (lines remaining after reading input) = 74268
=============================================
Creating a generator 134
=============================================
ALines (lines before reading input) = 74268
read_input 1072
NONTERMINAL: YMM_N_64 type= xed_reg_enum_t
Adding YMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_64()::
Nonterminal name YMM_N_64
read_flat_input 1072
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R()::
BLines (lines remaining after reading input) = 74251
=============================================
Creating a generator 135
=============================================
ALines (lines before reading input) = 74251
read_input 1088
NONTERMINAL: YMM_R type= xed_reg_enum_t
Adding YMM_R to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R()::
Nonterminal name YMM_R
read_flat_input 1088
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_32()::
BLines (lines remaining after reading input) = 74247
=============================================
Creating a generator 136
=============================================
ALines (lines before reading input) = 74247
read_input 1091
NONTERMINAL: YMM_R_32 type= xed_reg_enum_t
Adding YMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_32()::
Nonterminal name YMM_R_32
read_flat_input 1091
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_64()::
BLines (lines remaining after reading input) = 74238
=============================================
Creating a generator 137
=============================================
ALines (lines before reading input) = 74238
read_input 1099
NONTERMINAL: YMM_R_64 type= xed_reg_enum_t
Adding YMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_64()::
Nonterminal name YMM_R_64
read_flat_input 1099
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B()::
BLines (lines remaining after reading input) = 74221
=============================================
Creating a generator 138
=============================================
ALines (lines before reading input) = 74221
read_input 1115
NONTERMINAL: YMM_B type= xed_reg_enum_t
Adding YMM_B to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B()::
Nonterminal name YMM_B
read_flat_input 1115
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_32()::
BLines (lines remaining after reading input) = 74217
=============================================
Creating a generator 139
=============================================
ALines (lines before reading input) = 74217
read_input 1118
NONTERMINAL: YMM_B_32 type= xed_reg_enum_t
Adding YMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_32()::
Nonterminal name YMM_B_32
read_flat_input 1118
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_64()::
BLines (lines remaining after reading input) = 74208
=============================================
Creating a generator 140
=============================================
ALines (lines before reading input) = 74208
read_input 1126
NONTERMINAL: YMM_B_64 type= xed_reg_enum_t
Adding YMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_64()::
Nonterminal name YMM_B_64
read_flat_input 1126
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 74191
=============================================
Creating a generator 141
=============================================
ALines (lines before reading input) = 74191
read_input 1142
NONTERMINAL: AVX_SPLITTER notype
FOUND OLD PARSER FOR AVX_SPLITTER
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 1142
Hit a nonterminal, returning at: SE_IMM8()::
BLines (lines remaining after reading input) = 74188
=============================================
Creating a generator 141
=============================================
ALines (lines before reading input) = 74188
read_input 1144
NONTERMINAL: SE_IMM8 notype
Adding SE_IMM8 to nonterminal dict
Nonterminal SE_IMM8()::
Nonterminal name SE_IMM8
read_flat_input 1144
Hit a nonterminal, returning at: VMODRM_YMM()::
BLines (lines remaining after reading input) = 74186
=============================================
Creating a generator 142
=============================================
ALines (lines before reading input) = 74186
read_input 1145
NONTERMINAL: VMODRM_YMM notype
Adding VMODRM_YMM to nonterminal dict
Nonterminal VMODRM_YMM()::
Nonterminal name VMODRM_YMM
read_flat_input 1145
Hit a nonterminal, returning at: VMODRM_XMM()::
BLines (lines remaining after reading input) = 74182
=============================================
Creating a generator 143
=============================================
ALines (lines before reading input) = 74182
read_input 1148
NONTERMINAL: VMODRM_XMM notype
Adding VMODRM_XMM to nonterminal dict
Nonterminal VMODRM_XMM()::
Nonterminal name VMODRM_XMM
read_flat_input 1148
Hit a nonterminal, returning at: VSIB_YMM()::
BLines (lines remaining after reading input) = 74178
=============================================
Creating a generator 144
=============================================
ALines (lines before reading input) = 74178
read_input 1151
NONTERMINAL: VSIB_YMM notype
Adding VSIB_YMM to nonterminal dict
Nonterminal VSIB_YMM()::
Nonterminal name VSIB_YMM
read_flat_input 1151
Hit a nonterminal, returning at: VSIB_XMM()::
BLines (lines remaining after reading input) = 74173
=============================================
Creating a generator 145
=============================================
ALines (lines before reading input) = 74173
read_input 1155
NONTERMINAL: VSIB_XMM notype
Adding VSIB_XMM to nonterminal dict
Nonterminal VSIB_XMM()::
Nonterminal name VSIB_XMM
read_flat_input 1155
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 74168
=============================================
Creating a generator 146
=============================================
ALines (lines before reading input) = 74168
read_input 1159
NONTERMINAL: VSIB_INDEX_YMM type= xed_reg_enum_t
Adding VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_YMM()::
Nonterminal name VSIB_INDEX_YMM
read_flat_input 1159
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 74151
=============================================
Creating a generator 147
=============================================
ALines (lines before reading input) = 74151
read_input 1175
NONTERMINAL: VSIB_INDEX_XMM type= xed_reg_enum_t
Adding VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_XMM()::
Nonterminal name VSIB_INDEX_XMM
read_flat_input 1175
Hit a nonterminal, returning at: VSIB_BASE()::
BLines (lines remaining after reading input) = 74134
=============================================
Creating a generator 148
=============================================
ALines (lines before reading input) = 74134
read_input 1191
NONTERMINAL: VSIB_BASE notype
Adding VSIB_BASE to nonterminal dict
Nonterminal VSIB_BASE()::
Nonterminal name VSIB_BASE
read_flat_input 1191
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_R()::
BLines (lines remaining after reading input) = 74115
=============================================
Creating a generator 149
=============================================
ALines (lines before reading input) = 74115
read_input 1209
NONTERMINAL: VGPRy_R type= xed_reg_enum_t
Adding VGPRy_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_R()::
Nonterminal name VGPRy_R
read_flat_input 1209
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_B()::
BLines (lines remaining after reading input) = 74111
=============================================
Creating a generator 150
=============================================
ALines (lines before reading input) = 74111
read_input 1212
NONTERMINAL: VGPRy_B type= xed_reg_enum_t
Adding VGPRy_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_B()::
Nonterminal name VGPRy_B
read_flat_input 1212
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_N()::
BLines (lines remaining after reading input) = 74107
=============================================
Creating a generator 151
=============================================
ALines (lines before reading input) = 74107
read_input 1215
NONTERMINAL: VGPRy_N type= xed_reg_enum_t
Adding VGPRy_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_N()::
Nonterminal name VGPRy_N
read_flat_input 1215
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N()::
BLines (lines remaining after reading input) = 74103
=============================================
Creating a generator 152
=============================================
ALines (lines before reading input) = 74103
read_input 1218
NONTERMINAL: VGPR32_N type= xed_reg_enum_t
Adding VGPR32_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N()::
Nonterminal name VGPR32_N
read_flat_input 1218
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B()::
BLines (lines remaining after reading input) = 74099
=============================================
Creating a generator 153
=============================================
ALines (lines before reading input) = 74099
read_input 1221
NONTERMINAL: VGPR32_B type= xed_reg_enum_t
Adding VGPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B()::
Nonterminal name VGPR32_B
read_flat_input 1221
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R()::
BLines (lines remaining after reading input) = 74095
=============================================
Creating a generator 154
=============================================
ALines (lines before reading input) = 74095
read_input 1224
NONTERMINAL: VGPR32_R type= xed_reg_enum_t
Adding VGPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R()::
Nonterminal name VGPR32_R
read_flat_input 1224
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_32()::
BLines (lines remaining after reading input) = 74091
=============================================
Creating a generator 155
=============================================
ALines (lines before reading input) = 74091
read_input 1227
NONTERMINAL: VGPR32_N_32 type= xed_reg_enum_t
Adding VGPR32_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_32()::
Nonterminal name VGPR32_N_32
read_flat_input 1227
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_64()::
BLines (lines remaining after reading input) = 74082
=============================================
Creating a generator 156
=============================================
ALines (lines before reading input) = 74082
read_input 1235
NONTERMINAL: VGPR32_N_64 type= xed_reg_enum_t
Adding VGPR32_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_64()::
Nonterminal name VGPR32_N_64
read_flat_input 1235
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_N()::
BLines (lines remaining after reading input) = 74065
=============================================
Creating a generator 157
=============================================
ALines (lines before reading input) = 74065
read_input 1251
NONTERMINAL: VGPR64_N type= xed_reg_enum_t
Adding VGPR64_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_N()::
Nonterminal name VGPR64_N
read_flat_input 1251
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_32()::
BLines (lines remaining after reading input) = 74048
=============================================
Creating a generator 158
=============================================
ALines (lines before reading input) = 74048
read_input 1267
NONTERMINAL: VGPR32_R_32 type= xed_reg_enum_t
Adding VGPR32_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_32()::
Nonterminal name VGPR32_R_32
read_flat_input 1267
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_64()::
BLines (lines remaining after reading input) = 74039
=============================================
Creating a generator 159
=============================================
ALines (lines before reading input) = 74039
read_input 1275
NONTERMINAL: VGPR32_R_64 type= xed_reg_enum_t
Adding VGPR32_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_64()::
Nonterminal name VGPR32_R_64
read_flat_input 1275
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_R()::
BLines (lines remaining after reading input) = 74022
=============================================
Creating a generator 160
=============================================
ALines (lines before reading input) = 74022
read_input 1291
NONTERMINAL: VGPR64_R type= xed_reg_enum_t
Adding VGPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_R()::
Nonterminal name VGPR64_R
read_flat_input 1291
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_32()::
BLines (lines remaining after reading input) = 74005
=============================================
Creating a generator 161
=============================================
ALines (lines before reading input) = 74005
read_input 1307
NONTERMINAL: VGPR32_B_32 type= xed_reg_enum_t
Adding VGPR32_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_32()::
Nonterminal name VGPR32_B_32
read_flat_input 1307
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_64()::
BLines (lines remaining after reading input) = 73996
=============================================
Creating a generator 162
=============================================
ALines (lines before reading input) = 73996
read_input 1315
NONTERMINAL: VGPR32_B_64 type= xed_reg_enum_t
Adding VGPR32_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_64()::
Nonterminal name VGPR32_B_64
read_flat_input 1315
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_B()::
BLines (lines remaining after reading input) = 73979
=============================================
Creating a generator 163
=============================================
ALines (lines before reading input) = 73979
read_input 1331
NONTERMINAL: VGPR64_B type= xed_reg_enum_t
Adding VGPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_B()::
Nonterminal name VGPR64_B
read_flat_input 1331
Hit a nonterminal, returning at: NELEM_TUPLE1_4X()::
BLines (lines remaining after reading input) = 73962
=============================================
Creating a generator 164
=============================================
ALines (lines before reading input) = 73962
read_input 1347
NONTERMINAL: NELEM_TUPLE1_4X notype
Adding NELEM_TUPLE1_4X to nonterminal dict
Nonterminal NELEM_TUPLE1_4X()::
Nonterminal name NELEM_TUPLE1_4X
read_flat_input 1347
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 73958
=============================================
Creating a generator 165
=============================================
ALines (lines before reading input) = 73958
read_input 1350
NONTERMINAL: EVEX_SPLITTER notype
FOUND OLD PARSER FOR EVEX_SPLITTER
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 1350
Hit a nonterminal, returning at: AVX512_ROUND()::
BLines (lines remaining after reading input) = 73954
=============================================
Creating a generator 165
=============================================
ALines (lines before reading input) = 73954
read_input 1353
NONTERMINAL: AVX512_ROUND notype
Adding AVX512_ROUND to nonterminal dict
Nonterminal AVX512_ROUND()::
Nonterminal name AVX512_ROUND
read_flat_input 1353
Hit a nonterminal, returning at: SAE()::
BLines (lines remaining after reading input) = 73949
=============================================
Creating a generator 166
=============================================
ALines (lines before reading input) = 73949
read_input 1357
NONTERMINAL: SAE notype
Adding SAE to nonterminal dict
Nonterminal SAE()::
Nonterminal name SAE
read_flat_input 1357
Hit a nonterminal, returning at: ESIZE_128_BITS()::
BLines (lines remaining after reading input) = 73946
=============================================
Creating a generator 167
=============================================
ALines (lines before reading input) = 73946
read_input 1359
NONTERMINAL: ESIZE_128_BITS notype
Adding ESIZE_128_BITS to nonterminal dict
Nonterminal ESIZE_128_BITS()::
Nonterminal name ESIZE_128_BITS
read_flat_input 1359
Hit a nonterminal, returning at: ESIZE_64_BITS()::
BLines (lines remaining after reading input) = 73944
=============================================
Creating a generator 168
=============================================
ALines (lines before reading input) = 73944
read_input 1360
NONTERMINAL: ESIZE_64_BITS notype
Adding ESIZE_64_BITS to nonterminal dict
Nonterminal ESIZE_64_BITS()::
Nonterminal name ESIZE_64_BITS
read_flat_input 1360
Hit a nonterminal, returning at: ESIZE_32_BITS()::
BLines (lines remaining after reading input) = 73942
=============================================
Creating a generator 169
=============================================
ALines (lines before reading input) = 73942
read_input 1361
NONTERMINAL: ESIZE_32_BITS notype
Adding ESIZE_32_BITS to nonterminal dict
Nonterminal ESIZE_32_BITS()::
Nonterminal name ESIZE_32_BITS
read_flat_input 1361
Hit a nonterminal, returning at: ESIZE_16_BITS()::
BLines (lines remaining after reading input) = 73940
=============================================
Creating a generator 170
=============================================
ALines (lines before reading input) = 73940
read_input 1362
NONTERMINAL: ESIZE_16_BITS notype
Adding ESIZE_16_BITS to nonterminal dict
Nonterminal ESIZE_16_BITS()::
Nonterminal name ESIZE_16_BITS
read_flat_input 1362
Hit a nonterminal, returning at: ESIZE_8_BITS()::
BLines (lines remaining after reading input) = 73938
=============================================
Creating a generator 171
=============================================
ALines (lines before reading input) = 73938
read_input 1363
NONTERMINAL: ESIZE_8_BITS notype
Adding ESIZE_8_BITS to nonterminal dict
Nonterminal ESIZE_8_BITS()::
Nonterminal name ESIZE_8_BITS
read_flat_input 1363
Hit a nonterminal, returning at: ESIZE_4_BITS()::
BLines (lines remaining after reading input) = 73936
=============================================
Creating a generator 172
=============================================
ALines (lines before reading input) = 73936
read_input 1364
NONTERMINAL: ESIZE_4_BITS notype
Adding ESIZE_4_BITS to nonterminal dict
Nonterminal ESIZE_4_BITS()::
Nonterminal name ESIZE_4_BITS
read_flat_input 1364
Hit a nonterminal, returning at: ESIZE_2_BITS()::
BLines (lines remaining after reading input) = 73934
=============================================
Creating a generator 173
=============================================
ALines (lines before reading input) = 73934
read_input 1365
NONTERMINAL: ESIZE_2_BITS notype
Adding ESIZE_2_BITS to nonterminal dict
Nonterminal ESIZE_2_BITS()::
Nonterminal name ESIZE_2_BITS
read_flat_input 1365
Hit a nonterminal, returning at: ESIZE_1_BITS()::
BLines (lines remaining after reading input) = 73932
=============================================
Creating a generator 174
=============================================
ALines (lines before reading input) = 73932
read_input 1366
NONTERMINAL: ESIZE_1_BITS notype
Adding ESIZE_1_BITS to nonterminal dict
Nonterminal ESIZE_1_BITS()::
Nonterminal name ESIZE_1_BITS
read_flat_input 1366
Hit a nonterminal, returning at: NELEM_MOVDDUP()::
BLines (lines remaining after reading input) = 73930
=============================================
Creating a generator 175
=============================================
ALines (lines before reading input) = 73930
read_input 1367
NONTERMINAL: NELEM_MOVDDUP notype
Adding NELEM_MOVDDUP to nonterminal dict
Nonterminal NELEM_MOVDDUP()::
Nonterminal name NELEM_MOVDDUP
read_flat_input 1367
Hit a nonterminal, returning at: NELEM_FULLMEM()::
BLines (lines remaining after reading input) = 73926
=============================================
Creating a generator 176
=============================================
ALines (lines before reading input) = 73926
read_input 1370
NONTERMINAL: NELEM_FULLMEM notype
Adding NELEM_FULLMEM to nonterminal dict
Nonterminal NELEM_FULLMEM()::
Nonterminal name NELEM_FULLMEM
read_flat_input 1370
Hit a nonterminal, returning at: NELEM_HALFMEM()::
BLines (lines remaining after reading input) = 73895
=============================================
Creating a generator 177
=============================================
ALines (lines before reading input) = 73895
read_input 1400
NONTERMINAL: NELEM_HALFMEM notype
Adding NELEM_HALFMEM to nonterminal dict
Nonterminal NELEM_HALFMEM()::
Nonterminal name NELEM_HALFMEM
read_flat_input 1400
Hit a nonterminal, returning at: NELEM_QUARTERMEM()::
BLines (lines remaining after reading input) = 73864
=============================================
Creating a generator 178
=============================================
ALines (lines before reading input) = 73864
read_input 1430
NONTERMINAL: NELEM_QUARTERMEM notype
Adding NELEM_QUARTERMEM to nonterminal dict
Nonterminal NELEM_QUARTERMEM()::
Nonterminal name NELEM_QUARTERMEM
read_flat_input 1430
Hit a nonterminal, returning at: NELEM_EIGHTHMEM()::
BLines (lines remaining after reading input) = 73833
=============================================
Creating a generator 179
=============================================
ALines (lines before reading input) = 73833
read_input 1460
NONTERMINAL: NELEM_EIGHTHMEM notype
Adding NELEM_EIGHTHMEM to nonterminal dict
Nonterminal NELEM_EIGHTHMEM()::
Nonterminal name NELEM_EIGHTHMEM
read_flat_input 1460
Hit a nonterminal, returning at: NELEM_GPR_READER_BYTE()::
BLines (lines remaining after reading input) = 73802
=============================================
Creating a generator 180
=============================================
ALines (lines before reading input) = 73802
read_input 1490
NONTERMINAL: NELEM_GPR_READER_BYTE notype
Adding NELEM_GPR_READER_BYTE to nonterminal dict
Nonterminal NELEM_GPR_READER_BYTE()::
Nonterminal name NELEM_GPR_READER_BYTE
read_flat_input 1490
Hit a nonterminal, returning at: NELEM_GPR_READER_WORD()::
BLines (lines remaining after reading input) = 73798
=============================================
Creating a generator 181
=============================================
ALines (lines before reading input) = 73798
read_input 1493
NONTERMINAL: NELEM_GPR_READER_WORD notype
Adding NELEM_GPR_READER_WORD to nonterminal dict
Nonterminal NELEM_GPR_READER_WORD()::
Nonterminal name NELEM_GPR_READER_WORD
read_flat_input 1493
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_D()::
BLines (lines remaining after reading input) = 73794
=============================================
Creating a generator 182
=============================================
ALines (lines before reading input) = 73794
read_input 1496
NONTERMINAL: NELEM_GPR_WRITER_LDOP_D notype
Adding NELEM_GPR_WRITER_LDOP_D to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_D()::
Nonterminal name NELEM_GPR_WRITER_LDOP_D
read_flat_input 1496
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_Q()::
BLines (lines remaining after reading input) = 73790
=============================================
Creating a generator 183
=============================================
ALines (lines before reading input) = 73790
read_input 1499
NONTERMINAL: NELEM_GPR_WRITER_LDOP_Q notype
Adding NELEM_GPR_WRITER_LDOP_Q to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_Q()::
Nonterminal name NELEM_GPR_WRITER_LDOP_Q
read_flat_input 1499
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_BYTE()::
BLines (lines remaining after reading input) = 73786
=============================================
Creating a generator 184
=============================================
ALines (lines before reading input) = 73786
read_input 1502
NONTERMINAL: NELEM_GPR_WRITER_STORE_BYTE notype
Adding NELEM_GPR_WRITER_STORE_BYTE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_BYTE()::
Nonterminal name NELEM_GPR_WRITER_STORE_BYTE
read_flat_input 1502
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_WORD()::
BLines (lines remaining after reading input) = 73782
=============================================
Creating a generator 185
=============================================
ALines (lines before reading input) = 73782
read_input 1505
NONTERMINAL: NELEM_GPR_WRITER_STORE_WORD notype
Adding NELEM_GPR_WRITER_STORE_WORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_WORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_WORD
read_flat_input 1505
Hit a nonterminal, returning at: NELEM_TUPLE1_BYTE()::
BLines (lines remaining after reading input) = 73778
=============================================
Creating a generator 186
=============================================
ALines (lines before reading input) = 73778
read_input 1508
NONTERMINAL: NELEM_TUPLE1_BYTE notype
Adding NELEM_TUPLE1_BYTE to nonterminal dict
Nonterminal NELEM_TUPLE1_BYTE()::
Nonterminal name NELEM_TUPLE1_BYTE
read_flat_input 1508
Hit a nonterminal, returning at: NELEM_TUPLE1_WORD()::
BLines (lines remaining after reading input) = 73774
=============================================
Creating a generator 187
=============================================
ALines (lines before reading input) = 73774
read_input 1511
NONTERMINAL: NELEM_TUPLE1_WORD notype
Adding NELEM_TUPLE1_WORD to nonterminal dict
Nonterminal NELEM_TUPLE1_WORD()::
Nonterminal name NELEM_TUPLE1_WORD
read_flat_input 1511
Hit a nonterminal, returning at: NELEM_SCALAR()::
BLines (lines remaining after reading input) = 73770
=============================================
Creating a generator 188
=============================================
ALines (lines before reading input) = 73770
read_input 1514
NONTERMINAL: NELEM_SCALAR notype
Adding NELEM_SCALAR to nonterminal dict
Nonterminal NELEM_SCALAR()::
Nonterminal name NELEM_SCALAR
read_flat_input 1514
Hit a nonterminal, returning at: NELEM_TUPLE1_SUBDWORD()::
BLines (lines remaining after reading input) = 73766
=============================================
Creating a generator 189
=============================================
ALines (lines before reading input) = 73766
read_input 1517
NONTERMINAL: NELEM_TUPLE1_SUBDWORD notype
Adding NELEM_TUPLE1_SUBDWORD to nonterminal dict
Nonterminal NELEM_TUPLE1_SUBDWORD()::
Nonterminal name NELEM_TUPLE1_SUBDWORD
read_flat_input 1517
Hit a nonterminal, returning at: NELEM_GPR_READER()::
BLines (lines remaining after reading input) = 73762
=============================================
Creating a generator 190
=============================================
ALines (lines before reading input) = 73762
read_input 1520
NONTERMINAL: NELEM_GPR_READER notype
Adding NELEM_GPR_READER to nonterminal dict
Nonterminal NELEM_GPR_READER()::
Nonterminal name NELEM_GPR_READER
read_flat_input 1520
Hit a nonterminal, returning at: NELEM_GPR_READER_SUBDWORD()::
BLines (lines remaining after reading input) = 73758
=============================================
Creating a generator 191
=============================================
ALines (lines before reading input) = 73758
read_input 1523
NONTERMINAL: NELEM_GPR_READER_SUBDWORD notype
Adding NELEM_GPR_READER_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_READER_SUBDWORD()::
Nonterminal name NELEM_GPR_READER_SUBDWORD
read_flat_input 1523
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP()::
BLines (lines remaining after reading input) = 73754
=============================================
Creating a generator 192
=============================================
ALines (lines before reading input) = 73754
read_input 1526
NONTERMINAL: NELEM_GPR_WRITER_LDOP notype
Adding NELEM_GPR_WRITER_LDOP to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP()::
Nonterminal name NELEM_GPR_WRITER_LDOP
read_flat_input 1526
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE()::
BLines (lines remaining after reading input) = 73750
=============================================
Creating a generator 193
=============================================
ALines (lines before reading input) = 73750
read_input 1529
NONTERMINAL: NELEM_GPR_WRITER_STORE notype
Adding NELEM_GPR_WRITER_STORE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE()::
Nonterminal name NELEM_GPR_WRITER_STORE
read_flat_input 1529
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_SUBDWORD()::
BLines (lines remaining after reading input) = 73746
=============================================
Creating a generator 194
=============================================
ALines (lines before reading input) = 73746
read_input 1532
NONTERMINAL: NELEM_GPR_WRITER_STORE_SUBDWORD notype
Adding NELEM_GPR_WRITER_STORE_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_SUBDWORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_SUBDWORD
read_flat_input 1532
Hit a nonterminal, returning at: NELEM_TUPLE1()::
BLines (lines remaining after reading input) = 73742
=============================================
Creating a generator 195
=============================================
ALines (lines before reading input) = 73742
read_input 1535
NONTERMINAL: NELEM_TUPLE1 notype
Adding NELEM_TUPLE1 to nonterminal dict
Nonterminal NELEM_TUPLE1()::
Nonterminal name NELEM_TUPLE1
read_flat_input 1535
Hit a nonterminal, returning at: NELEM_GSCAT()::
BLines (lines remaining after reading input) = 73738
=============================================
Creating a generator 196
=============================================
ALines (lines before reading input) = 73738
read_input 1538
NONTERMINAL: NELEM_GSCAT notype
Adding NELEM_GSCAT to nonterminal dict
Nonterminal NELEM_GSCAT()::
Nonterminal name NELEM_GSCAT
read_flat_input 1538
Hit a nonterminal, returning at: NELEM_TUPLE2()::
BLines (lines remaining after reading input) = 73734
=============================================
Creating a generator 197
=============================================
ALines (lines before reading input) = 73734
read_input 1541
NONTERMINAL: NELEM_TUPLE2 notype
Adding NELEM_TUPLE2 to nonterminal dict
Nonterminal NELEM_TUPLE2()::
Nonterminal name NELEM_TUPLE2
read_flat_input 1541
Hit a nonterminal, returning at: NELEM_TUPLE4()::
BLines (lines remaining after reading input) = 73730
=============================================
Creating a generator 198
=============================================
ALines (lines before reading input) = 73730
read_input 1544
NONTERMINAL: NELEM_TUPLE4 notype
Adding NELEM_TUPLE4 to nonterminal dict
Nonterminal NELEM_TUPLE4()::
Nonterminal name NELEM_TUPLE4
read_flat_input 1544
Hit a nonterminal, returning at: NELEM_TUPLE8()::
BLines (lines remaining after reading input) = 73726
=============================================
Creating a generator 199
=============================================
ALines (lines before reading input) = 73726
read_input 1547
NONTERMINAL: NELEM_TUPLE8 notype
Adding NELEM_TUPLE8 to nonterminal dict
Nonterminal NELEM_TUPLE8()::
Nonterminal name NELEM_TUPLE8
read_flat_input 1547
Hit a nonterminal, returning at: NELEM_MEM128()::
BLines (lines remaining after reading input) = 73722
=============================================
Creating a generator 200
=============================================
ALines (lines before reading input) = 73722
read_input 1550
NONTERMINAL: NELEM_MEM128 notype
Adding NELEM_MEM128 to nonterminal dict
Nonterminal NELEM_MEM128()::
Nonterminal name NELEM_MEM128
read_flat_input 1550
Hit a nonterminal, returning at: NELEM_FULL()::
BLines (lines remaining after reading input) = 73719
=============================================
Creating a generator 201
=============================================
ALines (lines before reading input) = 73719
read_input 1552
NONTERMINAL: NELEM_FULL notype
Adding NELEM_FULL to nonterminal dict
Nonterminal NELEM_FULL()::
Nonterminal name NELEM_FULL
read_flat_input 1552
Hit a nonterminal, returning at: NELEM_HALF()::
BLines (lines remaining after reading input) = 73700
=============================================
Creating a generator 202
=============================================
ALines (lines before reading input) = 73700
read_input 1570
NONTERMINAL: NELEM_HALF notype
Adding NELEM_HALF to nonterminal dict
Nonterminal NELEM_HALF()::
Nonterminal name NELEM_HALF
read_flat_input 1570
Hit a nonterminal, returning at: FIX_ROUND_LEN512()::
BLines (lines remaining after reading input) = 73693
=============================================
Creating a generator 203
=============================================
ALines (lines before reading input) = 73693
read_input 1576
NONTERMINAL: FIX_ROUND_LEN512 notype
Adding FIX_ROUND_LEN512 to nonterminal dict
Nonterminal FIX_ROUND_LEN512()::
Nonterminal name FIX_ROUND_LEN512
read_flat_input 1576
Hit a nonterminal, returning at: FIX_ROUND_LEN128()::
BLines (lines remaining after reading input) = 73689
=============================================
Creating a generator 204
=============================================
ALines (lines before reading input) = 73689
read_input 1579
NONTERMINAL: FIX_ROUND_LEN128 notype
Adding FIX_ROUND_LEN128 to nonterminal dict
Nonterminal FIX_ROUND_LEN128()::
Nonterminal name FIX_ROUND_LEN128
read_flat_input 1579
Hit a nonterminal, returning at: UISA_VMODRM_ZMM()::
BLines (lines remaining after reading input) = 73685
=============================================
Creating a generator 205
=============================================
ALines (lines before reading input) = 73685
read_input 1582
NONTERMINAL: UISA_VMODRM_ZMM notype
Adding UISA_VMODRM_ZMM to nonterminal dict
Nonterminal UISA_VMODRM_ZMM()::
Nonterminal name UISA_VMODRM_ZMM
read_flat_input 1582
Hit a nonterminal, returning at: UISA_VMODRM_YMM()::
BLines (lines remaining after reading input) = 73681
=============================================
Creating a generator 206
=============================================
ALines (lines before reading input) = 73681
read_input 1585
NONTERMINAL: UISA_VMODRM_YMM notype
Adding UISA_VMODRM_YMM to nonterminal dict
Nonterminal UISA_VMODRM_YMM()::
Nonterminal name UISA_VMODRM_YMM
read_flat_input 1585
Hit a nonterminal, returning at: UISA_VMODRM_XMM()::
BLines (lines remaining after reading input) = 73677
=============================================
Creating a generator 207
=============================================
ALines (lines before reading input) = 73677
read_input 1588
NONTERMINAL: UISA_VMODRM_XMM notype
Adding UISA_VMODRM_XMM to nonterminal dict
Nonterminal UISA_VMODRM_XMM()::
Nonterminal name UISA_VMODRM_XMM
read_flat_input 1588
Hit a nonterminal, returning at: UISA_VSIB_ZMM()::
BLines (lines remaining after reading input) = 73673
=============================================
Creating a generator 208
=============================================
ALines (lines before reading input) = 73673
read_input 1591
NONTERMINAL: UISA_VSIB_ZMM notype
Adding UISA_VSIB_ZMM to nonterminal dict
Nonterminal UISA_VSIB_ZMM()::
Nonterminal name UISA_VSIB_ZMM
read_flat_input 1591
Hit a nonterminal, returning at: UISA_VSIB_YMM()::
BLines (lines remaining after reading input) = 73668
=============================================
Creating a generator 209
=============================================
ALines (lines before reading input) = 73668
read_input 1595
NONTERMINAL: UISA_VSIB_YMM notype
Adding UISA_VSIB_YMM to nonterminal dict
Nonterminal UISA_VSIB_YMM()::
Nonterminal name UISA_VSIB_YMM
read_flat_input 1595
Hit a nonterminal, returning at: UISA_VSIB_XMM()::
BLines (lines remaining after reading input) = 73663
=============================================
Creating a generator 210
=============================================
ALines (lines before reading input) = 73663
read_input 1599
NONTERMINAL: UISA_VSIB_XMM notype
Adding UISA_VSIB_XMM to nonterminal dict
Nonterminal UISA_VSIB_XMM()::
Nonterminal name UISA_VSIB_XMM
read_flat_input 1599
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
BLines (lines remaining after reading input) = 73658
=============================================
Creating a generator 211
=============================================
ALines (lines before reading input) = 73658
read_input 1603
NONTERMINAL: UISA_VSIB_INDEX_ZMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_ZMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
Nonterminal name UISA_VSIB_INDEX_ZMM
read_flat_input 1603
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 73625
=============================================
Creating a generator 212
=============================================
ALines (lines before reading input) = 73625
read_input 1635
NONTERMINAL: UISA_VSIB_INDEX_YMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
Nonterminal name UISA_VSIB_INDEX_YMM
read_flat_input 1635
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 73592
=============================================
Creating a generator 213
=============================================
ALines (lines before reading input) = 73592
read_input 1667
NONTERMINAL: UISA_VSIB_INDEX_XMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
Nonterminal name UISA_VSIB_INDEX_XMM
read_flat_input 1667
Hit a nonterminal, returning at: UISA_VSIB_BASE()::
BLines (lines remaining after reading input) = 73559
=============================================
Creating a generator 214
=============================================
ALines (lines before reading input) = 73559
read_input 1699
NONTERMINAL: UISA_VSIB_BASE notype
Adding UISA_VSIB_BASE to nonterminal dict
Nonterminal UISA_VSIB_BASE()::
Nonterminal name UISA_VSIB_BASE
read_flat_input 1699
Hit a nonterminal, returning at: xed_reg_enum_t MASK1()::
BLines (lines remaining after reading input) = 73540
=============================================
Creating a generator 215
=============================================
ALines (lines before reading input) = 73540
read_input 1717
NONTERMINAL: MASK1 type= xed_reg_enum_t
Adding MASK1 to nonterminal dict
Nonterminal xed_reg_enum_t MASK1()::
Nonterminal name MASK1
read_flat_input 1717
Hit a nonterminal, returning at: xed_reg_enum_t MASKNOT0()::
BLines (lines remaining after reading input) = 73531
=============================================
Creating a generator 216
=============================================
ALines (lines before reading input) = 73531
read_input 1725
NONTERMINAL: MASKNOT0 type= xed_reg_enum_t
Adding MASKNOT0 to nonterminal dict
Nonterminal xed_reg_enum_t MASKNOT0()::
Nonterminal name MASKNOT0
read_flat_input 1725
Hit a nonterminal, returning at: xed_reg_enum_t MASK_R()::
BLines (lines remaining after reading input) = 73522
=============================================
Creating a generator 217
=============================================
ALines (lines before reading input) = 73522
read_input 1733
NONTERMINAL: MASK_R type= xed_reg_enum_t
Adding MASK_R to nonterminal dict
Nonterminal xed_reg_enum_t MASK_R()::
Nonterminal name MASK_R
read_flat_input 1733
Hit a nonterminal, returning at: xed_reg_enum_t MASK_B()::
BLines (lines remaining after reading input) = 73513
=============================================
Creating a generator 218
=============================================
ALines (lines before reading input) = 73513
read_input 1741
NONTERMINAL: MASK_B type= xed_reg_enum_t
Adding MASK_B to nonterminal dict
Nonterminal xed_reg_enum_t MASK_B()::
Nonterminal name MASK_B
read_flat_input 1741
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N()::
BLines (lines remaining after reading input) = 73504
=============================================
Creating a generator 219
=============================================
ALines (lines before reading input) = 73504
read_input 1749
NONTERMINAL: MASK_N type= xed_reg_enum_t
Adding MASK_N to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N()::
Nonterminal name MASK_N
read_flat_input 1749
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N64()::
BLines (lines remaining after reading input) = 73500
=============================================
Creating a generator 220
=============================================
ALines (lines before reading input) = 73500
read_input 1752
NONTERMINAL: MASK_N64 type= xed_reg_enum_t
Adding MASK_N64 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N64()::
Nonterminal name MASK_N64
read_flat_input 1752
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N32()::
BLines (lines remaining after reading input) = 73491
=============================================
Creating a generator 221
=============================================
ALines (lines before reading input) = 73491
read_input 1760
NONTERMINAL: MASK_N32 type= xed_reg_enum_t
Adding MASK_N32 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N32()::
Nonterminal name MASK_N32
read_flat_input 1760
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3()::
BLines (lines remaining after reading input) = 73482
=============================================
Creating a generator 222
=============================================
ALines (lines before reading input) = 73482
read_input 1768
NONTERMINAL: XMM_R3 type= xed_reg_enum_t
Adding XMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3()::
Nonterminal name XMM_R3
read_flat_input 1768
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_32()::
BLines (lines remaining after reading input) = 73478
=============================================
Creating a generator 223
=============================================
ALines (lines before reading input) = 73478
read_input 1771
NONTERMINAL: XMM_R3_32 type= xed_reg_enum_t
Adding XMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_32()::
Nonterminal name XMM_R3_32
read_flat_input 1771
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_64()::
BLines (lines remaining after reading input) = 73469
=============================================
Creating a generator 224
=============================================
ALines (lines before reading input) = 73469
read_input 1779
NONTERMINAL: XMM_R3_64 type= xed_reg_enum_t
Adding XMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_64()::
Nonterminal name XMM_R3_64
read_flat_input 1779
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3()::
BLines (lines remaining after reading input) = 73436
=============================================
Creating a generator 225
=============================================
ALines (lines before reading input) = 73436
read_input 1811
NONTERMINAL: YMM_R3 type= xed_reg_enum_t
Adding YMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3()::
Nonterminal name YMM_R3
read_flat_input 1811
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_32()::
BLines (lines remaining after reading input) = 73432
=============================================
Creating a generator 226
=============================================
ALines (lines before reading input) = 73432
read_input 1814
NONTERMINAL: YMM_R3_32 type= xed_reg_enum_t
Adding YMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_32()::
Nonterminal name YMM_R3_32
read_flat_input 1814
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_64()::
BLines (lines remaining after reading input) = 73423
=============================================
Creating a generator 227
=============================================
ALines (lines before reading input) = 73423
read_input 1822
NONTERMINAL: YMM_R3_64 type= xed_reg_enum_t
Adding YMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_64()::
Nonterminal name YMM_R3_64
read_flat_input 1822
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3()::
BLines (lines remaining after reading input) = 73390
=============================================
Creating a generator 228
=============================================
ALines (lines before reading input) = 73390
read_input 1854
NONTERMINAL: ZMM_R3 type= xed_reg_enum_t
Adding ZMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3()::
Nonterminal name ZMM_R3
read_flat_input 1854
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_32()::
BLines (lines remaining after reading input) = 73386
=============================================
Creating a generator 229
=============================================
ALines (lines before reading input) = 73386
read_input 1857
NONTERMINAL: ZMM_R3_32 type= xed_reg_enum_t
Adding ZMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_32()::
Nonterminal name ZMM_R3_32
read_flat_input 1857
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_64()::
BLines (lines remaining after reading input) = 73377
=============================================
Creating a generator 230
=============================================
ALines (lines before reading input) = 73377
read_input 1865
NONTERMINAL: ZMM_R3_64 type= xed_reg_enum_t
Adding ZMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_64()::
Nonterminal name ZMM_R3_64
read_flat_input 1865
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3()::
BLines (lines remaining after reading input) = 73344
=============================================
Creating a generator 231
=============================================
ALines (lines before reading input) = 73344
read_input 1897
NONTERMINAL: XMM_B3 type= xed_reg_enum_t
Adding XMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3()::
Nonterminal name XMM_B3
read_flat_input 1897
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_32()::
BLines (lines remaining after reading input) = 73340
=============================================
Creating a generator 232
=============================================
ALines (lines before reading input) = 73340
read_input 1900
NONTERMINAL: XMM_B3_32 type= xed_reg_enum_t
Adding XMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_32()::
Nonterminal name XMM_B3_32
read_flat_input 1900
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_64()::
BLines (lines remaining after reading input) = 73331
=============================================
Creating a generator 233
=============================================
ALines (lines before reading input) = 73331
read_input 1908
NONTERMINAL: XMM_B3_64 type= xed_reg_enum_t
Adding XMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_64()::
Nonterminal name XMM_B3_64
read_flat_input 1908
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3()::
BLines (lines remaining after reading input) = 73298
=============================================
Creating a generator 234
=============================================
ALines (lines before reading input) = 73298
read_input 1940
NONTERMINAL: YMM_B3 type= xed_reg_enum_t
Adding YMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3()::
Nonterminal name YMM_B3
read_flat_input 1940
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_32()::
BLines (lines remaining after reading input) = 73294
=============================================
Creating a generator 235
=============================================
ALines (lines before reading input) = 73294
read_input 1943
NONTERMINAL: YMM_B3_32 type= xed_reg_enum_t
Adding YMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_32()::
Nonterminal name YMM_B3_32
read_flat_input 1943
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_64()::
BLines (lines remaining after reading input) = 73285
=============================================
Creating a generator 236
=============================================
ALines (lines before reading input) = 73285
read_input 1951
NONTERMINAL: YMM_B3_64 type= xed_reg_enum_t
Adding YMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_64()::
Nonterminal name YMM_B3_64
read_flat_input 1951
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3()::
BLines (lines remaining after reading input) = 73252
=============================================
Creating a generator 237
=============================================
ALines (lines before reading input) = 73252
read_input 1983
NONTERMINAL: ZMM_B3 type= xed_reg_enum_t
Adding ZMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3()::
Nonterminal name ZMM_B3
read_flat_input 1983
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_32()::
BLines (lines remaining after reading input) = 73248
=============================================
Creating a generator 238
=============================================
ALines (lines before reading input) = 73248
read_input 1986
NONTERMINAL: ZMM_B3_32 type= xed_reg_enum_t
Adding ZMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_32()::
Nonterminal name ZMM_B3_32
read_flat_input 1986
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_64()::
BLines (lines remaining after reading input) = 73239
=============================================
Creating a generator 239
=============================================
ALines (lines before reading input) = 73239
read_input 1994
NONTERMINAL: ZMM_B3_64 type= xed_reg_enum_t
Adding ZMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_64()::
Nonterminal name ZMM_B3_64
read_flat_input 1994
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3()::
BLines (lines remaining after reading input) = 73206
=============================================
Creating a generator 240
=============================================
ALines (lines before reading input) = 73206
read_input 2026
NONTERMINAL: XMM_N3 type= xed_reg_enum_t
Adding XMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3()::
Nonterminal name XMM_N3
read_flat_input 2026
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_32()::
BLines (lines remaining after reading input) = 73202
=============================================
Creating a generator 241
=============================================
ALines (lines before reading input) = 73202
read_input 2029
NONTERMINAL: XMM_N3_32 type= xed_reg_enum_t
Adding XMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_32()::
Nonterminal name XMM_N3_32
read_flat_input 2029
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_64()::
BLines (lines remaining after reading input) = 73193
=============================================
Creating a generator 242
=============================================
ALines (lines before reading input) = 73193
read_input 2037
NONTERMINAL: XMM_N3_64 type= xed_reg_enum_t
Adding XMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_64()::
Nonterminal name XMM_N3_64
read_flat_input 2037
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3()::
BLines (lines remaining after reading input) = 73160
=============================================
Creating a generator 243
=============================================
ALines (lines before reading input) = 73160
read_input 2069
NONTERMINAL: YMM_N3 type= xed_reg_enum_t
Adding YMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3()::
Nonterminal name YMM_N3
read_flat_input 2069
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_32()::
BLines (lines remaining after reading input) = 73156
=============================================
Creating a generator 244
=============================================
ALines (lines before reading input) = 73156
read_input 2072
NONTERMINAL: YMM_N3_32 type= xed_reg_enum_t
Adding YMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_32()::
Nonterminal name YMM_N3_32
read_flat_input 2072
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_64()::
BLines (lines remaining after reading input) = 73147
=============================================
Creating a generator 245
=============================================
ALines (lines before reading input) = 73147
read_input 2080
NONTERMINAL: YMM_N3_64 type= xed_reg_enum_t
Adding YMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_64()::
Nonterminal name YMM_N3_64
read_flat_input 2080
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3()::
BLines (lines remaining after reading input) = 73114
=============================================
Creating a generator 246
=============================================
ALines (lines before reading input) = 73114
read_input 2112
NONTERMINAL: ZMM_N3 type= xed_reg_enum_t
Adding ZMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3()::
Nonterminal name ZMM_N3
read_flat_input 2112
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_32()::
BLines (lines remaining after reading input) = 73110
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 73110
read_input 2115
NONTERMINAL: ZMM_N3_32 type= xed_reg_enum_t
Adding ZMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_32()::
Nonterminal name ZMM_N3_32
read_flat_input 2115
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_64()::
BLines (lines remaining after reading input) = 73101
=============================================
Creating a generator 248
=============================================
ALines (lines before reading input) = 73101
read_input 2123
NONTERMINAL: ZMM_N3_64 type= xed_reg_enum_t
Adding ZMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_64()::
Nonterminal name ZMM_N3_64
read_flat_input 2123
Hit a nonterminal, returning at: xed_reg_enum_t TMM_R()::
BLines (lines remaining after reading input) = 73068
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 73068
read_input 2155
NONTERMINAL: TMM_R type= xed_reg_enum_t
Adding TMM_R to nonterminal dict
Nonterminal xed_reg_enum_t TMM_R()::
Nonterminal name TMM_R
read_flat_input 2155
Hit a nonterminal, returning at: xed_reg_enum_t TMM_B()::
BLines (lines remaining after reading input) = 73059
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 73059
read_input 2163
NONTERMINAL: TMM_B type= xed_reg_enum_t
Adding TMM_B to nonterminal dict
Nonterminal xed_reg_enum_t TMM_B()::
Nonterminal name TMM_B
read_flat_input 2163
Hit a nonterminal, returning at: xed_reg_enum_t TMM_N()::
BLines (lines remaining after reading input) = 73050
=============================================
Creating a generator 251
=============================================
ALines (lines before reading input) = 73050
read_input 2171
NONTERMINAL: TMM_N type= xed_reg_enum_t
Adding TMM_N to nonterminal dict
Nonterminal xed_reg_enum_t TMM_N()::
Nonterminal name TMM_N
read_flat_input 2171
Hit a nonterminal, returning at: NELEM_HALF()::
BLines (lines remaining after reading input) = 73041
=============================================
Creating a generator 252
=============================================
ALines (lines before reading input) = 73041
read_input 2179
NONTERMINAL: NELEM_HALF notype
FOUND OLD PARSER FOR NELEM_HALF
Nonterminal NELEM_HALF()::
Nonterminal name NELEM_HALF
read_flat_input 2179
Hit a nonterminal, returning at: NELEM_QUARTER()::
BLines (lines remaining after reading input) = 73034
=============================================
Creating a generator 252
=============================================
ALines (lines before reading input) = 73034
read_input 2185
NONTERMINAL: NELEM_QUARTER notype
Adding NELEM_QUARTER to nonterminal dict
Nonterminal NELEM_QUARTER()::
Nonterminal name NELEM_QUARTER
read_flat_input 2185
Hit a nonterminal, returning at: INSTRUCTIONS()::
BLines (lines remaining after reading input) = 73027
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 73027
read_input 2191
NONTERMINAL: INSTRUCTIONS notype
Adding INSTRUCTIONS to nonterminal dict
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 58747 lines remaining.
BLines (lines remaining after reading input) = 58747
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 58747
read_input 4100
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 58553 lines remaining.
BLines (lines remaining after reading input) = 58553
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 58553
read_input 4120
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 58111 lines remaining.
BLines (lines remaining after reading input) = 58111
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 58111
read_input 4169
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 58086 lines remaining.
BLines (lines remaining after reading input) = 58086
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 58086
read_input 4171
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 57948 lines remaining.
BLines (lines remaining after reading input) = 57948
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 57948
read_input 4189
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 57900 lines remaining.
BLines (lines remaining after reading input) = 57900
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 57900
read_input 4196
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 57888 lines remaining.
BLines (lines remaining after reading input) = 57888
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 57888
read_input 4197
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 57847 lines remaining.
BLines (lines remaining after reading input) = 57847
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 57847
read_input 4201
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: XOP_INSTRUCTIONS()::
parser returning with 57825 lines remaining.
BLines (lines remaining after reading input) = 57825
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 57825
read_input 4204
NONTERMINAL: XOP_INSTRUCTIONS notype
Adding XOP_INSTRUCTIONS to nonterminal dict
Nonterminal XOP_INSTRUCTIONS()::
Nonterminal name XOP_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 56852 lines remaining.
BLines (lines remaining after reading input) = 56852
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 56852
read_input 4400
NONTERMINAL: AVX_INSTRUCTIONS notype
Adding AVX_INSTRUCTIONS to nonterminal dict
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 56435 lines remaining.
BLines (lines remaining after reading input) = 56435
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 56435
read_input 4528
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 56386 lines remaining.
BLines (lines remaining after reading input) = 56386
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 56386
read_input 4544
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1A
REGISTERING UDELETE NOP0F1B
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 56221 lines remaining.
BLines (lines remaining after reading input) = 56221
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 56221
read_input 4577
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1E
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 56134 lines remaining.
BLines (lines remaining after reading input) = 56134
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 56134
read_input 4597
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55979 lines remaining.
BLines (lines remaining after reading input) = 55979
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55979
read_input 4611
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55968 lines remaining.
BLines (lines remaining after reading input) = 55968
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55968
read_input 4612
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55792 lines remaining.
BLines (lines remaining after reading input) = 55792
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55792
read_input 4626
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55771 lines remaining.
BLines (lines remaining after reading input) = 55771
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55771
read_input 4628
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55730 lines remaining.
BLines (lines remaining after reading input) = 55730
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55730
read_input 4632
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55709 lines remaining.
BLines (lines remaining after reading input) = 55709
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55709
read_input 4634
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55698 lines remaining.
BLines (lines remaining after reading input) = 55698
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55698
read_input 4635
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55687 lines remaining.
BLines (lines remaining after reading input) = 55687
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55687
read_input 4636
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55652 lines remaining.
BLines (lines remaining after reading input) = 55652
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55652
read_input 4640
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55633 lines remaining.
BLines (lines remaining after reading input) = 55633
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55633
read_input 4642
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55612 lines remaining.
BLines (lines remaining after reading input) = 55612
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55612
read_input 4644
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55589 lines remaining.
BLines (lines remaining after reading input) = 55589
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55589
read_input 4646
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55577 lines remaining.
BLines (lines remaining after reading input) = 55577
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55577
read_input 4648
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55539 lines remaining.
BLines (lines remaining after reading input) = 55539
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55539
read_input 4652
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55501 lines remaining.
BLines (lines remaining after reading input) = 55501
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55501
read_input 4655
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1C
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55436 lines remaining.
BLines (lines remaining after reading input) = 55436
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55436
read_input 4667
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 55424 lines remaining.
BLines (lines remaining after reading input) = 55424
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55424
read_input 4668
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 55412 lines remaining.
BLines (lines remaining after reading input) = 55412
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 55412
read_input 4669
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 51974 lines remaining.
BLines (lines remaining after reading input) = 51974
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 51974
read_input 5392
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 51943 lines remaining.
BLines (lines remaining after reading input) = 51943
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 51943
read_input 5395
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 51876 lines remaining.
BLines (lines remaining after reading input) = 51876
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 51876
read_input 5407
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 51864 lines remaining.
BLines (lines remaining after reading input) = 51864
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 51864
read_input 5409
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 51829 lines remaining.
BLines (lines remaining after reading input) = 51829
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 51829
read_input 5417
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 50964 lines remaining.
BLines (lines remaining after reading input) = 50964
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 50964
read_input 5609
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 50843 lines remaining.
BLines (lines remaining after reading input) = 50843
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 50843
read_input 5625
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 49363 lines remaining.
BLines (lines remaining after reading input) = 49363
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 49363
read_input 5890
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 49287 lines remaining.
BLines (lines remaining after reading input) = 49287
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 49287
read_input 5910
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 49276 lines remaining.
BLines (lines remaining after reading input) = 49276
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 49276
read_input 5911
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49035 lines remaining.
BLines (lines remaining after reading input) = 49035
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 49035
read_input 5989
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49005 lines remaining.
BLines (lines remaining after reading input) = 49005
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 49005
read_input 5995
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48994 lines remaining.
BLines (lines remaining after reading input) = 48994
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 48994
read_input 5996
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48980 lines remaining.
BLines (lines remaining after reading input) = 48980
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 48980
read_input 5998
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48948 lines remaining.
BLines (lines remaining after reading input) = 48948
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 48948
read_input 6004
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48910 lines remaining.
BLines (lines remaining after reading input) = 48910
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 48910
read_input 6008
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48877 lines remaining.
BLines (lines remaining after reading input) = 48877
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 48877
read_input 6016
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48856 lines remaining.
BLines (lines remaining after reading input) = 48856
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 48856
read_input 6018
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 48845 lines remaining.
BLines (lines remaining after reading input) = 48845
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 48845
read_input 6019
NONTERMINAL: EVEX_INSTRUCTIONS notype
Adding EVEX_INSTRUCTIONS to nonterminal dict
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 48532 lines remaining.
BLines (lines remaining after reading input) = 48532
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 48532
read_input 6043
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 48297 lines remaining.
BLines (lines remaining after reading input) = 48297
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 48297
read_input 6061
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE PREFETCH_RESERVED_0F0Dr2
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 48295 lines remaining.
BLines (lines remaining after reading input) = 48295
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 48295
read_input 6061
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47696 lines remaining.
BLines (lines remaining after reading input) = 47696
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 47696
read_input 6107
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 47683 lines remaining.
BLines (lines remaining after reading input) = 47683
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 47683
read_input 6108
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 47630 lines remaining.
BLines (lines remaining after reading input) = 47630
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 47630
read_input 6112
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 47603 lines remaining.
BLines (lines remaining after reading input) = 47603
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 47603
read_input 6114
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 47550 lines remaining.
BLines (lines remaining after reading input) = 47550
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 47550
read_input 6118
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 35951 lines remaining.
BLines (lines remaining after reading input) = 35951
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 35951
read_input 7041
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 35754 lines remaining.
BLines (lines remaining after reading input) = 35754
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 35754
read_input 7056
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 35625 lines remaining.
BLines (lines remaining after reading input) = 35625
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 35625
read_input 7066
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 12253 lines remaining.
BLines (lines remaining after reading input) = 12253
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 12253
read_input 8872
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 11561 lines remaining.
BLines (lines remaining after reading input) = 11561
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 11561
read_input 8926
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 11404 lines remaining.
BLines (lines remaining after reading input) = 11404
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 11404
read_input 8938
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 11091 lines remaining.
BLines (lines remaining after reading input) = 11091
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 11091
read_input 8962
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 11067 lines remaining.
BLines (lines remaining after reading input) = 11067
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 11067
read_input 8965
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 11051 lines remaining.
BLines (lines remaining after reading input) = 11051
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 11051
read_input 8967
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 10816 lines remaining.
BLines (lines remaining after reading input) = 10816
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 10816
read_input 8985
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 9567 lines remaining.
BLines (lines remaining after reading input) = 9567
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 9567
read_input 9081
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 9491 lines remaining.
BLines (lines remaining after reading input) = 9491
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 9491
read_input 9087
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 9256 lines remaining.
BLines (lines remaining after reading input) = 9256
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 9256
read_input 9105
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 9111 lines remaining.
BLines (lines remaining after reading input) = 9111
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 9111
read_input 9117
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 8735 lines remaining.
BLines (lines remaining after reading input) = 8735
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 8735
read_input 9147
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 8614 lines remaining.
BLines (lines remaining after reading input) = 8614
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 8614
read_input 9157
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 8509 lines remaining.
BLines (lines remaining after reading input) = 8509
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 8509
read_input 9165
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 8352 lines remaining.
BLines (lines remaining after reading input) = 8352
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 8352
read_input 9177
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 8219 lines remaining.
BLines (lines remaining after reading input) = 8219
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 8219
read_input 9188
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 8207 lines remaining.
BLines (lines remaining after reading input) = 8207
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 8207
read_input 9189
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 8014 lines remaining.
BLines (lines remaining after reading input) = 8014
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 8014
read_input 9205
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 7956 lines remaining.
BLines (lines remaining after reading input) = 7956
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 7956
read_input 9210
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 7799 lines remaining.
BLines (lines remaining after reading input) = 7799
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 7799
read_input 9222
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 7774 lines remaining.
BLines (lines remaining after reading input) = 7774
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 7774
read_input 9224
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 7751 lines remaining.
BLines (lines remaining after reading input) = 7751
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 7751
read_input 9226
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 7739 lines remaining.
BLines (lines remaining after reading input) = 7739
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 7739
read_input 9227
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 7675 lines remaining.
BLines (lines remaining after reading input) = 7675
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 7675
read_input 9232
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
parser returning with 0 lines remaining.
BLines (lines remaining after reading input) = 0
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1E
DROPPING UNAME NOP0F1E
DROPPING UNAME PREFETCH_RESERVED_0F0Dr2
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
Length error: some instructions done and some are not done simultaneously
ilist len = 20


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=4581  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

	NOP inum=4582  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

	NOP inum=4583  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4584  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

	NOP inum=4585  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4586  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3

	NOP inum=4587  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4588  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4589  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4590  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4591  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4592  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4593  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4594  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=4595  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4596  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	ENDBR32 inum=4598  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4599  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	RDSSPD inum=4602  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=4603  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 21
back_split_graph: based on 21
BACKSPLIT  fake bitpos: 21 real bitpos: 20


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4581  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=4582  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=4584  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

   NOP inum=4586  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 20
NEED TO BACKSPLIT AT POSITION 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4581  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=4584  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4582  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=4586  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 16


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=4583  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4585  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4587  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4588  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4589  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4590  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4591  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4592  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4593  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4594  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=4595  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4596  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	ENDBR32 inum=4598  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4599  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	RDSSPD inum=4602  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=4603  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=4585  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4595  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4596  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	RDSSPD inum=4602  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=4603  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 11


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4583  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4587  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4588  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4589  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4590  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4591  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4592  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4593  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4594  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4598  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4599  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 10


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4587  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4588  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4589  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4590  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4591  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4592  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4593  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4594  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4598  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4599  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 24
back_split_graph: based on 24
BACKSPLIT  fake bitpos: 24 real bitpos: 23

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4587  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4589  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4591  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4593  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=4599  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4587  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

   NOP inum=4589  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4591  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4593  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=4599  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4588  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4590  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4592  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4594  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4598  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4588  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

   NOP inum=4590  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4592  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4594  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4598  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

FUNKY SPOT: bitpos 36
Others: 
MOVDIRI inum=4650  iform_input=MOVDIRI_MEMu32_GPR32u32  isa_set=MOVDIR pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    REXW=0

MOVDIRI inum=4651  iform_input=MOVDIRI_MEMu64_GPR64u64  isa_set=MOVDIR pattern len=38
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    MODE=2 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING MOVDIRI inum 4650 -- already fine
	REARRANGE needs to juggle: MOVDIRI inum 4651
	REARRANGE one pattern worked for MOVDIRI inum 4651
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 36
FUNKY SPOT: bitpos 11
Others: 
LLWPCB inum=4394  isa_set=LWP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=9 1 1    MOD=3 0 0 0    n n n

SLWPCB inum=4395  isa_set=LWP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=9 1 1    MOD=3 0 0 1    n n n

LWPINS inum=4396  isa_set=LWP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 0 n n    n MODRM() UIMM32()

LWPINS inum=4397  isa_set=LWP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 0 n n    n UIMM32()

LWPVAL inum=4398  isa_set=LWP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 1 n n    n MODRM() UIMM32()

LWPVAL inum=4399  isa_set=LWP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 1 n n    n UIMM32()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEXDEST3
	SKIPPING LLWPCB inum 4394 -- already fine
	SKIPPING SLWPCB inum 4395 -- already fine
	REARRANGE needs to juggle: LWPINS inum 4396
	REARRANGE FAILED for VEXDEST3. Trying again...
REARRANGE ATTEMPT  using VEXDEST210
	REARRANGE needs to juggle: LLWPCB inum 4394
	REARRANGE one pattern worked for LLWPCB inum 4394
	REARRANGE needs to juggle: SLWPCB inum 4395
	REARRANGE one pattern worked for SLWPCB inum 4395
	REARRANGE needs to juggle: LWPINS inum 4396
	REARRANGE FAILED for VEXDEST210. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: LLWPCB inum 4394
	REARRANGE one pattern worked for LLWPCB inum 4394
	REARRANGE needs to juggle: SLWPCB inum 4395
	REARRANGE one pattern worked for SLWPCB inum 4395
	SKIPPING LWPINS inum 4396 -- already fine
	SKIPPING LWPINS inum 4397 -- already fine
	SKIPPING LWPVAL inum 4398 -- already fine
	SKIPPING LWPVAL inum 4399 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VPSHUFB inum=5747  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSHUFB inum=5748  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPERMQ inum=5858  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMQ inum=5859  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSHUFB inum 5747 -- already fine
	SKIPPING VPSHUFB inum 5748 -- already fine
	REARRANGE needs to juggle: VPERMQ inum 5858
	REARRANGE one pattern worked for VPERMQ inum 5858
	REARRANGE needs to juggle: VPERMQ inum 5859
	REARRANGE one pattern worked for VPERMQ inum 5859
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 10
Others: 
VPHADDW inum=5691  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPHADDW inum=5692  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPERMPD inum=5860  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMPD inum=5861  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPHADDW inum 5691 -- already fine
	SKIPPING VPHADDW inum 5692 -- already fine
	REARRANGE needs to juggle: VPERMPD inum 5860
	REARRANGE one pattern worked for VPERMPD inum 5860
	REARRANGE needs to juggle: VPERMPD inum 5861
	REARRANGE one pattern worked for VPERMPD inum 5861
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSIGND inum=5089  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5090  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=5753  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5754  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSS inum=5141  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=5142  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSIGND inum 5089 -- already fine
	SKIPPING VPSIGND inum 5090 -- already fine
	SKIPPING VPSIGND inum 5753 -- already fine
	SKIPPING VPSIGND inum 5754 -- already fine
	REARRANGE needs to juggle: VROUNDSS inum 5141
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPSIGND inum 5089
	REARRANGE one pattern worked for VPSIGND inum 5089
	REARRANGE needs to juggle: VPSIGND inum 5090
	REARRANGE one pattern worked for VPSIGND inum 5090
	REARRANGE needs to juggle: VPSIGND inum 5753
	REARRANGE one pattern worked for VPSIGND inum 5753
	REARRANGE needs to juggle: VPSIGND inum 5754
	REARRANGE one pattern worked for VPSIGND inum 5754
	SKIPPING VROUNDSS inum 5141 -- already fine
	SKIPPING VROUNDSS inum 5142 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSIGND inum=5089  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5090  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=5753  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5754  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSS inum=5141  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=5142  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSIGND inum 5089 -- already fine
	SKIPPING VPSIGND inum 5090 -- already fine
	SKIPPING VPSIGND inum 5753 -- already fine
	SKIPPING VPSIGND inum 5754 -- already fine
	REARRANGE needs to juggle: VROUNDSS inum 5141
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPSIGND inum 5089
	REARRANGE one pattern worked for VPSIGND inum 5089
	REARRANGE needs to juggle: VPSIGND inum 5090
	REARRANGE one pattern worked for VPSIGND inum 5090
	REARRANGE needs to juggle: VPSIGND inum 5753
	REARRANGE one pattern worked for VPSIGND inum 5753
	REARRANGE needs to juggle: VPSIGND inum 5754
	REARRANGE one pattern worked for VPSIGND inum 5754
	SKIPPING VROUNDSS inum 5141 -- already fine
	SKIPPING VROUNDSS inum 5142 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMULHRSW inum=5069  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5070  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=5733  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5734  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSD inum=5139  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=5140  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHRSW inum 5069 -- already fine
	SKIPPING VPMULHRSW inum 5070 -- already fine
	SKIPPING VPMULHRSW inum 5733 -- already fine
	SKIPPING VPMULHRSW inum 5734 -- already fine
	REARRANGE needs to juggle: VROUNDSD inum 5139
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPMULHRSW inum 5069
	REARRANGE one pattern worked for VPMULHRSW inum 5069
	REARRANGE needs to juggle: VPMULHRSW inum 5070
	REARRANGE one pattern worked for VPMULHRSW inum 5070
	REARRANGE needs to juggle: VPMULHRSW inum 5733
	REARRANGE one pattern worked for VPMULHRSW inum 5733
	REARRANGE needs to juggle: VPMULHRSW inum 5734
	REARRANGE one pattern worked for VPMULHRSW inum 5734
	SKIPPING VROUNDSD inum 5139 -- already fine
	SKIPPING VROUNDSD inum 5140 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPMULHRSW inum=5069  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5070  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=5733  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5734  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSD inum=5139  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=5140  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHRSW inum 5069 -- already fine
	SKIPPING VPMULHRSW inum 5070 -- already fine
	SKIPPING VPMULHRSW inum 5733 -- already fine
	SKIPPING VPMULHRSW inum 5734 -- already fine
	REARRANGE needs to juggle: VROUNDSD inum 5139
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPMULHRSW inum 5069
	REARRANGE one pattern worked for VPMULHRSW inum 5069
	REARRANGE needs to juggle: VPMULHRSW inum 5070
	REARRANGE one pattern worked for VPMULHRSW inum 5070
	REARRANGE needs to juggle: VPMULHRSW inum 5733
	REARRANGE one pattern worked for VPMULHRSW inum 5733
	REARRANGE needs to juggle: VPMULHRSW inum 5734
	REARRANGE one pattern worked for VPMULHRSW inum 5734
	SKIPPING VROUNDSD inum 5139 -- already fine
	SKIPPING VROUNDSD inum 5140 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VBROADCASTSS inum=4859  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=0 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=4860  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=5886  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VBROADCASTSS inum=5887  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VINSERTF128 inum=4863  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VINSERTF128 inum=4864  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 1 1 MOD=3    r r r n    n n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VBROADCASTSS inum 4859 -- already fine
	SKIPPING VBROADCASTSS inum 4860 -- already fine
	REARRANGE needs to juggle: VBROADCASTSS inum 5886
	REARRANGE one pattern worked for VBROADCASTSS inum 5886
	REARRANGE needs to juggle: VBROADCASTSS inum 5887
	REARRANGE one pattern worked for VBROADCASTSS inum 5887
	SKIPPING VINSERTF128 inum 4863 -- already fine
	SKIPPING VINSERTF128 inum 4864 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VEXTRACTF128 inum=4813  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VEXTRACTF128 inum=4814  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

VBROADCASTSD inum=4861  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSD inum=5888  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VEXTRACTF128 inum 4813 -- already fine
	SKIPPING VEXTRACTF128 inum 4814 -- already fine
	SKIPPING VBROADCASTSD inum 4861 -- already fine
	REARRANGE needs to juggle: VBROADCASTSD inum 5888
	REARRANGE one pattern worked for VBROADCASTSD inum 5888
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPABSB inum=4981  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=4982  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=5625  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5626  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSB inum 4981 -- already fine
	SKIPPING VPABSB inum 4982 -- already fine
	REARRANGE needs to juggle: VPABSB inum 5625
	REARRANGE one pattern worked for VPABSB inum 5625
	REARRANGE needs to juggle: VPABSB inum 5626
	REARRANGE one pattern worked for VPABSB inum 5626
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSB inum=4981  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=4982  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=5625  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5626  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSB inum 4981 -- already fine
	SKIPPING VPABSB inum 4982 -- already fine
	REARRANGE needs to juggle: VPABSB inum 5625
	REARRANGE one pattern worked for VPABSB inum 5625
	REARRANGE needs to juggle: VPABSB inum 5626
	REARRANGE one pattern worked for VPABSB inum 5626
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSW inum=4983  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=4984  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=5627  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5628  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=5413  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5414  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=5415  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5416  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSW inum 4983 -- already fine
	SKIPPING VPABSW inum 4984 -- already fine
	REARRANGE needs to juggle: VPABSW inum 5627
	REARRANGE one pattern worked for VPABSW inum 5627
	REARRANGE needs to juggle: VPABSW inum 5628
	REARRANGE one pattern worked for VPABSW inum 5628
	REARRANGE needs to juggle: VCVTPS2PH inum 5413
	REARRANGE one pattern worked for VCVTPS2PH inum 5413
	REARRANGE needs to juggle: VCVTPS2PH inum 5414
	REARRANGE one pattern worked for VCVTPS2PH inum 5414
	REARRANGE needs to juggle: VCVTPS2PH inum 5415
	REARRANGE one pattern worked for VCVTPS2PH inum 5415
	REARRANGE needs to juggle: VCVTPS2PH inum 5416
	REARRANGE one pattern worked for VCVTPS2PH inum 5416
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSW inum=4983  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=4984  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=5627  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5628  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=5413  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5414  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=5415  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5416  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSW inum 4983 -- already fine
	SKIPPING VPABSW inum 4984 -- already fine
	REARRANGE needs to juggle: VPABSW inum 5627
	REARRANGE one pattern worked for VPABSW inum 5627
	REARRANGE needs to juggle: VPABSW inum 5628
	REARRANGE one pattern worked for VPABSW inum 5628
	REARRANGE needs to juggle: VCVTPS2PH inum 5413
	REARRANGE one pattern worked for VCVTPS2PH inum 5413
	REARRANGE needs to juggle: VCVTPS2PH inum 5414
	REARRANGE one pattern worked for VCVTPS2PH inum 5414
	REARRANGE needs to juggle: VCVTPS2PH inum 5415
	REARRANGE one pattern worked for VCVTPS2PH inum 5415
	REARRANGE needs to juggle: VCVTPS2PH inum 5416
	REARRANGE one pattern worked for VCVTPS2PH inum 5416
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSD inum=4985  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=4986  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=5629  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5630  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSD inum 4985 -- already fine
	SKIPPING VPABSD inum 4986 -- already fine
	REARRANGE needs to juggle: VPABSD inum 5629
	REARRANGE one pattern worked for VPABSD inum 5629
	REARRANGE needs to juggle: VPABSD inum 5630
	REARRANGE one pattern worked for VPABSD inum 5630
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSD inum=4985  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=4986  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=5629  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5630  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSD inum 4985 -- already fine
	SKIPPING VPABSD inum 4986 -- already fine
	REARRANGE needs to juggle: VPABSD inum 5629
	REARRANGE one pattern worked for VPABSD inum 5629
	REARRANGE needs to juggle: VPABSD inum 5630
	REARRANGE one pattern worked for VPABSD inum 5630
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMOVZXBW inum=5322  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=5323  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBW inum=5832  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=5833  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRW inum=7052  iform_input=KSHIFTRW_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRB inum=8911  iform_input=KSHIFTRB_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMOVZXBW inum 5322 -- already fine
	SKIPPING VPMOVZXBW inum 5323 -- already fine
	SKIPPING VPMOVZXBW inum 5832 -- already fine
	SKIPPING VPMOVZXBW inum 5833 -- already fine
	REARRANGE needs to juggle: KSHIFTRW inum 7052
	REARRANGE one pattern worked for KSHIFTRW inum 7052
	REARRANGE needs to juggle: KSHIFTRB inum 8911
	REARRANGE one pattern worked for KSHIFTRB inum 8911
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMOVZXBD inum=5324  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5325  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBD inum=5834  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5835  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRD inum=8912  iform_input=KSHIFTRD_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRQ inum=8913  iform_input=KSHIFTRQ_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMOVZXBD inum 5324 -- already fine
	SKIPPING VPMOVZXBD inum 5325 -- already fine
	SKIPPING VPMOVZXBD inum 5834 -- already fine
	SKIPPING VPMOVZXBD inum 5835 -- already fine
	REARRANGE needs to juggle: KSHIFTRD inum 8912
	REARRANGE one pattern worked for KSHIFTRD inum 8912
	REARRANGE needs to juggle: KSHIFTRQ inum 8913
	REARRANGE one pattern worked for KSHIFTRQ inum 8913
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VDPPD inum=4815  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VDPPD inum=4816  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VPHMINPOSUW inum=4987  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPHMINPOSUW inum=4988  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

KANDW inum=7042  iform_input=KANDW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDB inum=8876  iform_input=KANDB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDD inum=8877  iform_input=KANDD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDQ inum=8881  iform_input=KANDQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VDPPD inum 4815 -- already fine
	SKIPPING VDPPD inum 4816 -- already fine
	REARRANGE needs to juggle: VPHMINPOSUW inum 4987
	REARRANGE one pattern worked for VPHMINPOSUW inum 4987
	REARRANGE needs to juggle: VPHMINPOSUW inum 4988
	REARRANGE one pattern worked for VPHMINPOSUW inum 4988
	REARRANGE needs to juggle: KANDW inum 7042
	REARRANGE one pattern worked for KANDW inum 7042
	REARRANGE needs to juggle: KANDB inum 8876
	REARRANGE one pattern worked for KANDB inum 8876
	REARRANGE needs to juggle: KANDD inum 8877
	REARRANGE one pattern worked for KANDD inum 8877
	REARRANGE needs to juggle: KANDQ inum 8881
	REARRANGE one pattern worked for KANDQ inum 8881
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMPSADBW inum=5243  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5244  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VMPSADBW inum=5791  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5792  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

KANDNW inum=7041  iform_input=KANDNW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDNB inum=8878  iform_input=KANDNB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDND inum=8879  iform_input=KANDND_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDNQ inum=8880  iform_input=KANDNQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMPSADBW inum 5243 -- already fine
	SKIPPING VMPSADBW inum 5244 -- already fine
	SKIPPING VMPSADBW inum 5791 -- already fine
	SKIPPING VMPSADBW inum 5792 -- already fine
	REARRANGE needs to juggle: KANDNW inum 7041
	REARRANGE one pattern worked for KANDNW inum 7041
	REARRANGE needs to juggle: KANDNB inum 8878
	REARRANGE one pattern worked for KANDNB inum 8878
	REARRANGE needs to juggle: KANDND inum 8879
	REARRANGE one pattern worked for KANDND inum 8879
	REARRANGE needs to juggle: KANDNQ inum 8880
	REARRANGE one pattern worked for KANDNQ inum 8880
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSRLVD inum=5898  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5899  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVD inum=5900  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5901  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5902  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5903  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5904  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5905  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KORW inum=7050  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORB inum=8902  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORD inum=8903  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KORQ inum=8904  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSRLVD inum 5898 -- already fine
	SKIPPING VPSRLVD inum 5899 -- already fine
	SKIPPING VPSRLVD inum 5900 -- already fine
	SKIPPING VPSRLVD inum 5901 -- already fine
	SKIPPING VPSRLVQ inum 5902 -- already fine
	SKIPPING VPSRLVQ inum 5903 -- already fine
	SKIPPING VPSRLVQ inum 5904 -- already fine
	SKIPPING VPSRLVQ inum 5905 -- already fine
	REARRANGE needs to juggle: KORW inum 7050
	REARRANGE one pattern worked for KORW inum 7050
	REARRANGE needs to juggle: KORB inum 8902
	REARRANGE one pattern worked for KORB inum 8902
	REARRANGE needs to juggle: KORD inum 8903
	REARRANGE one pattern worked for KORD inum 8903
	REARRANGE needs to juggle: KORQ inum 8904
	REARRANGE one pattern worked for KORQ inum 8904
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSRLVD inum=5900  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5901  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5904  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5905  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KORW inum=7050  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KORB inum=8902  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KORD inum=8903  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KORQ inum=8904  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPSRLVD inum 5900 -- already fine
	SKIPPING VPSRLVD inum 5901 -- already fine
	SKIPPING VPSRLVQ inum 5904 -- already fine
	SKIPPING VPSRLVQ inum 5905 -- already fine
	REARRANGE needs to juggle: KORW inum 7050
	REARRANGE one pattern worked for KORW inum 7050
	REARRANGE needs to juggle: KORB inum 8902
	REARRANGE one pattern worked for KORB inum 8902
	REARRANGE needs to juggle: KORD inum 8903
	REARRANGE one pattern worked for KORD inum 8903
	REARRANGE needs to juggle: KORQ inum 8904
	REARRANGE one pattern worked for KORQ inum 8904
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPERM2I128 inum=5856  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=5857  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

VPSRAVD inum=5906  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPSRAVD inum=5907  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPSRAVD inum=5908  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

VPSRAVD inum=5909  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORW inum=7054  iform_input=KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORB inum=8920  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORD inum=8921  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXNORQ inum=8922  iform_input=KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPERM2I128 inum 5856 -- already fine
	SKIPPING VPERM2I128 inum 5857 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 5906
	REARRANGE one pattern worked for VPSRAVD inum 5906
	REARRANGE needs to juggle: VPSRAVD inum 5907
	REARRANGE one pattern worked for VPSRAVD inum 5907
	REARRANGE needs to juggle: VPSRAVD inum 5908
	REARRANGE one pattern worked for VPSRAVD inum 5908
	REARRANGE needs to juggle: VPSRAVD inum 5909
	REARRANGE one pattern worked for VPSRAVD inum 5909
	REARRANGE needs to juggle: KXNORW inum 7054
	REARRANGE one pattern worked for KXNORW inum 7054
	REARRANGE needs to juggle: KXNORB inum 8920
	REARRANGE one pattern worked for KXNORB inum 8920
	REARRANGE needs to juggle: KXNORD inum 8921
	REARRANGE one pattern worked for KXNORD inum 8921
	REARRANGE needs to juggle: KXNORQ inum 8922
	REARRANGE one pattern worked for KXNORQ inum 8922
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPERM2I128 inum=5856  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=5857  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

VPSRAVD inum=5908  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    m m MOD!=3 r    r r n n    n MODRM() REXW=0

VPSRAVD inum=5909  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORW inum=7054  iform_input=KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORB inum=8920  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORD inum=8921  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KXNORQ inum=8922  iform_input=KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPERM2I128 inum 5856 -- already fine
	SKIPPING VPERM2I128 inum 5857 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 5908
	REARRANGE one pattern worked for VPSRAVD inum 5908
	REARRANGE needs to juggle: VPSRAVD inum 5909
	REARRANGE one pattern worked for VPSRAVD inum 5909
	SKIPPING KXNORW inum 7054 -- already fine
	SKIPPING KXNORB inum 8920 -- already fine
	SKIPPING KXNORD inum 8921 -- already fine
	SKIPPING KXNORQ inum 8922 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSLLVD inum=5890  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5891  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVD inum=5892  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5893  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5894  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5895  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5896  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5897  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KXORW inum=7055  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORB inum=8923  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORD inum=8924  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXORQ inum=8925  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLVD inum 5890 -- already fine
	SKIPPING VPSLLVD inum 5891 -- already fine
	SKIPPING VPSLLVD inum 5892 -- already fine
	SKIPPING VPSLLVD inum 5893 -- already fine
	SKIPPING VPSLLVQ inum 5894 -- already fine
	SKIPPING VPSLLVQ inum 5895 -- already fine
	SKIPPING VPSLLVQ inum 5896 -- already fine
	SKIPPING VPSLLVQ inum 5897 -- already fine
	REARRANGE needs to juggle: KXORW inum 7055
	REARRANGE one pattern worked for KXORW inum 7055
	REARRANGE needs to juggle: KXORB inum 8923
	REARRANGE one pattern worked for KXORB inum 8923
	REARRANGE needs to juggle: KXORD inum 8924
	REARRANGE one pattern worked for KXORD inum 8924
	REARRANGE needs to juggle: KXORQ inum 8925
	REARRANGE one pattern worked for KXORQ inum 8925
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLVD inum=5892  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5893  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5896  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5897  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KXORW inum=7055  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXORB inum=8923  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXORD inum=8924  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KXORQ inum=8925  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPSLLVD inum 5892 -- already fine
	SKIPPING VPSLLVD inum 5893 -- already fine
	SKIPPING VPSLLVQ inum 5896 -- already fine
	SKIPPING VPSLLVQ inum 5897 -- already fine
	REARRANGE needs to juggle: KXORW inum 7055
	REARRANGE one pattern worked for KXORW inum 7055
	REARRANGE needs to juggle: KXORB inum 8923
	REARRANGE one pattern worked for KXORB inum 8923
	REARRANGE needs to juggle: KXORD inum 8924
	REARRANGE one pattern worked for KXORD inum 8924
	REARRANGE needs to juggle: KXORQ inum 8925
	REARRANGE one pattern worked for KXORQ inum 8925
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPERMIL2PD inum=4536  isa_set=XOP pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VPERMIL2PD inum=4537  isa_set=XOP pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n SE_IMM8()

VPERMIL2PD inum=4538  isa_set=XOP pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VPERMIL2PD inum=4539  isa_set=XOP pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n SE_IMM8()

VPERMIL2PD inum=4540  isa_set=XOP pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    REXW=1 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VPERMIL2PD inum=4541  isa_set=XOP pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    REXW=1 1 1 MOD=3    r r r n    n n SE_IMM8()

VPERMIL2PD inum=4542  isa_set=XOP pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=3    REXW=1 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VPERMIL2PD inum=4543  isa_set=XOP pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=3    REXW=1 1 1 MOD=3    r r r n    n n SE_IMM8()

LDTILECFG inum=9210  iform_input=LDTILECFG_MEM  isa_set=AMX_TILE pattern len=26
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VEX_PREFIX=0 MAP=2 m    m MOD!=3 0 0    0 n n n    MODRM() VL=0 REXW=0 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111

STTILECFG inum=9211  iform_input=STTILECFG_MEM  isa_set=AMX_TILE pattern len=26
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 0 0    0 n n n    MODRM() VL=0 REXW=0 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111

TILERELEASE inum=9219  iform_input=TILERELEASE  isa_set=AMX_TILE pattern len=25
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VEX_PREFIX=0 MAP=2 1    1 MOD=3 0 0    0 0 0 0    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

TILEZERO inum=9221  iform_input=TILEZERO_TMMu32  isa_set=AMX_TILE pattern len=25
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r 0 0 0    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPERMIL2PD inum 4536 -- already fine
	SKIPPING VPERMIL2PD inum 4537 -- already fine
	SKIPPING VPERMIL2PD inum 4538 -- already fine
	SKIPPING VPERMIL2PD inum 4539 -- already fine
	SKIPPING VPERMIL2PD inum 4540 -- already fine
	SKIPPING VPERMIL2PD inum 4541 -- already fine
	SKIPPING VPERMIL2PD inum 4542 -- already fine
	SKIPPING VPERMIL2PD inum 4543 -- already fine
	REARRANGE needs to juggle: LDTILECFG inum 9210
	REARRANGE one pattern worked for LDTILECFG inum 9210
	REARRANGE needs to juggle: STTILECFG inum 9211
	REARRANGE one pattern worked for STTILECFG inum 9211
	REARRANGE needs to juggle: TILERELEASE inum 9219
	REARRANGE one pattern worked for TILERELEASE inum 9219
	REARRANGE needs to juggle: TILEZERO inum 9221
	REARRANGE one pattern worked for TILEZERO inum 9221
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMOVMSKPD inum=5305  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPD inum=5306  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPS inum=5307  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=0 VEX_PREFIX=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPS inum=5308  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=1 VEX_PREFIX=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPDPBUSD inum=9189  iform_input=VPDPBUSD_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSD inum=9190  iform_input=VPDPBUSD_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSD inum=9191  iform_input=VPDPBUSD_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSD inum=9192  iform_input=VPDPBUSD_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVMSKPD inum 5305 -- already fine
	SKIPPING VMOVMSKPD inum 5306 -- already fine
	SKIPPING VMOVMSKPS inum 5307 -- already fine
	SKIPPING VMOVMSKPS inum 5308 -- already fine
	REARRANGE needs to juggle: VPDPBUSD inum 9189
	REARRANGE one pattern worked for VPDPBUSD inum 9189
	REARRANGE needs to juggle: VPDPBUSD inum 9190
	REARRANGE one pattern worked for VPDPBUSD inum 9190
	REARRANGE needs to juggle: VPDPBUSD inum 9191
	REARRANGE one pattern worked for VPDPBUSD inum 9191
	REARRANGE needs to juggle: VPDPBUSD inum 9192
	REARRANGE one pattern worked for VPDPBUSD inum 9192
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VSQRTPD inum=5163  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5164  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPD inum=5165  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5166  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPS inum=5167  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5168  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTPS inum=5169  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5170  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTSD inum=5171  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSD inum=5172  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSQRTSS inum=5173  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSS inum=5174  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPDPBUSDS inum=9193  iform_input=VPDPBUSDS_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSDS inum=9194  iform_input=VPDPBUSDS_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSDS inum=9195  iform_input=VPDPBUSDS_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSDS inum=9196  iform_input=VPDPBUSDS_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VSQRTPD inum 5163 -- already fine
	SKIPPING VSQRTPD inum 5164 -- already fine
	SKIPPING VSQRTPD inum 5165 -- already fine
	SKIPPING VSQRTPD inum 5166 -- already fine
	SKIPPING VSQRTPS inum 5167 -- already fine
	SKIPPING VSQRTPS inum 5168 -- already fine
	SKIPPING VSQRTPS inum 5169 -- already fine
	SKIPPING VSQRTPS inum 5170 -- already fine
	REARRANGE needs to juggle: VSQRTSD inum 5171
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VSQRTPD inum 5163
	REARRANGE one pattern worked for VSQRTPD inum 5163
	REARRANGE needs to juggle: VSQRTPD inum 5164
	REARRANGE one pattern worked for VSQRTPD inum 5164
	REARRANGE needs to juggle: VSQRTPD inum 5165
	REARRANGE one pattern worked for VSQRTPD inum 5165
	REARRANGE needs to juggle: VSQRTPD inum 5166
	REARRANGE one pattern worked for VSQRTPD inum 5166
	REARRANGE needs to juggle: VSQRTPS inum 5167
	REARRANGE one pattern worked for VSQRTPS inum 5167
	REARRANGE needs to juggle: VSQRTPS inum 5168
	REARRANGE one pattern worked for VSQRTPS inum 5168
	REARRANGE needs to juggle: VSQRTPS inum 5169
	REARRANGE one pattern worked for VSQRTPS inum 5169
	REARRANGE needs to juggle: VSQRTPS inum 5170
	REARRANGE one pattern worked for VSQRTPS inum 5170
	SKIPPING VSQRTSD inum 5171 -- already fine
	SKIPPING VSQRTSD inum 5172 -- already fine
	SKIPPING VSQRTSS inum 5173 -- already fine
	SKIPPING VSQRTSS inum 5174 -- already fine
	SKIPPING VPDPBUSDS inum 9193 -- already fine
	SKIPPING VPDPBUSDS inum 9194 -- already fine
	SKIPPING VPDPBUSDS inum 9195 -- already fine
	SKIPPING VPDPBUSDS inum 9196 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VSQRTPD inum=5163  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5164  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPD inum=5165  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5166  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPDPBUSDS inum=9193  iform_input=VPDPBUSDS_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSDS inum=9194  iform_input=VPDPBUSDS_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSDS inum=9195  iform_input=VPDPBUSDS_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSDS inum=9196  iform_input=VPDPBUSDS_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VSQRTPD inum 5163 -- already fine
	SKIPPING VSQRTPD inum 5164 -- already fine
	SKIPPING VSQRTPD inum 5165 -- already fine
	SKIPPING VSQRTPD inum 5166 -- already fine
	REARRANGE needs to juggle: VPDPBUSDS inum 9193
	REARRANGE one pattern worked for VPDPBUSDS inum 9193
	REARRANGE needs to juggle: VPDPBUSDS inum 9194
	REARRANGE one pattern worked for VPDPBUSDS inum 9194
	REARRANGE needs to juggle: VPDPBUSDS inum 9195
	REARRANGE one pattern worked for VPDPBUSDS inum 9195
	REARRANGE needs to juggle: VPDPBUSDS inum 9196
	REARRANGE one pattern worked for VPDPBUSDS inum 9196
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VORPD inum=5207  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=5208  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPD inum=5209  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=5210  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPS inum=5211  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=5212  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VORPS inum=5213  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=5214  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VORPD inum 5207 -- already fine
	SKIPPING VORPD inum 5208 -- already fine
	SKIPPING VORPD inum 5209 -- already fine
	SKIPPING VORPD inum 5210 -- already fine
	REARRANGE needs to juggle: VORPS inum 5211
	REARRANGE one pattern worked for VORPS inum 5211
	REARRANGE needs to juggle: VORPS inum 5212
	REARRANGE one pattern worked for VORPS inum 5212
	REARRANGE needs to juggle: VORPS inum 5213
	REARRANGE one pattern worked for VORPS inum 5213
	REARRANGE needs to juggle: VORPS inum 5214
	REARRANGE one pattern worked for VORPS inum 5214
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VADDPD inum=4669  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=4670  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPD inum=4671  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=4672  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=4673  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=4674  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=4675  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=4676  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDSD inum=4677  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSD inum=4678  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VADDSS inum=4679  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSS inum=4680  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=5878  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=5879  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=5880  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=5881  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VADDPD inum 4669 -- already fine
	SKIPPING VADDPD inum 4670 -- already fine
	SKIPPING VADDPD inum 4671 -- already fine
	SKIPPING VADDPD inum 4672 -- already fine
	SKIPPING VADDPS inum 4673 -- already fine
	SKIPPING VADDPS inum 4674 -- already fine
	SKIPPING VADDPS inum 4675 -- already fine
	SKIPPING VADDPS inum 4676 -- already fine
	SKIPPING VADDSD inum 4677 -- already fine
	SKIPPING VADDSD inum 4678 -- already fine
	SKIPPING VADDSS inum 4679 -- already fine
	SKIPPING VADDSS inum 4680 -- already fine
	REARRANGE needs to juggle: VPBROADCASTD inum 5878
	REARRANGE one pattern worked for VPBROADCASTD inum 5878
	REARRANGE needs to juggle: VPBROADCASTD inum 5879
	REARRANGE one pattern worked for VPBROADCASTD inum 5879
	REARRANGE needs to juggle: VPBROADCASTD inum 5880
	REARRANGE one pattern worked for VPBROADCASTD inum 5880
	REARRANGE needs to juggle: VPBROADCASTD inum 5881
	REARRANGE one pattern worked for VPBROADCASTD inum 5881
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMULPD inum=5195  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=5196  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPD inum=5197  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=5198  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=5199  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=5200  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=5201  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=5202  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULSD inum=5203  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSD inum=5204  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VMULSS inum=5205  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSS inum=5206  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=5882  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=5883  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=5884  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=5885  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMULPD inum 5195 -- already fine
	SKIPPING VMULPD inum 5196 -- already fine
	SKIPPING VMULPD inum 5197 -- already fine
	SKIPPING VMULPD inum 5198 -- already fine
	SKIPPING VMULPS inum 5199 -- already fine
	SKIPPING VMULPS inum 5200 -- already fine
	SKIPPING VMULPS inum 5201 -- already fine
	SKIPPING VMULPS inum 5202 -- already fine
	REARRANGE needs to juggle: VMULSD inum 5203
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VMULPD inum 5195
	REARRANGE one pattern worked for VMULPD inum 5195
	REARRANGE needs to juggle: VMULPD inum 5196
	REARRANGE one pattern worked for VMULPD inum 5196
	REARRANGE needs to juggle: VMULPD inum 5197
	REARRANGE one pattern worked for VMULPD inum 5197
	REARRANGE needs to juggle: VMULPD inum 5198
	REARRANGE one pattern worked for VMULPD inum 5198
	REARRANGE needs to juggle: VMULPS inum 5199
	REARRANGE one pattern worked for VMULPS inum 5199
	REARRANGE needs to juggle: VMULPS inum 5200
	REARRANGE one pattern worked for VMULPS inum 5200
	REARRANGE needs to juggle: VMULPS inum 5201
	REARRANGE one pattern worked for VMULPS inum 5201
	REARRANGE needs to juggle: VMULPS inum 5202
	REARRANGE one pattern worked for VMULPS inum 5202
	SKIPPING VMULSD inum 5203 -- already fine
	SKIPPING VMULSD inum 5204 -- already fine
	SKIPPING VMULSS inum 5205 -- already fine
	SKIPPING VMULSS inum 5206 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 5882
	REARRANGE one pattern worked for VPBROADCASTQ inum 5882
	REARRANGE needs to juggle: VPBROADCASTQ inum 5883
	REARRANGE one pattern worked for VPBROADCASTQ inum 5883
	REARRANGE needs to juggle: VPBROADCASTQ inum 5884
	REARRANGE one pattern worked for VPBROADCASTQ inum 5884
	REARRANGE needs to juggle: VPBROADCASTQ inum 5885
	REARRANGE one pattern worked for VPBROADCASTQ inum 5885
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VCVTPD2PS inum=4745  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=4746  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPD2PS inum=4747  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=4748  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=4757  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=4758  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=4759  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=4760  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTSD2SS inum=4785  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSD2SS inum=4786  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VCVTSS2SD inum=4799  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSS2SD inum=4800  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VBROADCASTI128 inum=5889  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VCVTPD2PS inum 4745 -- already fine
	SKIPPING VCVTPD2PS inum 4746 -- already fine
	SKIPPING VCVTPD2PS inum 4747 -- already fine
	SKIPPING VCVTPD2PS inum 4748 -- already fine
	SKIPPING VCVTPS2PD inum 4757 -- already fine
	SKIPPING VCVTPS2PD inum 4758 -- already fine
	SKIPPING VCVTPS2PD inum 4759 -- already fine
	SKIPPING VCVTPS2PD inum 4760 -- already fine
	SKIPPING VCVTSD2SS inum 4785 -- already fine
	SKIPPING VCVTSD2SS inum 4786 -- already fine
	SKIPPING VCVTSS2SD inum 4799 -- already fine
	SKIPPING VCVTSS2SD inum 4800 -- already fine
	REARRANGE needs to juggle: VBROADCASTI128 inum 5889
	REARRANGE one pattern worked for VBROADCASTI128 inum 5889
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VFMADDSUBPS inum=4400  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4401  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4402  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4403  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4404  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4405  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4406  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4407  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5183  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5184  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=5185  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5186  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=5187  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=5188  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=5189  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=5190  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VSUBSD inum=5191  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSD inum=5192  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSUBSS inum=5193  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSS inum=5194  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

TDPBF16PS inum=9212  iform_input=TDPBF16PS_TMMf32_TMMu32_TMMu32  isa_set=AMX_BF16 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDSUBPS inum 4400 -- already fine
	SKIPPING VFMADDSUBPS inum 4401 -- already fine
	SKIPPING VFMADDSUBPS inum 4402 -- already fine
	SKIPPING VFMADDSUBPS inum 4403 -- already fine
	SKIPPING VFMADDSUBPS inum 4404 -- already fine
	SKIPPING VFMADDSUBPS inum 4405 -- already fine
	SKIPPING VFMADDSUBPS inum 4406 -- already fine
	SKIPPING VFMADDSUBPS inum 4407 -- already fine
	SKIPPING VSUBPD inum 5183 -- already fine
	SKIPPING VSUBPD inum 5184 -- already fine
	SKIPPING VSUBPD inum 5185 -- already fine
	SKIPPING VSUBPD inum 5186 -- already fine
	REARRANGE needs to juggle: VSUBPS inum 5187
	REARRANGE one pattern worked for VSUBPS inum 5187
	REARRANGE needs to juggle: VSUBPS inum 5188
	REARRANGE one pattern worked for VSUBPS inum 5188
	REARRANGE needs to juggle: VSUBPS inum 5189
	REARRANGE one pattern worked for VSUBPS inum 5189
	REARRANGE needs to juggle: VSUBPS inum 5190
	REARRANGE one pattern worked for VSUBPS inum 5190
	SKIPPING VSUBSD inum 5191 -- already fine
	SKIPPING VSUBSD inum 5192 -- already fine
	SKIPPING VSUBSS inum 5193 -- already fine
	SKIPPING VSUBSS inum 5194 -- already fine
	SKIPPING TDPBF16PS inum 9212 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDSUBPS inum=4400  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4401  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4402  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4403  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4404  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4405  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4406  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4407  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5183  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5184  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=5185  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5186  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4400 -- already fine
	SKIPPING VFMADDSUBPS inum 4401 -- already fine
	SKIPPING VFMADDSUBPS inum 4402 -- already fine
	SKIPPING VFMADDSUBPS inum 4403 -- already fine
	SKIPPING VFMADDSUBPS inum 4404 -- already fine
	SKIPPING VFMADDSUBPS inum 4405 -- already fine
	SKIPPING VFMADDSUBPS inum 4406 -- already fine
	SKIPPING VFMADDSUBPS inum 4407 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5183
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDSUBPS inum 4400
	REARRANGE one pattern worked for VFMADDSUBPS inum 4400
	REARRANGE needs to juggle: VFMADDSUBPS inum 4401
	REARRANGE one pattern worked for VFMADDSUBPS inum 4401
	REARRANGE needs to juggle: VFMADDSUBPS inum 4402
	REARRANGE one pattern worked for VFMADDSUBPS inum 4402
	REARRANGE needs to juggle: VFMADDSUBPS inum 4403
	REARRANGE one pattern worked for VFMADDSUBPS inum 4403
	REARRANGE needs to juggle: VFMADDSUBPS inum 4404
	REARRANGE one pattern worked for VFMADDSUBPS inum 4404
	REARRANGE needs to juggle: VFMADDSUBPS inum 4405
	REARRANGE one pattern worked for VFMADDSUBPS inum 4405
	REARRANGE needs to juggle: VFMADDSUBPS inum 4406
	REARRANGE one pattern worked for VFMADDSUBPS inum 4406
	REARRANGE needs to juggle: VFMADDSUBPS inum 4407
	REARRANGE one pattern worked for VFMADDSUBPS inum 4407
	REARRANGE needs to juggle: VSUBPD inum 5183
	REARRANGE one pattern worked for VSUBPD inum 5183
	REARRANGE needs to juggle: VSUBPD inum 5184
	REARRANGE one pattern worked for VSUBPD inum 5184
	REARRANGE needs to juggle: VSUBPD inum 5185
	REARRANGE one pattern worked for VSUBPD inum 5185
	REARRANGE needs to juggle: VSUBPD inum 5186
	REARRANGE one pattern worked for VSUBPD inum 5186
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPS inum=4400  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4401  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4402  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4403  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5183  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5184  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4400 -- already fine
	SKIPPING VFMADDSUBPS inum 4401 -- already fine
	SKIPPING VFMADDSUBPS inum 4402 -- already fine
	SKIPPING VFMADDSUBPS inum 4403 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5183
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPS inum 4400
	REARRANGE one pattern worked for VFMADDSUBPS inum 4400
	REARRANGE needs to juggle: VFMADDSUBPS inum 4401
	REARRANGE one pattern worked for VFMADDSUBPS inum 4401
	REARRANGE needs to juggle: VFMADDSUBPS inum 4402
	REARRANGE one pattern worked for VFMADDSUBPS inum 4402
	REARRANGE needs to juggle: VFMADDSUBPS inum 4403
	REARRANGE one pattern worked for VFMADDSUBPS inum 4403
	SKIPPING VSUBPD inum 5183 -- already fine
	SKIPPING VSUBPD inum 5184 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPS inum=4404  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4405  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4406  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4407  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5185  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5186  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4404 -- already fine
	SKIPPING VFMADDSUBPS inum 4405 -- already fine
	SKIPPING VFMADDSUBPS inum 4406 -- already fine
	SKIPPING VFMADDSUBPS inum 4407 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5185
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPS inum 4404
	REARRANGE one pattern worked for VFMADDSUBPS inum 4404
	REARRANGE needs to juggle: VFMADDSUBPS inum 4405
	REARRANGE one pattern worked for VFMADDSUBPS inum 4405
	REARRANGE needs to juggle: VFMADDSUBPS inum 4406
	REARRANGE one pattern worked for VFMADDSUBPS inum 4406
	REARRANGE needs to juggle: VFMADDSUBPS inum 4407
	REARRANGE one pattern worked for VFMADDSUBPS inum 4407
	SKIPPING VSUBPD inum 5185 -- already fine
	SKIPPING VSUBPD inum 5186 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMADDSUBPD inum=4408  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4409  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4410  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4411  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4412  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4413  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4414  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4415  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4901  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4902  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VMINPD inum=4903  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4904  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4408 -- already fine
	SKIPPING VFMADDSUBPD inum 4409 -- already fine
	SKIPPING VFMADDSUBPD inum 4410 -- already fine
	SKIPPING VFMADDSUBPD inum 4411 -- already fine
	SKIPPING VFMADDSUBPD inum 4412 -- already fine
	SKIPPING VFMADDSUBPD inum 4413 -- already fine
	SKIPPING VFMADDSUBPD inum 4414 -- already fine
	SKIPPING VFMADDSUBPD inum 4415 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4901
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDSUBPD inum 4408
	REARRANGE one pattern worked for VFMADDSUBPD inum 4408
	REARRANGE needs to juggle: VFMADDSUBPD inum 4409
	REARRANGE one pattern worked for VFMADDSUBPD inum 4409
	REARRANGE needs to juggle: VFMADDSUBPD inum 4410
	REARRANGE one pattern worked for VFMADDSUBPD inum 4410
	REARRANGE needs to juggle: VFMADDSUBPD inum 4411
	REARRANGE one pattern worked for VFMADDSUBPD inum 4411
	REARRANGE needs to juggle: VFMADDSUBPD inum 4412
	REARRANGE one pattern worked for VFMADDSUBPD inum 4412
	REARRANGE needs to juggle: VFMADDSUBPD inum 4413
	REARRANGE one pattern worked for VFMADDSUBPD inum 4413
	REARRANGE needs to juggle: VFMADDSUBPD inum 4414
	REARRANGE one pattern worked for VFMADDSUBPD inum 4414
	REARRANGE needs to juggle: VFMADDSUBPD inum 4415
	REARRANGE one pattern worked for VFMADDSUBPD inum 4415
	REARRANGE needs to juggle: VMINPD inum 4901
	REARRANGE one pattern worked for VMINPD inum 4901
	REARRANGE needs to juggle: VMINPD inum 4902
	REARRANGE one pattern worked for VMINPD inum 4902
	REARRANGE needs to juggle: VMINPD inum 4903
	REARRANGE one pattern worked for VMINPD inum 4903
	REARRANGE needs to juggle: VMINPD inum 4904
	REARRANGE one pattern worked for VMINPD inum 4904
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPD inum=4408  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4409  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4410  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4411  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4901  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4902  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4408 -- already fine
	SKIPPING VFMADDSUBPD inum 4409 -- already fine
	SKIPPING VFMADDSUBPD inum 4410 -- already fine
	SKIPPING VFMADDSUBPD inum 4411 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4901
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPD inum 4408
	REARRANGE one pattern worked for VFMADDSUBPD inum 4408
	REARRANGE needs to juggle: VFMADDSUBPD inum 4409
	REARRANGE one pattern worked for VFMADDSUBPD inum 4409
	REARRANGE needs to juggle: VFMADDSUBPD inum 4410
	REARRANGE one pattern worked for VFMADDSUBPD inum 4410
	REARRANGE needs to juggle: VFMADDSUBPD inum 4411
	REARRANGE one pattern worked for VFMADDSUBPD inum 4411
	SKIPPING VMINPD inum 4901 -- already fine
	SKIPPING VMINPD inum 4902 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPD inum=4412  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4413  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4414  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4415  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4903  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4904  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4412 -- already fine
	SKIPPING VFMADDSUBPD inum 4413 -- already fine
	SKIPPING VFMADDSUBPD inum 4414 -- already fine
	SKIPPING VFMADDSUBPD inum 4415 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4903
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPD inum 4412
	REARRANGE one pattern worked for VFMADDSUBPD inum 4412
	REARRANGE needs to juggle: VFMADDSUBPD inum 4413
	REARRANGE one pattern worked for VFMADDSUBPD inum 4413
	REARRANGE needs to juggle: VFMADDSUBPD inum 4414
	REARRANGE one pattern worked for VFMADDSUBPD inum 4414
	REARRANGE needs to juggle: VFMADDSUBPD inum 4415
	REARRANGE one pattern worked for VFMADDSUBPD inum 4415
	SKIPPING VMINPD inum 4903 -- already fine
	SKIPPING VMINPD inum 4904 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMSUBADDPS inum=4416  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4417  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4418  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4419  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4420  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4421  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4422  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4423  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=4801  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4802  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VDIVPD inum=4803  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4804  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

TDPBUSD inum=9215  iform_input=TDPBUSD_TMMi32_TMMu32_TMMu32  isa_set=AMX_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 4416 -- already fine
	SKIPPING VFMSUBADDPS inum 4417 -- already fine
	SKIPPING VFMSUBADDPS inum 4418 -- already fine
	SKIPPING VFMSUBADDPS inum 4419 -- already fine
	SKIPPING VFMSUBADDPS inum 4420 -- already fine
	SKIPPING VFMSUBADDPS inum 4421 -- already fine
	SKIPPING VFMSUBADDPS inum 4422 -- already fine
	SKIPPING VFMSUBADDPS inum 4423 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 4801
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBADDPS inum 4416
	REARRANGE one pattern worked for VFMSUBADDPS inum 4416
	REARRANGE needs to juggle: VFMSUBADDPS inum 4417
	REARRANGE one pattern worked for VFMSUBADDPS inum 4417
	REARRANGE needs to juggle: VFMSUBADDPS inum 4418
	REARRANGE one pattern worked for VFMSUBADDPS inum 4418
	REARRANGE needs to juggle: VFMSUBADDPS inum 4419
	REARRANGE one pattern worked for VFMSUBADDPS inum 4419
	REARRANGE needs to juggle: VFMSUBADDPS inum 4420
	REARRANGE one pattern worked for VFMSUBADDPS inum 4420
	REARRANGE needs to juggle: VFMSUBADDPS inum 4421
	REARRANGE one pattern worked for VFMSUBADDPS inum 4421
	REARRANGE needs to juggle: VFMSUBADDPS inum 4422
	REARRANGE one pattern worked for VFMSUBADDPS inum 4422
	REARRANGE needs to juggle: VFMSUBADDPS inum 4423
	REARRANGE one pattern worked for VFMSUBADDPS inum 4423
	REARRANGE needs to juggle: VDIVPD inum 4801
	REARRANGE one pattern worked for VDIVPD inum 4801
	REARRANGE needs to juggle: VDIVPD inum 4802
	REARRANGE one pattern worked for VDIVPD inum 4802
	REARRANGE needs to juggle: VDIVPD inum 4803
	REARRANGE one pattern worked for VDIVPD inum 4803
	REARRANGE needs to juggle: VDIVPD inum 4804
	REARRANGE one pattern worked for VDIVPD inum 4804
	REARRANGE needs to juggle: TDPBUSD inum 9215
	REARRANGE one pattern worked for TDPBUSD inum 9215
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPS inum=4416  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4417  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4418  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4419  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=4801  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4802  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

TDPBUSD inum=9215  iform_input=TDPBUSD_TMMi32_TMMu32_TMMu32  isa_set=AMX_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 4416 -- already fine
	SKIPPING VFMSUBADDPS inum 4417 -- already fine
	SKIPPING VFMSUBADDPS inum 4418 -- already fine
	SKIPPING VFMSUBADDPS inum 4419 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 4801
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPS inum 4416
	REARRANGE one pattern worked for VFMSUBADDPS inum 4416
	REARRANGE needs to juggle: VFMSUBADDPS inum 4417
	REARRANGE one pattern worked for VFMSUBADDPS inum 4417
	REARRANGE needs to juggle: VFMSUBADDPS inum 4418
	REARRANGE one pattern worked for VFMSUBADDPS inum 4418
	REARRANGE needs to juggle: VFMSUBADDPS inum 4419
	REARRANGE one pattern worked for VFMSUBADDPS inum 4419
	SKIPPING VDIVPD inum 4801 -- already fine
	SKIPPING VDIVPD inum 4802 -- already fine
	SKIPPING TDPBUSD inum 9215 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPS inum=4420  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4421  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4422  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4423  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=4803  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4804  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 4420 -- already fine
	SKIPPING VFMSUBADDPS inum 4421 -- already fine
	SKIPPING VFMSUBADDPS inum 4422 -- already fine
	SKIPPING VFMSUBADDPS inum 4423 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 4803
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPS inum 4420
	REARRANGE one pattern worked for VFMSUBADDPS inum 4420
	REARRANGE needs to juggle: VFMSUBADDPS inum 4421
	REARRANGE one pattern worked for VFMSUBADDPS inum 4421
	REARRANGE needs to juggle: VFMSUBADDPS inum 4422
	REARRANGE one pattern worked for VFMSUBADDPS inum 4422
	REARRANGE needs to juggle: VFMSUBADDPS inum 4423
	REARRANGE one pattern worked for VFMSUBADDPS inum 4423
	SKIPPING VDIVPD inum 4803 -- already fine
	SKIPPING VDIVPD inum 4804 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMSUBADDPD inum=4424  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4425  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4426  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4427  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4428  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4429  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4430  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4431  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMAXPD inum=4889  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=4890  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VMAXPD inum=4891  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=4892  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPD inum 4424 -- already fine
	SKIPPING VFMSUBADDPD inum 4425 -- already fine
	SKIPPING VFMSUBADDPD inum 4426 -- already fine
	SKIPPING VFMSUBADDPD inum 4427 -- already fine
	SKIPPING VFMSUBADDPD inum 4428 -- already fine
	SKIPPING VFMSUBADDPD inum 4429 -- already fine
	SKIPPING VFMSUBADDPD inum 4430 -- already fine
	SKIPPING VFMSUBADDPD inum 4431 -- already fine
	REARRANGE needs to juggle: VMAXPD inum 4889
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBADDPD inum 4424
	REARRANGE one pattern worked for VFMSUBADDPD inum 4424
	REARRANGE needs to juggle: VFMSUBADDPD inum 4425
	REARRANGE one pattern worked for VFMSUBADDPD inum 4425
	REARRANGE needs to juggle: VFMSUBADDPD inum 4426
	REARRANGE one pattern worked for VFMSUBADDPD inum 4426
	REARRANGE needs to juggle: VFMSUBADDPD inum 4427
	REARRANGE one pattern worked for VFMSUBADDPD inum 4427
	REARRANGE needs to juggle: VFMSUBADDPD inum 4428
	REARRANGE one pattern worked for VFMSUBADDPD inum 4428
	REARRANGE needs to juggle: VFMSUBADDPD inum 4429
	REARRANGE one pattern worked for VFMSUBADDPD inum 4429
	REARRANGE needs to juggle: VFMSUBADDPD inum 4430
	REARRANGE one pattern worked for VFMSUBADDPD inum 4430
	REARRANGE needs to juggle: VFMSUBADDPD inum 4431
	REARRANGE one pattern worked for VFMSUBADDPD inum 4431
	REARRANGE needs to juggle: VMAXPD inum 4889
	REARRANGE one pattern worked for VMAXPD inum 4889
	REARRANGE needs to juggle: VMAXPD inum 4890
	REARRANGE one pattern worked for VMAXPD inum 4890
	REARRANGE needs to juggle: VMAXPD inum 4891
	REARRANGE one pattern worked for VMAXPD inum 4891
	REARRANGE needs to juggle: VMAXPD inum 4892
	REARRANGE one pattern worked for VMAXPD inum 4892
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPD inum=4424  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4425  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4426  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4427  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMAXPD inum=4889  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=4890  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPD inum 4424 -- already fine
	SKIPPING VFMSUBADDPD inum 4425 -- already fine
	SKIPPING VFMSUBADDPD inum 4426 -- already fine
	SKIPPING VFMSUBADDPD inum 4427 -- already fine
	REARRANGE needs to juggle: VMAXPD inum 4889
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPD inum 4424
	REARRANGE one pattern worked for VFMSUBADDPD inum 4424
	REARRANGE needs to juggle: VFMSUBADDPD inum 4425
	REARRANGE one pattern worked for VFMSUBADDPD inum 4425
	REARRANGE needs to juggle: VFMSUBADDPD inum 4426
	REARRANGE one pattern worked for VFMSUBADDPD inum 4426
	REARRANGE needs to juggle: VFMSUBADDPD inum 4427
	REARRANGE one pattern worked for VFMSUBADDPD inum 4427
	SKIPPING VMAXPD inum 4889 -- already fine
	SKIPPING VMAXPD inum 4890 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPD inum=4428  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4429  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4430  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4431  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMAXPD inum=4891  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=4892  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPD inum 4428 -- already fine
	SKIPPING VFMSUBADDPD inum 4429 -- already fine
	SKIPPING VFMSUBADDPD inum 4430 -- already fine
	SKIPPING VFMSUBADDPD inum 4431 -- already fine
	REARRANGE needs to juggle: VMAXPD inum 4891
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPD inum 4428
	REARRANGE one pattern worked for VFMSUBADDPD inum 4428
	REARRANGE needs to juggle: VFMSUBADDPD inum 4429
	REARRANGE one pattern worked for VFMSUBADDPD inum 4429
	REARRANGE needs to juggle: VFMSUBADDPD inum 4430
	REARRANGE one pattern worked for VFMSUBADDPD inum 4430
	REARRANGE needs to juggle: VFMSUBADDPD inum 4431
	REARRANGE one pattern worked for VFMSUBADDPD inum 4431
	SKIPPING VMAXPD inum 4891 -- already fine
	SKIPPING VMAXPD inum 4892 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMADDPS inum=4432  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4433  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4434  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4435  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4436  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4437  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4438  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4439  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5107  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5108  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHBW inum=5771  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5772  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDPS inum 4432 -- already fine
	SKIPPING VFMADDPS inum 4433 -- already fine
	SKIPPING VFMADDPS inum 4434 -- already fine
	SKIPPING VFMADDPS inum 4435 -- already fine
	SKIPPING VFMADDPS inum 4436 -- already fine
	SKIPPING VFMADDPS inum 4437 -- already fine
	SKIPPING VFMADDPS inum 4438 -- already fine
	SKIPPING VFMADDPS inum 4439 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5107
	REARRANGE one pattern worked for VPUNPCKHBW inum 5107
	REARRANGE needs to juggle: VPUNPCKHBW inum 5108
	REARRANGE one pattern worked for VPUNPCKHBW inum 5108
	REARRANGE needs to juggle: VPUNPCKHBW inum 5771
	REARRANGE one pattern worked for VPUNPCKHBW inum 5771
	REARRANGE needs to juggle: VPUNPCKHBW inum 5772
	REARRANGE one pattern worked for VPUNPCKHBW inum 5772
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDPS inum=4432  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4433  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4434  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4435  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4436  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4437  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4438  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4439  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5107  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5108  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHBW inum=5771  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5772  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4432 -- already fine
	SKIPPING VFMADDPS inum 4433 -- already fine
	SKIPPING VFMADDPS inum 4434 -- already fine
	SKIPPING VFMADDPS inum 4435 -- already fine
	SKIPPING VFMADDPS inum 4436 -- already fine
	SKIPPING VFMADDPS inum 4437 -- already fine
	SKIPPING VFMADDPS inum 4438 -- already fine
	SKIPPING VFMADDPS inum 4439 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5107
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDPS inum 4432
	REARRANGE one pattern worked for VFMADDPS inum 4432
	REARRANGE needs to juggle: VFMADDPS inum 4433
	REARRANGE one pattern worked for VFMADDPS inum 4433
	REARRANGE needs to juggle: VFMADDPS inum 4434
	REARRANGE one pattern worked for VFMADDPS inum 4434
	REARRANGE needs to juggle: VFMADDPS inum 4435
	REARRANGE one pattern worked for VFMADDPS inum 4435
	REARRANGE needs to juggle: VFMADDPS inum 4436
	REARRANGE one pattern worked for VFMADDPS inum 4436
	REARRANGE needs to juggle: VFMADDPS inum 4437
	REARRANGE one pattern worked for VFMADDPS inum 4437
	REARRANGE needs to juggle: VFMADDPS inum 4438
	REARRANGE one pattern worked for VFMADDPS inum 4438
	REARRANGE needs to juggle: VFMADDPS inum 4439
	REARRANGE one pattern worked for VFMADDPS inum 4439
	SKIPPING VPUNPCKHBW inum 5107 -- already fine
	SKIPPING VPUNPCKHBW inum 5108 -- already fine
	SKIPPING VPUNPCKHBW inum 5771 -- already fine
	SKIPPING VPUNPCKHBW inum 5772 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDPS inum=4432  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4433  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4434  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4435  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5107  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5108  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4432 -- already fine
	SKIPPING VFMADDPS inum 4433 -- already fine
	SKIPPING VFMADDPS inum 4434 -- already fine
	SKIPPING VFMADDPS inum 4435 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5107
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPS inum 4432
	REARRANGE one pattern worked for VFMADDPS inum 4432
	REARRANGE needs to juggle: VFMADDPS inum 4433
	REARRANGE one pattern worked for VFMADDPS inum 4433
	REARRANGE needs to juggle: VFMADDPS inum 4434
	REARRANGE one pattern worked for VFMADDPS inum 4434
	REARRANGE needs to juggle: VFMADDPS inum 4435
	REARRANGE one pattern worked for VFMADDPS inum 4435
	SKIPPING VPUNPCKHBW inum 5107 -- already fine
	SKIPPING VPUNPCKHBW inum 5108 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDPS inum=4436  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4437  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4438  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4439  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5771  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5772  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4436 -- already fine
	SKIPPING VFMADDPS inum 4437 -- already fine
	SKIPPING VFMADDPS inum 4438 -- already fine
	SKIPPING VFMADDPS inum 4439 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5771
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPS inum 4436
	REARRANGE one pattern worked for VFMADDPS inum 4436
	REARRANGE needs to juggle: VFMADDPS inum 4437
	REARRANGE one pattern worked for VFMADDPS inum 4437
	REARRANGE needs to juggle: VFMADDPS inum 4438
	REARRANGE one pattern worked for VFMADDPS inum 4438
	REARRANGE needs to juggle: VFMADDPS inum 4439
	REARRANGE one pattern worked for VFMADDPS inum 4439
	SKIPPING VPUNPCKHBW inum 5771 -- already fine
	SKIPPING VPUNPCKHBW inum 5772 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMADDPD inum=4440  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4441  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4442  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4443  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4444  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4445  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4446  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4447  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=5109  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5110  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHWD inum=5773  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5774  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDPD inum 4440 -- already fine
	SKIPPING VFMADDPD inum 4441 -- already fine
	SKIPPING VFMADDPD inum 4442 -- already fine
	SKIPPING VFMADDPD inum 4443 -- already fine
	SKIPPING VFMADDPD inum 4444 -- already fine
	SKIPPING VFMADDPD inum 4445 -- already fine
	SKIPPING VFMADDPD inum 4446 -- already fine
	SKIPPING VFMADDPD inum 4447 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 5109
	REARRANGE one pattern worked for VPUNPCKHWD inum 5109
	REARRANGE needs to juggle: VPUNPCKHWD inum 5110
	REARRANGE one pattern worked for VPUNPCKHWD inum 5110
	REARRANGE needs to juggle: VPUNPCKHWD inum 5773
	REARRANGE one pattern worked for VPUNPCKHWD inum 5773
	REARRANGE needs to juggle: VPUNPCKHWD inum 5774
	REARRANGE one pattern worked for VPUNPCKHWD inum 5774
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDPD inum=4440  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4441  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4442  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4443  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4444  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4445  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4446  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4447  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=5109  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5110  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHWD inum=5773  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5774  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 4440 -- already fine
	SKIPPING VFMADDPD inum 4441 -- already fine
	SKIPPING VFMADDPD inum 4442 -- already fine
	SKIPPING VFMADDPD inum 4443 -- already fine
	SKIPPING VFMADDPD inum 4444 -- already fine
	SKIPPING VFMADDPD inum 4445 -- already fine
	SKIPPING VFMADDPD inum 4446 -- already fine
	SKIPPING VFMADDPD inum 4447 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 5109
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDPD inum 4440
	REARRANGE one pattern worked for VFMADDPD inum 4440
	REARRANGE needs to juggle: VFMADDPD inum 4441
	REARRANGE one pattern worked for VFMADDPD inum 4441
	REARRANGE needs to juggle: VFMADDPD inum 4442
	REARRANGE one pattern worked for VFMADDPD inum 4442
	REARRANGE needs to juggle: VFMADDPD inum 4443
	REARRANGE one pattern worked for VFMADDPD inum 4443
	REARRANGE needs to juggle: VFMADDPD inum 4444
	REARRANGE one pattern worked for VFMADDPD inum 4444
	REARRANGE needs to juggle: VFMADDPD inum 4445
	REARRANGE one pattern worked for VFMADDPD inum 4445
	REARRANGE needs to juggle: VFMADDPD inum 4446
	REARRANGE one pattern worked for VFMADDPD inum 4446
	REARRANGE needs to juggle: VFMADDPD inum 4447
	REARRANGE one pattern worked for VFMADDPD inum 4447
	SKIPPING VPUNPCKHWD inum 5109 -- already fine
	SKIPPING VPUNPCKHWD inum 5110 -- already fine
	SKIPPING VPUNPCKHWD inum 5773 -- already fine
	SKIPPING VPUNPCKHWD inum 5774 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDPD inum=4440  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4441  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4442  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4443  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=5109  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5110  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 4440 -- already fine
	SKIPPING VFMADDPD inum 4441 -- already fine
	SKIPPING VFMADDPD inum 4442 -- already fine
	SKIPPING VFMADDPD inum 4443 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 5109
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPD inum 4440
	REARRANGE one pattern worked for VFMADDPD inum 4440
	REARRANGE needs to juggle: VFMADDPD inum 4441
	REARRANGE one pattern worked for VFMADDPD inum 4441
	REARRANGE needs to juggle: VFMADDPD inum 4442
	REARRANGE one pattern worked for VFMADDPD inum 4442
	REARRANGE needs to juggle: VFMADDPD inum 4443
	REARRANGE one pattern worked for VFMADDPD inum 4443
	SKIPPING VPUNPCKHWD inum 5109 -- already fine
	SKIPPING VPUNPCKHWD inum 5110 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDPD inum=4444  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4445  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4446  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4447  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=5773  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5774  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 4444 -- already fine
	SKIPPING VFMADDPD inum 4445 -- already fine
	SKIPPING VFMADDPD inum 4446 -- already fine
	SKIPPING VFMADDPD inum 4447 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 5773
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPD inum 4444
	REARRANGE one pattern worked for VFMADDPD inum 4444
	REARRANGE needs to juggle: VFMADDPD inum 4445
	REARRANGE one pattern worked for VFMADDPD inum 4445
	REARRANGE needs to juggle: VFMADDPD inum 4446
	REARRANGE one pattern worked for VFMADDPD inum 4446
	REARRANGE needs to juggle: VFMADDPD inum 4447
	REARRANGE one pattern worked for VFMADDPD inum 4447
	SKIPPING VPUNPCKHWD inum 5773 -- already fine
	SKIPPING VPUNPCKHWD inum 5774 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMADDSS inum=4448  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4449  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSS inum=4450  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4451  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VPUNPCKHDQ inum=5111  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5112  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHDQ inum=5775  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5776  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDSS inum 4448 -- already fine
	SKIPPING VFMADDSS inum 4449 -- already fine
	SKIPPING VFMADDSS inum 4450 -- already fine
	SKIPPING VFMADDSS inum 4451 -- already fine
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5111
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5111
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5112
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5112
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5775
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5775
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5776
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5776
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDSS inum=4448  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4449  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSS inum=4450  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4451  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VPUNPCKHDQ inum=5111  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5112  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHDQ inum=5775  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5776  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSS inum 4448 -- already fine
	SKIPPING VFMADDSS inum 4449 -- already fine
	SKIPPING VFMADDSS inum 4450 -- already fine
	SKIPPING VFMADDSS inum 4451 -- already fine
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5111
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSS inum 4448
	REARRANGE one pattern worked for VFMADDSS inum 4448
	REARRANGE needs to juggle: VFMADDSS inum 4449
	REARRANGE one pattern worked for VFMADDSS inum 4449
	REARRANGE needs to juggle: VFMADDSS inum 4450
	REARRANGE one pattern worked for VFMADDSS inum 4450
	REARRANGE needs to juggle: VFMADDSS inum 4451
	REARRANGE one pattern worked for VFMADDSS inum 4451
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5111
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5111
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5112
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5112
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5775
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5775
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5776
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5776
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMADDSD inum=4452  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4453  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSD inum=4454  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4455  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VPACKSSDW inum=4997  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=4998  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPACKSSDW inum=5633  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=5634  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDSD inum 4452 -- already fine
	SKIPPING VFMADDSD inum 4453 -- already fine
	SKIPPING VFMADDSD inum 4454 -- already fine
	SKIPPING VFMADDSD inum 4455 -- already fine
	REARRANGE needs to juggle: VPACKSSDW inum 4997
	REARRANGE one pattern worked for VPACKSSDW inum 4997
	REARRANGE needs to juggle: VPACKSSDW inum 4998
	REARRANGE one pattern worked for VPACKSSDW inum 4998
	REARRANGE needs to juggle: VPACKSSDW inum 5633
	REARRANGE one pattern worked for VPACKSSDW inum 5633
	REARRANGE needs to juggle: VPACKSSDW inum 5634
	REARRANGE one pattern worked for VPACKSSDW inum 5634
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDSD inum=4452  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4453  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSD inum=4454  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4455  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VPACKSSDW inum=4997  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=4998  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPACKSSDW inum=5633  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=5634  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSD inum 4452 -- already fine
	SKIPPING VFMADDSD inum 4453 -- already fine
	SKIPPING VFMADDSD inum 4454 -- already fine
	SKIPPING VFMADDSD inum 4455 -- already fine
	REARRANGE needs to juggle: VPACKSSDW inum 4997
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSD inum 4452
	REARRANGE one pattern worked for VFMADDSD inum 4452
	REARRANGE needs to juggle: VFMADDSD inum 4453
	REARRANGE one pattern worked for VFMADDSD inum 4453
	REARRANGE needs to juggle: VFMADDSD inum 4454
	REARRANGE one pattern worked for VFMADDSD inum 4454
	REARRANGE needs to juggle: VFMADDSD inum 4455
	REARRANGE one pattern worked for VFMADDSD inum 4455
	REARRANGE needs to juggle: VPACKSSDW inum 4997
	REARRANGE one pattern worked for VPACKSSDW inum 4997
	REARRANGE needs to juggle: VPACKSSDW inum 4998
	REARRANGE one pattern worked for VPACKSSDW inum 4998
	REARRANGE needs to juggle: VPACKSSDW inum 5633
	REARRANGE one pattern worked for VPACKSSDW inum 5633
	REARRANGE needs to juggle: VPACKSSDW inum 5634
	REARRANGE one pattern worked for VPACKSSDW inum 5634
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMSUBPS inum=4456  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4457  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4458  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4459  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4460  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4461  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4462  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4463  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5121  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5122  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKLQDQ inum=5785  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5786  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBPS inum 4456 -- already fine
	SKIPPING VFMSUBPS inum 4457 -- already fine
	SKIPPING VFMSUBPS inum 4458 -- already fine
	SKIPPING VFMSUBPS inum 4459 -- already fine
	SKIPPING VFMSUBPS inum 4460 -- already fine
	SKIPPING VFMSUBPS inum 4461 -- already fine
	SKIPPING VFMSUBPS inum 4462 -- already fine
	SKIPPING VFMSUBPS inum 4463 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5121
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5121
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5122
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5122
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5785
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5785
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5786
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5786
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBPS inum=4456  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4457  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4458  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4459  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4460  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4461  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4462  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4463  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5121  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5122  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKLQDQ inum=5785  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5786  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4456 -- already fine
	SKIPPING VFMSUBPS inum 4457 -- already fine
	SKIPPING VFMSUBPS inum 4458 -- already fine
	SKIPPING VFMSUBPS inum 4459 -- already fine
	SKIPPING VFMSUBPS inum 4460 -- already fine
	SKIPPING VFMSUBPS inum 4461 -- already fine
	SKIPPING VFMSUBPS inum 4462 -- already fine
	SKIPPING VFMSUBPS inum 4463 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5121
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBPS inum 4456
	REARRANGE one pattern worked for VFMSUBPS inum 4456
	REARRANGE needs to juggle: VFMSUBPS inum 4457
	REARRANGE one pattern worked for VFMSUBPS inum 4457
	REARRANGE needs to juggle: VFMSUBPS inum 4458
	REARRANGE one pattern worked for VFMSUBPS inum 4458
	REARRANGE needs to juggle: VFMSUBPS inum 4459
	REARRANGE one pattern worked for VFMSUBPS inum 4459
	REARRANGE needs to juggle: VFMSUBPS inum 4460
	REARRANGE one pattern worked for VFMSUBPS inum 4460
	REARRANGE needs to juggle: VFMSUBPS inum 4461
	REARRANGE one pattern worked for VFMSUBPS inum 4461
	REARRANGE needs to juggle: VFMSUBPS inum 4462
	REARRANGE one pattern worked for VFMSUBPS inum 4462
	REARRANGE needs to juggle: VFMSUBPS inum 4463
	REARRANGE one pattern worked for VFMSUBPS inum 4463
	SKIPPING VPUNPCKLQDQ inum 5121 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5122 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5785 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5786 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPS inum=4456  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4457  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4458  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4459  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5121  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5122  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4456 -- already fine
	SKIPPING VFMSUBPS inum 4457 -- already fine
	SKIPPING VFMSUBPS inum 4458 -- already fine
	SKIPPING VFMSUBPS inum 4459 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5121
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPS inum 4456
	REARRANGE one pattern worked for VFMSUBPS inum 4456
	REARRANGE needs to juggle: VFMSUBPS inum 4457
	REARRANGE one pattern worked for VFMSUBPS inum 4457
	REARRANGE needs to juggle: VFMSUBPS inum 4458
	REARRANGE one pattern worked for VFMSUBPS inum 4458
	REARRANGE needs to juggle: VFMSUBPS inum 4459
	REARRANGE one pattern worked for VFMSUBPS inum 4459
	SKIPPING VPUNPCKLQDQ inum 5121 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5122 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPS inum=4460  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4461  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4462  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4463  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5785  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5786  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4460 -- already fine
	SKIPPING VFMSUBPS inum 4461 -- already fine
	SKIPPING VFMSUBPS inum 4462 -- already fine
	SKIPPING VFMSUBPS inum 4463 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5785
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPS inum 4460
	REARRANGE one pattern worked for VFMSUBPS inum 4460
	REARRANGE needs to juggle: VFMSUBPS inum 4461
	REARRANGE one pattern worked for VFMSUBPS inum 4461
	REARRANGE needs to juggle: VFMSUBPS inum 4462
	REARRANGE one pattern worked for VFMSUBPS inum 4462
	REARRANGE needs to juggle: VFMSUBPS inum 4463
	REARRANGE one pattern worked for VFMSUBPS inum 4463
	SKIPPING VPUNPCKLQDQ inum 5785 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5786 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMSUBPD inum=4464  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4465  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4466  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4467  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4468  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4469  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4470  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4471  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHQDQ inum=5113  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5114  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHQDQ inum=5777  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5778  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBPD inum 4464 -- already fine
	SKIPPING VFMSUBPD inum 4465 -- already fine
	SKIPPING VFMSUBPD inum 4466 -- already fine
	SKIPPING VFMSUBPD inum 4467 -- already fine
	SKIPPING VFMSUBPD inum 4468 -- already fine
	SKIPPING VFMSUBPD inum 4469 -- already fine
	SKIPPING VFMSUBPD inum 4470 -- already fine
	SKIPPING VFMSUBPD inum 4471 -- already fine
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5113
	REARRANGE one pattern worked for VPUNPCKHQDQ inum 5113
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5114
	REARRANGE one pattern worked for VPUNPCKHQDQ inum 5114
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5777
	REARRANGE one pattern worked for VPUNPCKHQDQ inum 5777
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5778
	REARRANGE one pattern worked for VPUNPCKHQDQ inum 5778
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBPD inum=4464  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4465  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4466  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4467  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4468  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4469  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4470  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4471  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHQDQ inum=5113  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5114  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHQDQ inum=5777  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5778  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPD inum 4464 -- already fine
	SKIPPING VFMSUBPD inum 4465 -- already fine
	SKIPPING VFMSUBPD inum 4466 -- already fine
	SKIPPING VFMSUBPD inum 4467 -- already fine
	SKIPPING VFMSUBPD inum 4468 -- already fine
	SKIPPING VFMSUBPD inum 4469 -- already fine
	SKIPPING VFMSUBPD inum 4470 -- already fine
	SKIPPING VFMSUBPD inum 4471 -- already fine
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5113
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBPD inum 4464
	REARRANGE one pattern worked for VFMSUBPD inum 4464
	REARRANGE needs to juggle: VFMSUBPD inum 4465
	REARRANGE one pattern worked for VFMSUBPD inum 4465
	REARRANGE needs to juggle: VFMSUBPD inum 4466
	REARRANGE one pattern worked for VFMSUBPD inum 4466
	REARRANGE needs to juggle: VFMSUBPD inum 4467
	REARRANGE one pattern worked for VFMSUBPD inum 4467
	REARRANGE needs to juggle: VFMSUBPD inum 4468
	REARRANGE one pattern worked for VFMSUBPD inum 4468
	REARRANGE needs to juggle: VFMSUBPD inum 4469
	REARRANGE one pattern worked for VFMSUBPD inum 4469
	REARRANGE needs to juggle: VFMSUBPD inum 4470
	REARRANGE one pattern worked for VFMSUBPD inum 4470
	REARRANGE needs to juggle: VFMSUBPD inum 4471
	REARRANGE one pattern worked for VFMSUBPD inum 4471
	SKIPPING VPUNPCKHQDQ inum 5113 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5114 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5777 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5778 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPD inum=4464  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4465  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4466  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4467  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHQDQ inum=5113  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5114  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPD inum 4464 -- already fine
	SKIPPING VFMSUBPD inum 4465 -- already fine
	SKIPPING VFMSUBPD inum 4466 -- already fine
	SKIPPING VFMSUBPD inum 4467 -- already fine
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5113
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPD inum 4464
	REARRANGE one pattern worked for VFMSUBPD inum 4464
	REARRANGE needs to juggle: VFMSUBPD inum 4465
	REARRANGE one pattern worked for VFMSUBPD inum 4465
	REARRANGE needs to juggle: VFMSUBPD inum 4466
	REARRANGE one pattern worked for VFMSUBPD inum 4466
	REARRANGE needs to juggle: VFMSUBPD inum 4467
	REARRANGE one pattern worked for VFMSUBPD inum 4467
	SKIPPING VPUNPCKHQDQ inum 5113 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5114 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPD inum=4468  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4469  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4470  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4471  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHQDQ inum=5777  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5778  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPD inum 4468 -- already fine
	SKIPPING VFMSUBPD inum 4469 -- already fine
	SKIPPING VFMSUBPD inum 4470 -- already fine
	SKIPPING VFMSUBPD inum 4471 -- already fine
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5777
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPD inum 4468
	REARRANGE one pattern worked for VFMSUBPD inum 4468
	REARRANGE needs to juggle: VFMSUBPD inum 4469
	REARRANGE one pattern worked for VFMSUBPD inum 4469
	REARRANGE needs to juggle: VFMSUBPD inum 4470
	REARRANGE one pattern worked for VFMSUBPD inum 4470
	REARRANGE needs to juggle: VFMSUBPD inum 4471
	REARRANGE one pattern worked for VFMSUBPD inum 4471
	SKIPPING VPUNPCKHQDQ inum 5777 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5778 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMSUBSS inum=4472  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4473  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSS inum=4474  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4475  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=4929  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4930  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4933  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4934  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4937  iform_input=VMOVQ_XMMdq_MEMq_6E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4938  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBSS inum 4472 -- already fine
	SKIPPING VFMSUBSS inum 4473 -- already fine
	SKIPPING VFMSUBSS inum 4474 -- already fine
	SKIPPING VFMSUBSS inum 4475 -- already fine
	REARRANGE needs to juggle: VMOVD inum 4929
	REARRANGE one pattern worked for VMOVD inum 4929
	REARRANGE needs to juggle: VMOVD inum 4930
	REARRANGE one pattern worked for VMOVD inum 4930
	REARRANGE needs to juggle: VMOVD inum 4933
	REARRANGE one pattern worked for VMOVD inum 4933
	REARRANGE needs to juggle: VMOVD inum 4934
	REARRANGE one pattern worked for VMOVD inum 4934
	REARRANGE needs to juggle: VMOVQ inum 4937
	REARRANGE one pattern worked for VMOVQ inum 4937
	REARRANGE needs to juggle: VMOVQ inum 4938
	REARRANGE one pattern worked for VMOVQ inum 4938
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBSS inum=4472  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4473  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSS inum=4474  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4475  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=4929  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4930  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4933  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4934  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4937  iform_input=VMOVQ_XMMdq_MEMq_6E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4938  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBSS inum 4472 -- already fine
	SKIPPING VFMSUBSS inum 4473 -- already fine
	SKIPPING VFMSUBSS inum 4474 -- already fine
	SKIPPING VFMSUBSS inum 4475 -- already fine
	REARRANGE needs to juggle: VMOVD inum 4929
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBSS inum 4472
	REARRANGE one pattern worked for VFMSUBSS inum 4472
	REARRANGE needs to juggle: VFMSUBSS inum 4473
	REARRANGE one pattern worked for VFMSUBSS inum 4473
	REARRANGE needs to juggle: VFMSUBSS inum 4474
	REARRANGE one pattern worked for VFMSUBSS inum 4474
	REARRANGE needs to juggle: VFMSUBSS inum 4475
	REARRANGE one pattern worked for VFMSUBSS inum 4475
	REARRANGE needs to juggle: VMOVD inum 4929
	REARRANGE one pattern worked for VMOVD inum 4929
	REARRANGE needs to juggle: VMOVD inum 4930
	REARRANGE one pattern worked for VMOVD inum 4930
	REARRANGE needs to juggle: VMOVD inum 4933
	REARRANGE one pattern worked for VMOVD inum 4933
	REARRANGE needs to juggle: VMOVD inum 4934
	REARRANGE one pattern worked for VMOVD inum 4934
	REARRANGE needs to juggle: VMOVQ inum 4937
	REARRANGE one pattern worked for VMOVQ inum 4937
	REARRANGE needs to juggle: VMOVQ inum 4938
	REARRANGE one pattern worked for VMOVQ inum 4938
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMSUBSD inum=4476  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4477  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSD inum=4478  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4479  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=4949  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4950  iform_input=VMOVDQA_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4953  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4954  iform_input=VMOVDQA_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4957  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4958  iform_input=VMOVDQU_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4959  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4960  iform_input=VMOVDQU_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBSD inum 4476 -- already fine
	SKIPPING VFMSUBSD inum 4477 -- already fine
	SKIPPING VFMSUBSD inum 4478 -- already fine
	SKIPPING VFMSUBSD inum 4479 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 4949
	REARRANGE one pattern worked for VMOVDQA inum 4949
	REARRANGE needs to juggle: VMOVDQA inum 4950
	REARRANGE one pattern worked for VMOVDQA inum 4950
	REARRANGE needs to juggle: VMOVDQA inum 4953
	REARRANGE one pattern worked for VMOVDQA inum 4953
	REARRANGE needs to juggle: VMOVDQA inum 4954
	REARRANGE one pattern worked for VMOVDQA inum 4954
	REARRANGE needs to juggle: VMOVDQU inum 4957
	REARRANGE one pattern worked for VMOVDQU inum 4957
	REARRANGE needs to juggle: VMOVDQU inum 4958
	REARRANGE one pattern worked for VMOVDQU inum 4958
	REARRANGE needs to juggle: VMOVDQU inum 4959
	REARRANGE one pattern worked for VMOVDQU inum 4959
	REARRANGE needs to juggle: VMOVDQU inum 4960
	REARRANGE one pattern worked for VMOVDQU inum 4960
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBSD inum=4476  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4477  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSD inum=4478  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4479  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=4949  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4950  iform_input=VMOVDQA_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4953  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4954  iform_input=VMOVDQA_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBSD inum 4476 -- already fine
	SKIPPING VFMSUBSD inum 4477 -- already fine
	SKIPPING VFMSUBSD inum 4478 -- already fine
	SKIPPING VFMSUBSD inum 4479 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 4949
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBSD inum 4476
	REARRANGE one pattern worked for VFMSUBSD inum 4476
	REARRANGE needs to juggle: VFMSUBSD inum 4477
	REARRANGE one pattern worked for VFMSUBSD inum 4477
	REARRANGE needs to juggle: VFMSUBSD inum 4478
	REARRANGE one pattern worked for VFMSUBSD inum 4478
	REARRANGE needs to juggle: VFMSUBSD inum 4479
	REARRANGE one pattern worked for VFMSUBSD inum 4479
	REARRANGE needs to juggle: VMOVDQA inum 4949
	REARRANGE one pattern worked for VMOVDQA inum 4949
	REARRANGE needs to juggle: VMOVDQA inum 4950
	REARRANGE one pattern worked for VMOVDQA inum 4950
	REARRANGE needs to juggle: VMOVDQA inum 4953
	REARRANGE one pattern worked for VMOVDQA inum 4953
	REARRANGE needs to juggle: VMOVDQA inum 4954
	REARRANGE one pattern worked for VMOVDQA inum 4954
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMADDPS inum=4480  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4481  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4482  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4483  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4484  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4485  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4486  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4487  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTB inum=5870  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5871  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTB inum=5872  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5873  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMADDPS inum 4480 -- already fine
	SKIPPING VFNMADDPS inum 4481 -- already fine
	SKIPPING VFNMADDPS inum 4482 -- already fine
	SKIPPING VFNMADDPS inum 4483 -- already fine
	SKIPPING VFNMADDPS inum 4484 -- already fine
	SKIPPING VFNMADDPS inum 4485 -- already fine
	SKIPPING VFNMADDPS inum 4486 -- already fine
	SKIPPING VFNMADDPS inum 4487 -- already fine
	REARRANGE needs to juggle: VPBROADCASTB inum 5870
	REARRANGE one pattern worked for VPBROADCASTB inum 5870
	REARRANGE needs to juggle: VPBROADCASTB inum 5871
	REARRANGE one pattern worked for VPBROADCASTB inum 5871
	REARRANGE needs to juggle: VPBROADCASTB inum 5872
	REARRANGE one pattern worked for VPBROADCASTB inum 5872
	REARRANGE needs to juggle: VPBROADCASTB inum 5873
	REARRANGE one pattern worked for VPBROADCASTB inum 5873
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMADDPS inum=4480  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4481  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4482  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4483  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4484  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4485  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4486  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4487  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTB inum=5870  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5871  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTB inum=5872  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5873  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMADDPS inum 4480 -- already fine
	SKIPPING VFNMADDPS inum 4481 -- already fine
	SKIPPING VFNMADDPS inum 4482 -- already fine
	SKIPPING VFNMADDPS inum 4483 -- already fine
	SKIPPING VFNMADDPS inum 4484 -- already fine
	SKIPPING VFNMADDPS inum 4485 -- already fine
	SKIPPING VFNMADDPS inum 4486 -- already fine
	SKIPPING VFNMADDPS inum 4487 -- already fine
	REARRANGE needs to juggle: VPBROADCASTB inum 5870
	REARRANGE one pattern worked for VPBROADCASTB inum 5870
	REARRANGE needs to juggle: VPBROADCASTB inum 5871
	REARRANGE one pattern worked for VPBROADCASTB inum 5871
	REARRANGE needs to juggle: VPBROADCASTB inum 5872
	REARRANGE one pattern worked for VPBROADCASTB inum 5872
	REARRANGE needs to juggle: VPBROADCASTB inum 5873
	REARRANGE one pattern worked for VPBROADCASTB inum 5873
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMADDPD inum=4488  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4489  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4490  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4491  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4492  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4493  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4494  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4495  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTW inum=5874  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5875  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTW inum=5876  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5877  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMADDPD inum 4488 -- already fine
	SKIPPING VFNMADDPD inum 4489 -- already fine
	SKIPPING VFNMADDPD inum 4490 -- already fine
	SKIPPING VFNMADDPD inum 4491 -- already fine
	SKIPPING VFNMADDPD inum 4492 -- already fine
	SKIPPING VFNMADDPD inum 4493 -- already fine
	SKIPPING VFNMADDPD inum 4494 -- already fine
	SKIPPING VFNMADDPD inum 4495 -- already fine
	REARRANGE needs to juggle: VPBROADCASTW inum 5874
	REARRANGE one pattern worked for VPBROADCASTW inum 5874
	REARRANGE needs to juggle: VPBROADCASTW inum 5875
	REARRANGE one pattern worked for VPBROADCASTW inum 5875
	REARRANGE needs to juggle: VPBROADCASTW inum 5876
	REARRANGE one pattern worked for VPBROADCASTW inum 5876
	REARRANGE needs to juggle: VPBROADCASTW inum 5877
	REARRANGE one pattern worked for VPBROADCASTW inum 5877
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMADDPD inum=4488  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4489  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4490  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4491  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4492  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4493  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4494  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4495  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTW inum=5874  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5875  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTW inum=5876  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5877  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMADDPD inum 4488 -- already fine
	SKIPPING VFNMADDPD inum 4489 -- already fine
	SKIPPING VFNMADDPD inum 4490 -- already fine
	SKIPPING VFNMADDPD inum 4491 -- already fine
	SKIPPING VFNMADDPD inum 4492 -- already fine
	SKIPPING VFNMADDPD inum 4493 -- already fine
	SKIPPING VFNMADDPD inum 4494 -- already fine
	SKIPPING VFNMADDPD inum 4495 -- already fine
	REARRANGE needs to juggle: VPBROADCASTW inum 5874
	REARRANGE one pattern worked for VPBROADCASTW inum 5874
	REARRANGE needs to juggle: VPBROADCASTW inum 5875
	REARRANGE one pattern worked for VPBROADCASTW inum 5875
	REARRANGE needs to juggle: VPBROADCASTW inum 5876
	REARRANGE one pattern worked for VPBROADCASTW inum 5876
	REARRANGE needs to juggle: VPBROADCASTW inum 5877
	REARRANGE one pattern worked for VPBROADCASTW inum 5877
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBPS inum=4504  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4505  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4506  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4507  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4508  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4509  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4510  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4511  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=4825  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4826  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPD inum=4827  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4828  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPS inum=4829  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPS inum=4830  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPS inum=4831  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPS inum=4832  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBPS inum 4504 -- already fine
	SKIPPING VFNMSUBPS inum 4505 -- already fine
	SKIPPING VFNMSUBPS inum 4506 -- already fine
	SKIPPING VFNMSUBPS inum 4507 -- already fine
	SKIPPING VFNMSUBPS inum 4508 -- already fine
	SKIPPING VFNMSUBPS inum 4509 -- already fine
	SKIPPING VFNMSUBPS inum 4510 -- already fine
	SKIPPING VFNMSUBPS inum 4511 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 4825
	REARRANGE one pattern worked for VHADDPD inum 4825
	REARRANGE needs to juggle: VHADDPD inum 4826
	REARRANGE one pattern worked for VHADDPD inum 4826
	REARRANGE needs to juggle: VHADDPD inum 4827
	REARRANGE one pattern worked for VHADDPD inum 4827
	REARRANGE needs to juggle: VHADDPD inum 4828
	REARRANGE one pattern worked for VHADDPD inum 4828
	REARRANGE needs to juggle: VHADDPS inum 4829
	REARRANGE one pattern worked for VHADDPS inum 4829
	REARRANGE needs to juggle: VHADDPS inum 4830
	REARRANGE one pattern worked for VHADDPS inum 4830
	REARRANGE needs to juggle: VHADDPS inum 4831
	REARRANGE one pattern worked for VHADDPS inum 4831
	REARRANGE needs to juggle: VHADDPS inum 4832
	REARRANGE one pattern worked for VHADDPS inum 4832
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBPS inum=4504  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4505  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4506  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4507  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4508  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4509  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4510  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4511  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=4825  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4826  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPD inum=4827  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4828  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 4504 -- already fine
	SKIPPING VFNMSUBPS inum 4505 -- already fine
	SKIPPING VFNMSUBPS inum 4506 -- already fine
	SKIPPING VFNMSUBPS inum 4507 -- already fine
	SKIPPING VFNMSUBPS inum 4508 -- already fine
	SKIPPING VFNMSUBPS inum 4509 -- already fine
	SKIPPING VFNMSUBPS inum 4510 -- already fine
	SKIPPING VFNMSUBPS inum 4511 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 4825
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFNMSUBPS inum 4504
	REARRANGE one pattern worked for VFNMSUBPS inum 4504
	REARRANGE needs to juggle: VFNMSUBPS inum 4505
	REARRANGE one pattern worked for VFNMSUBPS inum 4505
	REARRANGE needs to juggle: VFNMSUBPS inum 4506
	REARRANGE one pattern worked for VFNMSUBPS inum 4506
	REARRANGE needs to juggle: VFNMSUBPS inum 4507
	REARRANGE one pattern worked for VFNMSUBPS inum 4507
	REARRANGE needs to juggle: VFNMSUBPS inum 4508
	REARRANGE one pattern worked for VFNMSUBPS inum 4508
	REARRANGE needs to juggle: VFNMSUBPS inum 4509
	REARRANGE one pattern worked for VFNMSUBPS inum 4509
	REARRANGE needs to juggle: VFNMSUBPS inum 4510
	REARRANGE one pattern worked for VFNMSUBPS inum 4510
	REARRANGE needs to juggle: VFNMSUBPS inum 4511
	REARRANGE one pattern worked for VFNMSUBPS inum 4511
	SKIPPING VHADDPD inum 4825 -- already fine
	SKIPPING VHADDPD inum 4826 -- already fine
	SKIPPING VHADDPD inum 4827 -- already fine
	SKIPPING VHADDPD inum 4828 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPS inum=4504  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4505  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4506  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4507  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=4825  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4826  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 4504 -- already fine
	SKIPPING VFNMSUBPS inum 4505 -- already fine
	SKIPPING VFNMSUBPS inum 4506 -- already fine
	SKIPPING VFNMSUBPS inum 4507 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 4825
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPS inum 4504
	REARRANGE one pattern worked for VFNMSUBPS inum 4504
	REARRANGE needs to juggle: VFNMSUBPS inum 4505
	REARRANGE one pattern worked for VFNMSUBPS inum 4505
	REARRANGE needs to juggle: VFNMSUBPS inum 4506
	REARRANGE one pattern worked for VFNMSUBPS inum 4506
	REARRANGE needs to juggle: VFNMSUBPS inum 4507
	REARRANGE one pattern worked for VFNMSUBPS inum 4507
	SKIPPING VHADDPD inum 4825 -- already fine
	SKIPPING VHADDPD inum 4826 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPS inum=4508  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4509  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4510  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4511  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=4827  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4828  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 4508 -- already fine
	SKIPPING VFNMSUBPS inum 4509 -- already fine
	SKIPPING VFNMSUBPS inum 4510 -- already fine
	SKIPPING VFNMSUBPS inum 4511 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 4827
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPS inum 4508
	REARRANGE one pattern worked for VFNMSUBPS inum 4508
	REARRANGE needs to juggle: VFNMSUBPS inum 4509
	REARRANGE one pattern worked for VFNMSUBPS inum 4509
	REARRANGE needs to juggle: VFNMSUBPS inum 4510
	REARRANGE one pattern worked for VFNMSUBPS inum 4510
	REARRANGE needs to juggle: VFNMSUBPS inum 4511
	REARRANGE one pattern worked for VFNMSUBPS inum 4511
	SKIPPING VHADDPD inum 4827 -- already fine
	SKIPPING VHADDPD inum 4828 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBPD inum=4512  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4513  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4514  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4515  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4516  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4517  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4518  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4519  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=4833  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4834  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPD inum=4835  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4836  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPS inum=4837  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPS inum=4838  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPS inum=4839  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPS inum=4840  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBPD inum 4512 -- already fine
	SKIPPING VFNMSUBPD inum 4513 -- already fine
	SKIPPING VFNMSUBPD inum 4514 -- already fine
	SKIPPING VFNMSUBPD inum 4515 -- already fine
	SKIPPING VFNMSUBPD inum 4516 -- already fine
	SKIPPING VFNMSUBPD inum 4517 -- already fine
	SKIPPING VFNMSUBPD inum 4518 -- already fine
	SKIPPING VFNMSUBPD inum 4519 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 4833
	REARRANGE one pattern worked for VHSUBPD inum 4833
	REARRANGE needs to juggle: VHSUBPD inum 4834
	REARRANGE one pattern worked for VHSUBPD inum 4834
	REARRANGE needs to juggle: VHSUBPD inum 4835
	REARRANGE one pattern worked for VHSUBPD inum 4835
	REARRANGE needs to juggle: VHSUBPD inum 4836
	REARRANGE one pattern worked for VHSUBPD inum 4836
	REARRANGE needs to juggle: VHSUBPS inum 4837
	REARRANGE one pattern worked for VHSUBPS inum 4837
	REARRANGE needs to juggle: VHSUBPS inum 4838
	REARRANGE one pattern worked for VHSUBPS inum 4838
	REARRANGE needs to juggle: VHSUBPS inum 4839
	REARRANGE one pattern worked for VHSUBPS inum 4839
	REARRANGE needs to juggle: VHSUBPS inum 4840
	REARRANGE one pattern worked for VHSUBPS inum 4840
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBPD inum=4512  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4513  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4514  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4515  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4516  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4517  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4518  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4519  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=4833  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4834  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPD inum=4835  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4836  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPD inum 4512 -- already fine
	SKIPPING VFNMSUBPD inum 4513 -- already fine
	SKIPPING VFNMSUBPD inum 4514 -- already fine
	SKIPPING VFNMSUBPD inum 4515 -- already fine
	SKIPPING VFNMSUBPD inum 4516 -- already fine
	SKIPPING VFNMSUBPD inum 4517 -- already fine
	SKIPPING VFNMSUBPD inum 4518 -- already fine
	SKIPPING VFNMSUBPD inum 4519 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 4833
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFNMSUBPD inum 4512
	REARRANGE one pattern worked for VFNMSUBPD inum 4512
	REARRANGE needs to juggle: VFNMSUBPD inum 4513
	REARRANGE one pattern worked for VFNMSUBPD inum 4513
	REARRANGE needs to juggle: VFNMSUBPD inum 4514
	REARRANGE one pattern worked for VFNMSUBPD inum 4514
	REARRANGE needs to juggle: VFNMSUBPD inum 4515
	REARRANGE one pattern worked for VFNMSUBPD inum 4515
	REARRANGE needs to juggle: VFNMSUBPD inum 4516
	REARRANGE one pattern worked for VFNMSUBPD inum 4516
	REARRANGE needs to juggle: VFNMSUBPD inum 4517
	REARRANGE one pattern worked for VFNMSUBPD inum 4517
	REARRANGE needs to juggle: VFNMSUBPD inum 4518
	REARRANGE one pattern worked for VFNMSUBPD inum 4518
	REARRANGE needs to juggle: VFNMSUBPD inum 4519
	REARRANGE one pattern worked for VFNMSUBPD inum 4519
	SKIPPING VHSUBPD inum 4833 -- already fine
	SKIPPING VHSUBPD inum 4834 -- already fine
	SKIPPING VHSUBPD inum 4835 -- already fine
	SKIPPING VHSUBPD inum 4836 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPD inum=4512  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4513  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4514  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4515  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=4833  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4834  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPD inum 4512 -- already fine
	SKIPPING VFNMSUBPD inum 4513 -- already fine
	SKIPPING VFNMSUBPD inum 4514 -- already fine
	SKIPPING VFNMSUBPD inum 4515 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 4833
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPD inum 4512
	REARRANGE one pattern worked for VFNMSUBPD inum 4512
	REARRANGE needs to juggle: VFNMSUBPD inum 4513
	REARRANGE one pattern worked for VFNMSUBPD inum 4513
	REARRANGE needs to juggle: VFNMSUBPD inum 4514
	REARRANGE one pattern worked for VFNMSUBPD inum 4514
	REARRANGE needs to juggle: VFNMSUBPD inum 4515
	REARRANGE one pattern worked for VFNMSUBPD inum 4515
	SKIPPING VHSUBPD inum 4833 -- already fine
	SKIPPING VHSUBPD inum 4834 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPD inum=4516  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4517  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4518  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4519  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=4835  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4836  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPD inum 4516 -- already fine
	SKIPPING VFNMSUBPD inum 4517 -- already fine
	SKIPPING VFNMSUBPD inum 4518 -- already fine
	SKIPPING VFNMSUBPD inum 4519 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 4835
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPD inum 4516
	REARRANGE one pattern worked for VFNMSUBPD inum 4516
	REARRANGE needs to juggle: VFNMSUBPD inum 4517
	REARRANGE one pattern worked for VFNMSUBPD inum 4517
	REARRANGE needs to juggle: VFNMSUBPD inum 4518
	REARRANGE one pattern worked for VFNMSUBPD inum 4518
	REARRANGE needs to juggle: VFNMSUBPD inum 4519
	REARRANGE one pattern worked for VFNMSUBPD inum 4519
	SKIPPING VHSUBPD inum 4835 -- already fine
	SKIPPING VHSUBPD inum 4836 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBSS inum=4520  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4521  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSS inum=4522  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4523  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=4931  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4932  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4935  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4936  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4939  iform_input=VMOVQ_MEMq_XMMq_7E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4940  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4941  iform_input=VMOVQ_XMMdq_MEMq_7E  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVQ inum=4942  iform_input=VMOVQ_XMMdq_XMMq_7E  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBSS inum 4520 -- already fine
	SKIPPING VFNMSUBSS inum 4521 -- already fine
	SKIPPING VFNMSUBSS inum 4522 -- already fine
	SKIPPING VFNMSUBSS inum 4523 -- already fine
	REARRANGE needs to juggle: VMOVD inum 4931
	REARRANGE one pattern worked for VMOVD inum 4931
	REARRANGE needs to juggle: VMOVD inum 4932
	REARRANGE one pattern worked for VMOVD inum 4932
	REARRANGE needs to juggle: VMOVD inum 4935
	REARRANGE one pattern worked for VMOVD inum 4935
	REARRANGE needs to juggle: VMOVD inum 4936
	REARRANGE one pattern worked for VMOVD inum 4936
	REARRANGE needs to juggle: VMOVQ inum 4939
	REARRANGE one pattern worked for VMOVQ inum 4939
	REARRANGE needs to juggle: VMOVQ inum 4940
	REARRANGE one pattern worked for VMOVQ inum 4940
	REARRANGE needs to juggle: VMOVQ inum 4941
	REARRANGE one pattern worked for VMOVQ inum 4941
	REARRANGE needs to juggle: VMOVQ inum 4942
	REARRANGE one pattern worked for VMOVQ inum 4942
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBSS inum=4520  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4521  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSS inum=4522  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4523  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=4931  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4932  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4935  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4936  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4939  iform_input=VMOVQ_MEMq_XMMq_7E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4940  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBSS inum 4520 -- already fine
	SKIPPING VFNMSUBSS inum 4521 -- already fine
	SKIPPING VFNMSUBSS inum 4522 -- already fine
	SKIPPING VFNMSUBSS inum 4523 -- already fine
	REARRANGE needs to juggle: VMOVD inum 4931
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBSS inum 4520
	REARRANGE one pattern worked for VFNMSUBSS inum 4520
	REARRANGE needs to juggle: VFNMSUBSS inum 4521
	REARRANGE one pattern worked for VFNMSUBSS inum 4521
	REARRANGE needs to juggle: VFNMSUBSS inum 4522
	REARRANGE one pattern worked for VFNMSUBSS inum 4522
	REARRANGE needs to juggle: VFNMSUBSS inum 4523
	REARRANGE one pattern worked for VFNMSUBSS inum 4523
	REARRANGE needs to juggle: VMOVD inum 4931
	REARRANGE one pattern worked for VMOVD inum 4931
	REARRANGE needs to juggle: VMOVD inum 4932
	REARRANGE one pattern worked for VMOVD inum 4932
	REARRANGE needs to juggle: VMOVD inum 4935
	REARRANGE one pattern worked for VMOVD inum 4935
	REARRANGE needs to juggle: VMOVD inum 4936
	REARRANGE one pattern worked for VMOVD inum 4936
	REARRANGE needs to juggle: VMOVQ inum 4939
	REARRANGE one pattern worked for VMOVQ inum 4939
	REARRANGE needs to juggle: VMOVQ inum 4940
	REARRANGE one pattern worked for VMOVQ inum 4940
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBSD inum=4524  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4525  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSD inum=4526  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4527  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=4951  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4952  iform_input=VMOVDQA_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4955  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4956  iform_input=VMOVDQA_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4961  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4962  iform_input=VMOVDQU_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4963  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4964  iform_input=VMOVDQU_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBSD inum 4524 -- already fine
	SKIPPING VFNMSUBSD inum 4525 -- already fine
	SKIPPING VFNMSUBSD inum 4526 -- already fine
	SKIPPING VFNMSUBSD inum 4527 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 4951
	REARRANGE one pattern worked for VMOVDQA inum 4951
	REARRANGE needs to juggle: VMOVDQA inum 4952
	REARRANGE one pattern worked for VMOVDQA inum 4952
	REARRANGE needs to juggle: VMOVDQA inum 4955
	REARRANGE one pattern worked for VMOVDQA inum 4955
	REARRANGE needs to juggle: VMOVDQA inum 4956
	REARRANGE one pattern worked for VMOVDQA inum 4956
	REARRANGE needs to juggle: VMOVDQU inum 4961
	REARRANGE one pattern worked for VMOVDQU inum 4961
	REARRANGE needs to juggle: VMOVDQU inum 4962
	REARRANGE one pattern worked for VMOVDQU inum 4962
	REARRANGE needs to juggle: VMOVDQU inum 4963
	REARRANGE one pattern worked for VMOVDQU inum 4963
	REARRANGE needs to juggle: VMOVDQU inum 4964
	REARRANGE one pattern worked for VMOVDQU inum 4964
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBSD inum=4524  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4525  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSD inum=4526  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4527  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=4951  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4952  iform_input=VMOVDQA_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4955  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4956  iform_input=VMOVDQA_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBSD inum 4524 -- already fine
	SKIPPING VFNMSUBSD inum 4525 -- already fine
	SKIPPING VFNMSUBSD inum 4526 -- already fine
	SKIPPING VFNMSUBSD inum 4527 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 4951
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBSD inum 4524
	REARRANGE one pattern worked for VFNMSUBSD inum 4524
	REARRANGE needs to juggle: VFNMSUBSD inum 4525
	REARRANGE one pattern worked for VFNMSUBSD inum 4525
	REARRANGE needs to juggle: VFNMSUBSD inum 4526
	REARRANGE one pattern worked for VFNMSUBSD inum 4526
	REARRANGE needs to juggle: VFNMSUBSD inum 4527
	REARRANGE one pattern worked for VFNMSUBSD inum 4527
	REARRANGE needs to juggle: VMOVDQA inum 4951
	REARRANGE one pattern worked for VMOVDQA inum 4951
	REARRANGE needs to juggle: VMOVDQA inum 4952
	REARRANGE one pattern worked for VMOVDQA inum 4952
	REARRANGE needs to juggle: VMOVDQA inum 4955
	REARRANGE one pattern worked for VMOVDQA inum 4955
	REARRANGE needs to juggle: VMOVDQA inum 4956
	REARRANGE one pattern worked for VMOVDQA inum 4956
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPGATHERDQ inum=5617  iform_input=VPGATHERDQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDQ inum=5618  iform_input=VPGATHERDQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDD inum=5619  iform_input=VPGATHERDD_YMMu32_MEMd_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERDD inum=5620  iform_input=VPGATHERDD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=7043  iform_input=KMOVW_MASKmskw_MASKu16_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVW inum=7044  iform_input=KMOVW_MASKmskw_MEMu16_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=8882  iform_input=KMOVB_MASKmskw_MASKu8_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8883  iform_input=KMOVB_MASKmskw_MEMu8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8887  iform_input=KMOVD_MASKmskw_MASKu32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8888  iform_input=KMOVD_MASKmskw_MEMu32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=8894  iform_input=KMOVQ_MASKmskw_MASKu64_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8895  iform_input=KMOVQ_MASKmskw_MEMu64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPGATHERDQ inum 5617 -- already fine
	SKIPPING VPGATHERDQ inum 5618 -- already fine
	SKIPPING VPGATHERDD inum 5619 -- already fine
	SKIPPING VPGATHERDD inum 5620 -- already fine
	REARRANGE needs to juggle: KMOVW inum 7043
	REARRANGE one pattern worked for KMOVW inum 7043
	REARRANGE needs to juggle: KMOVW inum 7044
	REARRANGE one pattern worked for KMOVW inum 7044
	REARRANGE needs to juggle: KMOVB inum 8882
	REARRANGE one pattern worked for KMOVB inum 8882
	REARRANGE needs to juggle: KMOVB inum 8883
	REARRANGE one pattern worked for KMOVB inum 8883
	REARRANGE needs to juggle: KMOVD inum 8887
	REARRANGE one pattern worked for KMOVD inum 8887
	REARRANGE needs to juggle: KMOVD inum 8888
	REARRANGE one pattern worked for KMOVD inum 8888
	REARRANGE needs to juggle: KMOVQ inum 8894
	REARRANGE one pattern worked for KMOVQ inum 8894
	REARRANGE needs to juggle: KMOVQ inum 8895
	REARRANGE one pattern worked for KMOVQ inum 8895
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPGATHERQQ inum=5621  iform_input=VPGATHERQQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQQ inum=5622  iform_input=VPGATHERQQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERQD inum=5623  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQD inum=5624  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=7045  iform_input=KMOVW_MEMu16_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=8884  iform_input=KMOVB_MEMu8_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8889  iform_input=KMOVD_MEMu32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=8896  iform_input=KMOVQ_MEMu64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPGATHERQQ inum 5621 -- already fine
	SKIPPING VPGATHERQQ inum 5622 -- already fine
	SKIPPING VPGATHERQD inum 5623 -- already fine
	SKIPPING VPGATHERQD inum 5624 -- already fine
	REARRANGE needs to juggle: KMOVW inum 7045
	REARRANGE one pattern worked for KMOVW inum 7045
	REARRANGE needs to juggle: KMOVB inum 8884
	REARRANGE one pattern worked for KMOVB inum 8884
	REARRANGE needs to juggle: KMOVD inum 8889
	REARRANGE one pattern worked for KMOVD inum 8889
	REARRANGE needs to juggle: KMOVQ inum 8896
	REARRANGE one pattern worked for KMOVQ inum 8896
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VGATHERDPD inum=5609  iform_input=VGATHERDPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPD inum=5610  iform_input=VGATHERDPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPS inum=5611  iform_input=VGATHERDPS_YMMf32_MEMf32_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERDPS inum=5612  iform_input=VGATHERDPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=7046  iform_input=KMOVW_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8885  iform_input=KMOVB_MASKmskw_GPR32u32_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8890  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8891  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8897  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VGATHERDPD inum 5609 -- already fine
	SKIPPING VGATHERDPD inum 5610 -- already fine
	SKIPPING VGATHERDPS inum 5611 -- already fine
	SKIPPING VGATHERDPS inum 5612 -- already fine
	REARRANGE needs to juggle: KMOVW inum 7046
	REARRANGE one pattern worked for KMOVW inum 7046
	REARRANGE needs to juggle: KMOVB inum 8885
	REARRANGE one pattern worked for KMOVB inum 8885
	REARRANGE needs to juggle: KMOVD inum 8890
	REARRANGE one pattern worked for KMOVD inum 8890
	REARRANGE needs to juggle: KMOVD inum 8891
	REARRANGE one pattern worked for KMOVD inum 8891
	REARRANGE needs to juggle: KMOVQ inum 8897
	REARRANGE one pattern worked for KMOVQ inum 8897
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=8890  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8891  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8897  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 8890 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8891
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 8890
	REARRANGE one pattern worked for KMOVD inum 8890
	SKIPPING KMOVD inum 8891 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 8897
	REARRANGE one pattern worked for KMOVQ inum 8897
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
VGATHERQPD inum=5613  iform_input=VGATHERQPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPD inum=5614  iform_input=VGATHERQPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERQPS inum=5615  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPS inum=5616  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=7047  iform_input=KMOVW_GPR32u32_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8886  iform_input=KMOVB_GPR32u32_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8892  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8893  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8898  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VGATHERQPD inum 5613 -- already fine
	SKIPPING VGATHERQPD inum 5614 -- already fine
	SKIPPING VGATHERQPS inum 5615 -- already fine
	SKIPPING VGATHERQPS inum 5616 -- already fine
	REARRANGE needs to juggle: KMOVW inum 7047
	REARRANGE one pattern worked for KMOVW inum 7047
	REARRANGE needs to juggle: KMOVB inum 8886
	REARRANGE one pattern worked for KMOVB inum 8886
	REARRANGE needs to juggle: KMOVD inum 8892
	REARRANGE one pattern worked for KMOVD inum 8892
	REARRANGE needs to juggle: KMOVD inum 8893
	REARRANGE one pattern worked for KMOVD inum 8893
	REARRANGE needs to juggle: KMOVQ inum 8898
	REARRANGE one pattern worked for KMOVQ inum 8898
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=8892  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8893  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8898  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 8892 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8893
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 8892
	REARRANGE one pattern worked for KMOVD inum 8892
	SKIPPING KMOVD inum 8893 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 8898
	REARRANGE one pattern worked for KMOVQ inum 8898
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
VFMADD132PD inum=5417  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5418  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PD inum=5419  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5420  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5421  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5422  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5423  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5424  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

KORTESTW inum=7049  iform_input=KORTESTW_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTB inum=8905  iform_input=KORTESTB_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTD inum=8906  iform_input=KORTESTD_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTQ inum=8907  iform_input=KORTESTQ_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VFMADD132PD inum 5417 -- already fine
	SKIPPING VFMADD132PD inum 5418 -- already fine
	SKIPPING VFMADD132PD inum 5419 -- already fine
	SKIPPING VFMADD132PD inum 5420 -- already fine
	SKIPPING VFMADD132PS inum 5421 -- already fine
	SKIPPING VFMADD132PS inum 5422 -- already fine
	SKIPPING VFMADD132PS inum 5423 -- already fine
	SKIPPING VFMADD132PS inum 5424 -- already fine
	REARRANGE needs to juggle: KORTESTW inum 7049
	REARRANGE one pattern worked for KORTESTW inum 7049
	REARRANGE needs to juggle: KORTESTB inum 8905
	REARRANGE one pattern worked for KORTESTB inum 8905
	REARRANGE needs to juggle: KORTESTD inum 8906
	REARRANGE one pattern worked for KORTESTD inum 8906
	REARRANGE needs to juggle: KORTESTQ inum 8907
	REARRANGE one pattern worked for KORTESTQ inum 8907
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPADDUSB inum=5031  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=5032  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSB inum=5667  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=5668  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESENC inum=5397  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENC inum=5398  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENC inum=9151  iform_input=VAESENC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENC inum=9152  iform_input=VAESENC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDUSB inum 5031 -- already fine
	SKIPPING VPADDUSB inum 5032 -- already fine
	SKIPPING VPADDUSB inum 5667 -- already fine
	SKIPPING VPADDUSB inum 5668 -- already fine
	REARRANGE needs to juggle: VAESENC inum 5397
	REARRANGE one pattern worked for VAESENC inum 5397
	REARRANGE needs to juggle: VAESENC inum 5398
	REARRANGE one pattern worked for VAESENC inum 5398
	REARRANGE needs to juggle: VAESENC inum 9151
	REARRANGE one pattern worked for VAESENC inum 9151
	REARRANGE needs to juggle: VAESENC inum 9152
	REARRANGE one pattern worked for VAESENC inum 9152
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPADDUSW inum=5033  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=5034  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSW inum=5669  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=5670  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESENCLAST inum=5399  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENCLAST inum=5400  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENCLAST inum=9153  iform_input=VAESENCLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENCLAST inum=9154  iform_input=VAESENCLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDUSW inum 5033 -- already fine
	SKIPPING VPADDUSW inum 5034 -- already fine
	SKIPPING VPADDUSW inum 5669 -- already fine
	SKIPPING VPADDUSW inum 5670 -- already fine
	REARRANGE needs to juggle: VAESENCLAST inum 5399
	REARRANGE one pattern worked for VAESENCLAST inum 5399
	REARRANGE needs to juggle: VAESENCLAST inum 5400
	REARRANGE one pattern worked for VAESENCLAST inum 5400
	REARRANGE needs to juggle: VAESENCLAST inum 9153
	REARRANGE one pattern worked for VAESENCLAST inum 9153
	REARRANGE needs to juggle: VAESENCLAST inum 9154
	REARRANGE one pattern worked for VAESENCLAST inum 9154
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMAXUB inum=5221  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5222  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMAXUB inum=5713  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5714  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESDEC inum=5401  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDEC inum=5402  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDEC inum=9147  iform_input=VAESDEC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDEC inum=9148  iform_input=VAESDEC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMAXUB inum 5221 -- already fine
	SKIPPING VPMAXUB inum 5222 -- already fine
	SKIPPING VPMAXUB inum 5713 -- already fine
	SKIPPING VPMAXUB inum 5714 -- already fine
	REARRANGE needs to juggle: VAESDEC inum 5401
	REARRANGE one pattern worked for VAESDEC inum 5401
	REARRANGE needs to juggle: VAESDEC inum 5402
	REARRANGE one pattern worked for VAESDEC inum 5402
	REARRANGE needs to juggle: VAESDEC inum 9147
	REARRANGE one pattern worked for VAESDEC inum 9147
	REARRANGE needs to juggle: VAESDEC inum 9148
	REARRANGE one pattern worked for VAESDEC inum 9148
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPANDN inum=4977  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=4978  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPANDN inum=5797  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=5798  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESKEYGENASSIST inum=5395  isa_set=AVXAES pattern len=24
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()   

VAESKEYGENASSIST inum=5396  isa_set=AVXAES pattern len=25
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8()

VAESDECLAST inum=5403  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDECLAST inum=5404  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDECLAST inum=9149  iform_input=VAESDECLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDECLAST inum=9150  iform_input=VAESDECLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPANDN inum 4977 -- already fine
	SKIPPING VPANDN inum 4978 -- already fine
	SKIPPING VPANDN inum 5797 -- already fine
	SKIPPING VPANDN inum 5798 -- already fine
	SKIPPING VAESKEYGENASSIST inum 5395 -- already fine
	SKIPPING VAESKEYGENASSIST inum 5396 -- already fine
	REARRANGE needs to juggle: VAESDECLAST inum 5403
	REARRANGE one pattern worked for VAESDECLAST inum 5403
	REARRANGE needs to juggle: VAESDECLAST inum 5404
	REARRANGE one pattern worked for VAESDECLAST inum 5404
	REARRANGE needs to juggle: VAESDECLAST inum 9149
	REARRANGE one pattern worked for VAESDECLAST inum 9149
	REARRANGE needs to juggle: VAESDECLAST inum 9150
	REARRANGE one pattern worked for VAESDECLAST inum 9150
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VLDDQU inum=4867  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VLDDQU inum=4868  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=1 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

RORX inum=5983  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5984  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5985  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5986  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5987  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5988  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VLDDQU inum 4867 -- already fine
	SKIPPING VLDDQU inum 4868 -- already fine
	REARRANGE needs to juggle: RORX inum 5983
	REARRANGE one pattern worked for RORX inum 5983
	REARRANGE needs to juggle: RORX inum 5984
	REARRANGE one pattern worked for RORX inum 5984
	REARRANGE needs to juggle: RORX inum 5985
	REARRANGE one pattern worked for RORX inum 5985
	REARRANGE needs to juggle: RORX inum 5986
	REARRANGE one pattern worked for RORX inum 5986
	REARRANGE needs to juggle: RORX inum 5987
	REARRANGE one pattern worked for RORX inum 5987
	REARRANGE needs to juggle: RORX inum 5988
	REARRANGE one pattern worked for RORX inum 5988
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 12
Others: 
RORX inum=5983  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5984  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5985  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5986  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5987  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5988  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING RORX inum 5983 -- already fine
	REARRANGE needs to juggle: RORX inum 5984
	REARRANGE one pattern worked for RORX inum 5984
	SKIPPING RORX inum 5985 -- already fine
	REARRANGE needs to juggle: RORX inum 5986
	REARRANGE one pattern worked for RORX inum 5986
	REARRANGE needs to juggle: RORX inum 5987
	REARRANGE one pattern worked for RORX inum 5987
	REARRANGE needs to juggle: RORX inum 5988
	REARRANGE one pattern worked for RORX inum 5988
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSLLD inum=5005  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=5006  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLD inum=5641  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=5642  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=5923  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5924  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5925  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

ANDN inum=5926  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

ANDN inum=5927  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5928  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLD inum 5005 -- already fine
	SKIPPING VPSLLD inum 5006 -- already fine
	SKIPPING VPSLLD inum 5641 -- already fine
	SKIPPING VPSLLD inum 5642 -- already fine
	REARRANGE needs to juggle: ANDN inum 5923
	REARRANGE one pattern worked for ANDN inum 5923
	REARRANGE needs to juggle: ANDN inum 5924
	REARRANGE one pattern worked for ANDN inum 5924
	REARRANGE needs to juggle: ANDN inum 5925
	REARRANGE one pattern worked for ANDN inum 5925
	REARRANGE needs to juggle: ANDN inum 5926
	REARRANGE one pattern worked for ANDN inum 5926
	REARRANGE needs to juggle: ANDN inum 5927
	REARRANGE one pattern worked for ANDN inum 5927
	REARRANGE needs to juggle: ANDN inum 5928
	REARRANGE one pattern worked for ANDN inum 5928
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLD inum=5005  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=5006  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=5923  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5924  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5925  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=5926  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=5927  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5928  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLD inum 5005 -- already fine
	SKIPPING VPSLLD inum 5006 -- already fine
	REARRANGE needs to juggle: ANDN inum 5923
	REARRANGE one pattern worked for ANDN inum 5923
	REARRANGE needs to juggle: ANDN inum 5924
	REARRANGE one pattern worked for ANDN inum 5924
	REARRANGE needs to juggle: ANDN inum 5925
	REARRANGE one pattern worked for ANDN inum 5925
	REARRANGE needs to juggle: ANDN inum 5926
	REARRANGE one pattern worked for ANDN inum 5926
	REARRANGE needs to juggle: ANDN inum 5927
	REARRANGE one pattern worked for ANDN inum 5927
	REARRANGE needs to juggle: ANDN inum 5928
	REARRANGE one pattern worked for ANDN inum 5928
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
ANDN inum=5923  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5924  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5925  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=5926  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=5927  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5928  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING ANDN inum 5923 -- already fine
	REARRANGE needs to juggle: ANDN inum 5924
	REARRANGE one pattern worked for ANDN inum 5924
	SKIPPING ANDN inum 5925 -- already fine
	REARRANGE needs to juggle: ANDN inum 5926
	REARRANGE one pattern worked for ANDN inum 5926
	REARRANGE needs to juggle: ANDN inum 5927
	REARRANGE one pattern worked for ANDN inum 5927
	REARRANGE needs to juggle: ANDN inum 5928
	REARRANGE one pattern worked for ANDN inum 5928
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSLLQ inum=5007  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=5008  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLQ inum=5643  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=5644  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSR inum=5929  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5930  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5931  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5932  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 0 1    n n n

BLSR inum=5933  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5934  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5935  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5936  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5937  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5938  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5939  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5940  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5941  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5942  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5943  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5944  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 1    n n n

BLSI inum=5945  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5946  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLQ inum 5007 -- already fine
	SKIPPING VPSLLQ inum 5008 -- already fine
	SKIPPING VPSLLQ inum 5643 -- already fine
	SKIPPING VPSLLQ inum 5644 -- already fine
	REARRANGE needs to juggle: BLSR inum 5929
	REARRANGE one pattern worked for BLSR inum 5929
	REARRANGE needs to juggle: BLSR inum 5930
	REARRANGE one pattern worked for BLSR inum 5930
	REARRANGE needs to juggle: BLSR inum 5931
	REARRANGE one pattern worked for BLSR inum 5931
	REARRANGE needs to juggle: BLSR inum 5932
	REARRANGE one pattern worked for BLSR inum 5932
	REARRANGE needs to juggle: BLSR inum 5933
	REARRANGE one pattern worked for BLSR inum 5933
	REARRANGE needs to juggle: BLSR inum 5934
	REARRANGE one pattern worked for BLSR inum 5934
	REARRANGE needs to juggle: BLSMSK inum 5935
	REARRANGE one pattern worked for BLSMSK inum 5935
	REARRANGE needs to juggle: BLSMSK inum 5936
	REARRANGE one pattern worked for BLSMSK inum 5936
	REARRANGE needs to juggle: BLSMSK inum 5937
	REARRANGE one pattern worked for BLSMSK inum 5937
	REARRANGE needs to juggle: BLSMSK inum 5938
	REARRANGE one pattern worked for BLSMSK inum 5938
	REARRANGE needs to juggle: BLSMSK inum 5939
	REARRANGE one pattern worked for BLSMSK inum 5939
	REARRANGE needs to juggle: BLSMSK inum 5940
	REARRANGE one pattern worked for BLSMSK inum 5940
	REARRANGE needs to juggle: BLSI inum 5941
	REARRANGE one pattern worked for BLSI inum 5941
	REARRANGE needs to juggle: BLSI inum 5942
	REARRANGE one pattern worked for BLSI inum 5942
	REARRANGE needs to juggle: BLSI inum 5943
	REARRANGE one pattern worked for BLSI inum 5943
	REARRANGE needs to juggle: BLSI inum 5944
	REARRANGE one pattern worked for BLSI inum 5944
	REARRANGE needs to juggle: BLSI inum 5945
	REARRANGE one pattern worked for BLSI inum 5945
	REARRANGE needs to juggle: BLSI inum 5946
	REARRANGE one pattern worked for BLSI inum 5946
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLQ inum=5007  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=5008  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSR inum=5929  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5930  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5931  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5932  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSR inum=5933  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5934  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5935  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5936  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5937  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5938  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5939  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5940  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5941  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5942  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5943  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5944  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSI inum=5945  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5946  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLQ inum 5007 -- already fine
	SKIPPING VPSLLQ inum 5008 -- already fine
	REARRANGE needs to juggle: BLSR inum 5929
	REARRANGE one pattern worked for BLSR inum 5929
	REARRANGE needs to juggle: BLSR inum 5930
	REARRANGE one pattern worked for BLSR inum 5930
	REARRANGE needs to juggle: BLSR inum 5931
	REARRANGE one pattern worked for BLSR inum 5931
	REARRANGE needs to juggle: BLSR inum 5932
	REARRANGE one pattern worked for BLSR inum 5932
	REARRANGE needs to juggle: BLSR inum 5933
	REARRANGE one pattern worked for BLSR inum 5933
	REARRANGE needs to juggle: BLSR inum 5934
	REARRANGE one pattern worked for BLSR inum 5934
	REARRANGE needs to juggle: BLSMSK inum 5935
	REARRANGE one pattern worked for BLSMSK inum 5935
	REARRANGE needs to juggle: BLSMSK inum 5936
	REARRANGE one pattern worked for BLSMSK inum 5936
	REARRANGE needs to juggle: BLSMSK inum 5937
	REARRANGE one pattern worked for BLSMSK inum 5937
	REARRANGE needs to juggle: BLSMSK inum 5938
	REARRANGE one pattern worked for BLSMSK inum 5938
	REARRANGE needs to juggle: BLSMSK inum 5939
	REARRANGE one pattern worked for BLSMSK inum 5939
	REARRANGE needs to juggle: BLSMSK inum 5940
	REARRANGE one pattern worked for BLSMSK inum 5940
	REARRANGE needs to juggle: BLSI inum 5941
	REARRANGE one pattern worked for BLSI inum 5941
	REARRANGE needs to juggle: BLSI inum 5942
	REARRANGE one pattern worked for BLSI inum 5942
	REARRANGE needs to juggle: BLSI inum 5943
	REARRANGE one pattern worked for BLSI inum 5943
	REARRANGE needs to juggle: BLSI inum 5944
	REARRANGE one pattern worked for BLSI inum 5944
	REARRANGE needs to juggle: BLSI inum 5945
	REARRANGE one pattern worked for BLSI inum 5945
	REARRANGE needs to juggle: BLSI inum 5946
	REARRANGE one pattern worked for BLSI inum 5946
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
BLSR inum=5929  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5930  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5931  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5932  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSR inum=5933  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5934  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=5935  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5936  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5937  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5938  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5939  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5940  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5941  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5942  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5943  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5944  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSI inum=5945  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5946  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BLSR inum 5929 -- already fine
	REARRANGE needs to juggle: BLSR inum 5930
	REARRANGE one pattern worked for BLSR inum 5930
	SKIPPING BLSR inum 5931 -- already fine
	REARRANGE needs to juggle: BLSR inum 5932
	REARRANGE one pattern worked for BLSR inum 5932
	REARRANGE needs to juggle: BLSR inum 5933
	REARRANGE one pattern worked for BLSR inum 5933
	REARRANGE needs to juggle: BLSR inum 5934
	REARRANGE one pattern worked for BLSR inum 5934
	SKIPPING BLSMSK inum 5935 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 5936
	REARRANGE one pattern worked for BLSMSK inum 5936
	SKIPPING BLSMSK inum 5937 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 5938
	REARRANGE one pattern worked for BLSMSK inum 5938
	REARRANGE needs to juggle: BLSMSK inum 5939
	REARRANGE one pattern worked for BLSMSK inum 5939
	REARRANGE needs to juggle: BLSMSK inum 5940
	REARRANGE one pattern worked for BLSMSK inum 5940
	SKIPPING BLSI inum 5941 -- already fine
	REARRANGE needs to juggle: BLSI inum 5942
	REARRANGE one pattern worked for BLSI inum 5942
	SKIPPING BLSI inum 5943 -- already fine
	REARRANGE needs to juggle: BLSI inum 5944
	REARRANGE one pattern worked for BLSI inum 5944
	REARRANGE needs to juggle: BLSI inum 5945
	REARRANGE one pattern worked for BLSI inum 5945
	REARRANGE needs to juggle: BLSI inum 5946
	REARRANGE one pattern worked for BLSI inum 5946
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPMADDWD inum=5239  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5240  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMADDWD inum=5703  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5704  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

PDEP inum=5911  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5912  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5913  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PDEP inum=5914  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PDEP inum=5915  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5916  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5917  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5918  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5919  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PEXT inum=5920  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PEXT inum=5921  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5922  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=5947  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5948  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5949  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BZHI inum=5950  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BZHI inum=5951  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5952  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMADDWD inum 5239 -- already fine
	SKIPPING VPMADDWD inum 5240 -- already fine
	SKIPPING VPMADDWD inum 5703 -- already fine
	SKIPPING VPMADDWD inum 5704 -- already fine
	REARRANGE needs to juggle: PDEP inum 5911
	REARRANGE one pattern worked for PDEP inum 5911
	REARRANGE needs to juggle: PDEP inum 5912
	REARRANGE one pattern worked for PDEP inum 5912
	REARRANGE needs to juggle: PDEP inum 5913
	REARRANGE one pattern worked for PDEP inum 5913
	REARRANGE needs to juggle: PDEP inum 5914
	REARRANGE one pattern worked for PDEP inum 5914
	REARRANGE needs to juggle: PDEP inum 5915
	REARRANGE one pattern worked for PDEP inum 5915
	REARRANGE needs to juggle: PDEP inum 5916
	REARRANGE one pattern worked for PDEP inum 5916
	REARRANGE needs to juggle: PEXT inum 5917
	REARRANGE one pattern worked for PEXT inum 5917
	REARRANGE needs to juggle: PEXT inum 5918
	REARRANGE one pattern worked for PEXT inum 5918
	REARRANGE needs to juggle: PEXT inum 5919
	REARRANGE one pattern worked for PEXT inum 5919
	REARRANGE needs to juggle: PEXT inum 5920
	REARRANGE one pattern worked for PEXT inum 5920
	REARRANGE needs to juggle: PEXT inum 5921
	REARRANGE one pattern worked for PEXT inum 5921
	REARRANGE needs to juggle: PEXT inum 5922
	REARRANGE one pattern worked for PEXT inum 5922
	REARRANGE needs to juggle: BZHI inum 5947
	REARRANGE one pattern worked for BZHI inum 5947
	REARRANGE needs to juggle: BZHI inum 5948
	REARRANGE one pattern worked for BZHI inum 5948
	REARRANGE needs to juggle: BZHI inum 5949
	REARRANGE one pattern worked for BZHI inum 5949
	REARRANGE needs to juggle: BZHI inum 5950
	REARRANGE one pattern worked for BZHI inum 5950
	REARRANGE needs to juggle: BZHI inum 5951
	REARRANGE one pattern worked for BZHI inum 5951
	REARRANGE needs to juggle: BZHI inum 5952
	REARRANGE one pattern worked for BZHI inum 5952
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPMADDWD inum=5239  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5240  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

PDEP inum=5911  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5912  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5913  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    MODE!=2 1 1 MOD=3    r r r n    n n

PDEP inum=5914  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PDEP inum=5915  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5916  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5917  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5918  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5919  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    MODE!=2 1 1 MOD=3    r r r n    n n

PEXT inum=5920  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5921  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5922  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=5947  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5948  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5949  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    r r r n    n n

BZHI inum=5950  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=5951  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5952  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPMADDWD inum 5239 -- already fine
	SKIPPING VPMADDWD inum 5240 -- already fine
	REARRANGE needs to juggle: PDEP inum 5911
	REARRANGE one pattern worked for PDEP inum 5911
	REARRANGE needs to juggle: PDEP inum 5912
	REARRANGE one pattern worked for PDEP inum 5912
	REARRANGE needs to juggle: PDEP inum 5913
	REARRANGE one pattern worked for PDEP inum 5913
	REARRANGE needs to juggle: PDEP inum 5914
	REARRANGE one pattern worked for PDEP inum 5914
	REARRANGE needs to juggle: PDEP inum 5915
	REARRANGE one pattern worked for PDEP inum 5915
	REARRANGE needs to juggle: PDEP inum 5916
	REARRANGE one pattern worked for PDEP inum 5916
	REARRANGE needs to juggle: PEXT inum 5917
	REARRANGE one pattern worked for PEXT inum 5917
	REARRANGE needs to juggle: PEXT inum 5918
	REARRANGE one pattern worked for PEXT inum 5918
	REARRANGE needs to juggle: PEXT inum 5919
	REARRANGE one pattern worked for PEXT inum 5919
	REARRANGE needs to juggle: PEXT inum 5920
	REARRANGE one pattern worked for PEXT inum 5920
	REARRANGE needs to juggle: PEXT inum 5921
	REARRANGE one pattern worked for PEXT inum 5921
	REARRANGE needs to juggle: PEXT inum 5922
	REARRANGE one pattern worked for PEXT inum 5922
	REARRANGE needs to juggle: BZHI inum 5947
	REARRANGE one pattern worked for BZHI inum 5947
	REARRANGE needs to juggle: BZHI inum 5948
	REARRANGE one pattern worked for BZHI inum 5948
	REARRANGE needs to juggle: BZHI inum 5949
	REARRANGE one pattern worked for BZHI inum 5949
	REARRANGE needs to juggle: BZHI inum 5950
	REARRANGE one pattern worked for BZHI inum 5950
	REARRANGE needs to juggle: BZHI inum 5951
	REARRANGE one pattern worked for BZHI inum 5951
	REARRANGE needs to juggle: BZHI inum 5952
	REARRANGE one pattern worked for BZHI inum 5952
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
PDEP inum=5911  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5912  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5913  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

PDEP inum=5914  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PDEP inum=5915  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5916  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PDEP inum 5911 -- already fine
	REARRANGE needs to juggle: PDEP inum 5912
	REARRANGE one pattern worked for PDEP inum 5912
	SKIPPING PDEP inum 5913 -- already fine
	REARRANGE needs to juggle: PDEP inum 5914
	REARRANGE one pattern worked for PDEP inum 5914
	REARRANGE needs to juggle: PDEP inum 5915
	REARRANGE one pattern worked for PDEP inum 5915
	REARRANGE needs to juggle: PDEP inum 5916
	REARRANGE one pattern worked for PDEP inum 5916
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 12
Others: 
PEXT inum=5917  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5918  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5919  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

PEXT inum=5920  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5921  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5922  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PEXT inum 5917 -- already fine
	REARRANGE needs to juggle: PEXT inum 5918
	REARRANGE one pattern worked for PEXT inum 5918
	SKIPPING PEXT inum 5919 -- already fine
	REARRANGE needs to juggle: PEXT inum 5920
	REARRANGE one pattern worked for PEXT inum 5920
	REARRANGE needs to juggle: PEXT inum 5921
	REARRANGE one pattern worked for PEXT inum 5921
	REARRANGE needs to juggle: PEXT inum 5922
	REARRANGE one pattern worked for PEXT inum 5922
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 12
Others: 
BZHI inum=5947  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5948  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5949  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

BZHI inum=5950  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=5951  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5952  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BZHI inum 5947 -- already fine
	REARRANGE needs to juggle: BZHI inum 5948
	REARRANGE one pattern worked for BZHI inum 5948
	SKIPPING BZHI inum 5949 -- already fine
	REARRANGE needs to juggle: BZHI inum 5950
	REARRANGE one pattern worked for BZHI inum 5950
	REARRANGE needs to juggle: BZHI inum 5951
	REARRANGE one pattern worked for BZHI inum 5951
	REARRANGE needs to juggle: BZHI inum 5952
	REARRANGE one pattern worked for BZHI inum 5952
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSADBW inum=5081  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=5082  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSADBW inum=5745  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=5746  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

MULX inum=5977  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

MULX inum=5978  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

MULX inum=5979  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

MULX inum=5980  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=5981  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5982  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSADBW inum 5081 -- already fine
	SKIPPING VPSADBW inum 5082 -- already fine
	SKIPPING VPSADBW inum 5745 -- already fine
	SKIPPING VPSADBW inum 5746 -- already fine
	REARRANGE needs to juggle: MULX inum 5977
	REARRANGE one pattern worked for MULX inum 5977
	REARRANGE needs to juggle: MULX inum 5978
	REARRANGE one pattern worked for MULX inum 5978
	REARRANGE needs to juggle: MULX inum 5979
	REARRANGE one pattern worked for MULX inum 5979
	REARRANGE needs to juggle: MULX inum 5980
	REARRANGE one pattern worked for MULX inum 5980
	REARRANGE needs to juggle: MULX inum 5981
	REARRANGE one pattern worked for MULX inum 5981
	REARRANGE needs to juggle: MULX inum 5982
	REARRANGE one pattern worked for MULX inum 5982
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 12
Others: 
MULX inum=5977  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

MULX inum=5978  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5979  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

MULX inum=5980  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=5981  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5982  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING MULX inum 5977 -- already fine
	REARRANGE needs to juggle: MULX inum 5978
	REARRANGE one pattern worked for MULX inum 5978
	SKIPPING MULX inum 5979 -- already fine
	REARRANGE needs to juggle: MULX inum 5980
	REARRANGE one pattern worked for MULX inum 5980
	REARRANGE needs to juggle: MULX inum 5981
	REARRANGE one pattern worked for MULX inum 5981
	REARRANGE needs to juggle: MULX inum 5982
	REARRANGE one pattern worked for MULX inum 5982
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 11
Others: 
BEXTR inum=5953  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BEXTR inum=5954  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=5955  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BEXTR inum=5956  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BEXTR inum=5957  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=5958  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BEXTR inum 5953 -- already fine
	REARRANGE needs to juggle: BEXTR inum 5954
	REARRANGE one pattern worked for BEXTR inum 5954
	SKIPPING BEXTR inum 5955 -- already fine
	REARRANGE needs to juggle: BEXTR inum 5956
	REARRANGE one pattern worked for BEXTR inum 5956
	REARRANGE needs to juggle: BEXTR inum 5957
	REARRANGE one pattern worked for BEXTR inum 5957
	REARRANGE needs to juggle: BEXTR inum 5958
	REARRANGE one pattern worked for BEXTR inum 5958
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHLX inum=5959  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHLX inum=5960  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=5961  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHLX inum=5962  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHLX inum=5963  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=5964  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHLX inum 5959 -- already fine
	REARRANGE needs to juggle: SHLX inum 5960
	REARRANGE one pattern worked for SHLX inum 5960
	SKIPPING SHLX inum 5961 -- already fine
	REARRANGE needs to juggle: SHLX inum 5962
	REARRANGE one pattern worked for SHLX inum 5962
	REARRANGE needs to juggle: SHLX inum 5963
	REARRANGE one pattern worked for SHLX inum 5963
	REARRANGE needs to juggle: SHLX inum 5964
	REARRANGE one pattern worked for SHLX inum 5964
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SARX inum=5965  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SARX inum=5966  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=5967  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SARX inum=5968  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SARX inum=5969  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=5970  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SARX inum 5965 -- already fine
	REARRANGE needs to juggle: SARX inum 5966
	REARRANGE one pattern worked for SARX inum 5966
	SKIPPING SARX inum 5967 -- already fine
	REARRANGE needs to juggle: SARX inum 5968
	REARRANGE one pattern worked for SARX inum 5968
	REARRANGE needs to juggle: SARX inum 5969
	REARRANGE one pattern worked for SARX inum 5969
	REARRANGE needs to juggle: SARX inum 5970
	REARRANGE one pattern worked for SARX inum 5970
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHRX inum=5971  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHRX inum=5972  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=5973  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHRX inum=5974  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHRX inum=5975  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=5976  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHRX inum 5971 -- already fine
	REARRANGE needs to juggle: SHRX inum 5972
	REARRANGE one pattern worked for SHRX inum 5972
	SKIPPING SHRX inum 5973 -- already fine
	REARRANGE needs to juggle: SHRX inum 5974
	REARRANGE one pattern worked for SHRX inum 5974
	REARRANGE needs to juggle: SHRX inum 5975
	REARRANGE one pattern worked for SHRX inum 5975
	REARRANGE needs to juggle: SHRX inum 5976
	REARRANGE one pattern worked for SHRX inum 5976
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 22
Others: 
VPEXTRD inum=8054  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=29
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0    UIMM8()

VPEXTRD inum=8055  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

VPEXTRQ inum=8058  iform_input=VPEXTRQ_GPR64u64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 8054 -- already fine
	SKIPPING VPEXTRD inum 8055 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 8058
	REARRANGE one pattern worked for VPEXTRQ inum 8058
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VPEXTRD inum=8056  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=32
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8() ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

VPEXTRD inum=8057  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_WRITER_STORE()

VPEXTRQ inum=8059  iform_input=VPEXTRQ_MEMu64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_64_BITS()    NELEM_GPR_WRITER_STORE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 8056 -- already fine
	SKIPPING VPEXTRD inum 8057 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 8059
	REARRANGE one pattern worked for VPEXTRQ inum 8059
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VPINSRD inum=8074  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=26
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 ZEROING=0    MASK=0 UIMM8()

VPINSRD inum=8075  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    ZEROING=0 MASK=0 UIMM8()

VPINSRQ inum=8078  iform_input=VPINSRQ_XMMu64_XMMu64_GPR64u64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    ZEROING=0 MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPINSRD inum 8074 -- already fine
	SKIPPING VPINSRD inum 8075 -- already fine
	REARRANGE needs to juggle: VPINSRQ inum 8078
	REARRANGE one pattern worked for VPINSRQ inum 8078
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VPINSRD inum=8076  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_READER()

VPINSRD inum=8077  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 ZEROING=0 MASK=0 UIMM8()    ESIZE_32_BITS() NELEM_GPR_READER()

VPINSRQ inum=8079  iform_input=VPINSRQ_XMMu64_XMMu64_MEMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 ZEROING=0 MASK=0 UIMM8()    ESIZE_64_BITS() NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPINSRD inum 8076 -- already fine
	SKIPPING VPINSRD inum 8077 -- already fine
	REARRANGE needs to juggle: VPINSRQ inum 8079
	REARRANGE one pattern worked for VPINSRQ inum 8079
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VCVTSI2SH inum=9366  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=26
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=0 MODE=2    ZEROING=0 MASK=0

VCVTSI2SH inum=9369  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=25
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() MODE!=2 ZEROING=0    MASK=0

VCVTSI2SH inum=9372  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR64i64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=26
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=1 MODE=2    ZEROING=0 MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSI2SH inum 9366 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 9369
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSI2SH inum 9366
	REARRANGE one pattern worked for VCVTSI2SH inum 9366
	SKIPPING VCVTSI2SH inum 9369 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 9372
	REARRANGE one pattern worked for VCVTSI2SH inum 9372
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VCVTSI2SH inum=9367  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() REXW=0    MODE=2 ZEROING=0 MASK=0

VCVTSI2SH inum=9370  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=26
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() MODE!=2    ZEROING=0 MASK=0

VCVTSI2SH inum=9373  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR64i64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() REXW=1    MODE=2 ZEROING=0 MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSI2SH inum 9367 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 9370
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSI2SH inum 9367
	REARRANGE one pattern worked for VCVTSI2SH inum 9367
	SKIPPING VCVTSI2SH inum 9370 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 9373
	REARRANGE one pattern worked for VCVTSI2SH inum 9373
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 23
Others: 
VCVTSI2SH inum=9368  iform_input=VCVTSI2SH_XMMf16_XMMf16_MEMi32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=0    MODE=2 ZEROING=0 MASK=0 ESIZE_32_BITS()    NELEM_GPR_READER()

VCVTSI2SH inum=9371  iform_input=VCVTSI2SH_XMMf16_XMMf16_MEMi32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=28
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() MODE!=2    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()   

VCVTSI2SH inum=9374  iform_input=VCVTSI2SH_XMMf16_XMMf16_MEMi64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=1    MODE=2 ZEROING=0 MASK=0 ESIZE_64_BITS()    NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSI2SH inum 9368 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 9371
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSI2SH inum 9368
	REARRANGE one pattern worked for VCVTSI2SH inum 9368
	SKIPPING VCVTSI2SH inum 9371 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 9374
	REARRANGE one pattern worked for VCVTSI2SH inum 9374
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VCVTTSH2SI inum=9420  iform_input=VCVTTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=0 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

VCVTTSH2SI inum=9423  iform_input=VCVTTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0    REXRR=0

VCVTTSH2SI inum=9426  iform_input=VCVTTSH2SI_GPR64i64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2SI inum 9420 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 9423
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2SI inum 9420
	REARRANGE one pattern worked for VCVTTSH2SI inum 9420
	SKIPPING VCVTTSH2SI inum 9423 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 9426
	REARRANGE one pattern worked for VCVTTSH2SI inum 9426
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VCVTTSH2SI inum=9421  iform_input=VCVTTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() SAE() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 REXRR=0

VCVTTSH2SI inum=9424  iform_input=VCVTTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() SAE() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

VCVTTSH2SI inum=9427  iform_input=VCVTTSH2SI_GPR64i64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() SAE() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2SI inum 9421 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 9424
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2SI inum 9421
	REARRANGE one pattern worked for VCVTTSH2SI inum 9421
	SKIPPING VCVTTSH2SI inum 9424 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 9427
	REARRANGE one pattern worked for VCVTTSH2SI inum 9427
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 23
Others: 
VCVTTSH2SI inum=9422  iform_input=VCVTTSH2SI_GPR32i32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    REXRR=0

VCVTTSH2SI inum=9425  iform_input=VCVTTSH2SI_GPR32i32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D() REXRR=0   

VCVTTSH2SI inum=9428  iform_input=VCVTTSH2SI_GPR64i64_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2SI inum 9422 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 9425
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2SI inum 9422
	REARRANGE one pattern worked for VCVTTSH2SI inum 9422
	SKIPPING VCVTTSH2SI inum 9425 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 9428
	REARRANGE one pattern worked for VCVTTSH2SI inum 9428
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VCVTSH2SI inum=9345  iform_input=VCVTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=0 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

VCVTSH2SI inum=9348  iform_input=VCVTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0    REXRR=0

VCVTSH2SI inum=9351  iform_input=VCVTSH2SI_GPR64i64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2SI inum 9345 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 9348
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2SI inum 9345
	REARRANGE one pattern worked for VCVTSH2SI inum 9345
	SKIPPING VCVTSH2SI inum 9348 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 9351
	REARRANGE one pattern worked for VCVTSH2SI inum 9351
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VCVTSH2SI inum=9346  iform_input=VCVTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 REXRR=0

VCVTSH2SI inum=9349  iform_input=VCVTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

VCVTSH2SI inum=9352  iform_input=VCVTSH2SI_GPR64i64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2SI inum 9346 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 9349
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2SI inum 9346
	REARRANGE one pattern worked for VCVTSH2SI inum 9346
	SKIPPING VCVTSH2SI inum 9349 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 9352
	REARRANGE one pattern worked for VCVTSH2SI inum 9352
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 23
Others: 
VCVTSH2SI inum=9347  iform_input=VCVTSH2SI_GPR32i32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    REXRR=0

VCVTSH2SI inum=9350  iform_input=VCVTSH2SI_GPR32i32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D() REXRR=0   

VCVTSH2SI inum=9353  iform_input=VCVTSH2SI_GPR64i64_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2SI inum 9347 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 9350
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2SI inum 9347
	REARRANGE one pattern worked for VCVTSH2SI inum 9347
	SKIPPING VCVTSH2SI inum 9350 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 9353
	REARRANGE one pattern worked for VCVTSH2SI inum 9353
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VMOVD inum=6614  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=28
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0   

VMOVD inum=6615  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVQ inum=6654  iform_input=VMOVQ_XMMu64_GPR64u64_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6614 -- already fine
	SKIPPING VMOVD inum 6615 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6654
	REARRANGE one pattern worked for VMOVQ inum 6654
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VMOVD inum=6616  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=31
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()

VMOVD inum=6617  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()   

VMOVQ inum=6655  iform_input=VMOVQ_XMMu64_MEMu64_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_64_BITS() NELEM_GPR_READER()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6616 -- already fine
	SKIPPING VMOVD inum 6617 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6655
	REARRANGE one pattern worked for VMOVQ inum 6655
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VCVTTSH2USI inum=9429  iform_input=VCVTTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=0 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

VCVTTSH2USI inum=9432  iform_input=VCVTTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0    REXRR=0

VCVTTSH2USI inum=9435  iform_input=VCVTTSH2USI_GPR64u64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2USI inum 9429 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 9432
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2USI inum 9429
	REARRANGE one pattern worked for VCVTTSH2USI inum 9429
	SKIPPING VCVTTSH2USI inum 9432 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 9435
	REARRANGE one pattern worked for VCVTTSH2USI inum 9435
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VCVTTSH2USI inum=9430  iform_input=VCVTTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() SAE() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 REXRR=0

VCVTTSH2USI inum=9433  iform_input=VCVTTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() SAE() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

VCVTTSH2USI inum=9436  iform_input=VCVTTSH2USI_GPR64u64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() SAE() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2USI inum 9430 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 9433
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2USI inum 9430
	REARRANGE one pattern worked for VCVTTSH2USI inum 9430
	SKIPPING VCVTTSH2USI inum 9433 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 9436
	REARRANGE one pattern worked for VCVTTSH2USI inum 9436
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 23
Others: 
VCVTTSH2USI inum=9431  iform_input=VCVTTSH2USI_GPR32u32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    REXRR=0

VCVTTSH2USI inum=9434  iform_input=VCVTTSH2USI_GPR32u32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D() REXRR=0   

VCVTTSH2USI inum=9437  iform_input=VCVTTSH2USI_GPR64u64_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2USI inum 9431 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 9434
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2USI inum 9431
	REARRANGE one pattern worked for VCVTTSH2USI inum 9431
	SKIPPING VCVTTSH2USI inum 9434 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 9437
	REARRANGE one pattern worked for VCVTTSH2USI inum 9437
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VCVTSH2USI inum=9357  iform_input=VCVTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=0 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

VCVTSH2USI inum=9360  iform_input=VCVTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0    REXRR=0

VCVTSH2USI inum=9363  iform_input=VCVTSH2USI_GPR64u64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2USI inum 9357 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 9360
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2USI inum 9357
	REARRANGE one pattern worked for VCVTSH2USI inum 9357
	SKIPPING VCVTSH2USI inum 9360 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 9363
	REARRANGE one pattern worked for VCVTSH2USI inum 9363
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VCVTSH2USI inum=9358  iform_input=VCVTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 REXRR=0

VCVTSH2USI inum=9361  iform_input=VCVTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 REXRR=0

VCVTSH2USI inum=9364  iform_input=VCVTSH2USI_GPR64u64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2USI inum 9358 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 9361
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2USI inum 9358
	REARRANGE one pattern worked for VCVTSH2USI inum 9358
	SKIPPING VCVTSH2USI inum 9361 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 9364
	REARRANGE one pattern worked for VCVTSH2USI inum 9364
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 23
Others: 
VCVTSH2USI inum=9359  iform_input=VCVTSH2USI_GPR32u32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    REXRR=0

VCVTSH2USI inum=9362  iform_input=VCVTSH2USI_GPR32u32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D() REXRR=0   

VCVTSH2USI inum=9365  iform_input=VCVTSH2USI_GPR64u64_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    REXRR=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2USI inum 9359 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 9362
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2USI inum 9359
	REARRANGE one pattern worked for VCVTSH2USI inum 9359
	SKIPPING VCVTSH2USI inum 9362 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 9365
	REARRANGE one pattern worked for VCVTSH2USI inum 9365
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VCVTUSI2SH inum=9452  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=0 MODE=2    ZEROING=0 MASK=0

VCVTUSI2SH inum=9455  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=25
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() MODE!=2 ZEROING=0    MASK=0

VCVTUSI2SH inum=9458  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR64u64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 r    r r n n    n FIX_ROUND_LEN128() REXW=1 MODE=2    ZEROING=0 MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTUSI2SH inum 9452 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 9455
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTUSI2SH inum 9452
	REARRANGE one pattern worked for VCVTUSI2SH inum 9452
	SKIPPING VCVTUSI2SH inum 9455 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 9458
	REARRANGE one pattern worked for VCVTUSI2SH inum 9458
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VCVTUSI2SH inum=9453  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() REXW=0    MODE=2 ZEROING=0 MASK=0

VCVTUSI2SH inum=9456  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() MODE!=2    ZEROING=0 MASK=0

VCVTUSI2SH inum=9459  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR64u64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 r    r r n n    n FIX_ROUND_LEN128() AVX512_ROUND() REXW=1    MODE=2 ZEROING=0 MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTUSI2SH inum 9453 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 9456
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTUSI2SH inum 9453
	REARRANGE one pattern worked for VCVTUSI2SH inum 9453
	SKIPPING VCVTUSI2SH inum 9456 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 9459
	REARRANGE one pattern worked for VCVTUSI2SH inum 9459
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 23
Others: 
VCVTUSI2SH inum=9454  iform_input=VCVTUSI2SH_XMMf16_XMMf16_MEMu32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=0    MODE=2 ZEROING=0 MASK=0 ESIZE_32_BITS()    NELEM_GPR_READER()

VCVTUSI2SH inum=9457  iform_input=VCVTUSI2SH_XMMf16_XMMf16_MEMu32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() MODE!=2    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()   

VCVTUSI2SH inum=9460  iform_input=VCVTUSI2SH_XMMf16_XMMf16_MEMu64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() FIX_ROUND_LEN128() REXW=1    MODE=2 ZEROING=0 MASK=0 ESIZE_64_BITS()    NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTUSI2SH inum 9454 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 9457
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTUSI2SH inum 9454
	REARRANGE one pattern worked for VCVTUSI2SH inum 9454
	SKIPPING VCVTUSI2SH inum 9457 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 9460
	REARRANGE one pattern worked for VCVTUSI2SH inum 9460
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VPBROADCASTD inum=7845  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=7846  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTQ inum=7857  iform_input=VPBROADCASTQ_XMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 7845 -- already fine
	SKIPPING VPBROADCASTD inum 7846 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 7857
	REARRANGE one pattern worked for VPBROADCASTQ inum 7857
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 22
Others: 
VPBROADCASTD inum=7849  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=7850  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTQ inum=7860  iform_input=VPBROADCASTQ_YMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 7849 -- already fine
	SKIPPING VPBROADCASTD inum 7850 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 7860
	REARRANGE one pattern worked for VPBROADCASTQ inum 7860
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 22
Others: 
VMOVD inum=6618  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0   

VMOVD inum=6619  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVQ inum=6656  iform_input=VMOVQ_GPR64u64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6618 -- already fine
	SKIPPING VMOVD inum 6619 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6656
	REARRANGE one pattern worked for VMOVQ inum 6656
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VMOVD inum=6620  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()

VMOVD inum=6621  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

VMOVQ inum=6657  iform_input=VMOVQ_MEMu64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_64_BITS() NELEM_GPR_WRITER_STORE()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 6620 -- already fine
	SKIPPING VMOVD inum 6621 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 6657
	REARRANGE one pattern worked for VMOVQ inum 6657
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
[NUMBER OF CONVERT PATTERNS] 5
FE:EMIT_FILE obj/xed-operand-convert-init.c
emit_iclass_enum_info
FE:EMIT_FILE obj/xed-iclass-enum.txt
FE:EMIT_FILE obj/xed-iclass-enum.c
FE:EMIT_FILE obj/xed-iclass-enum.h
NOREP KEYS: [0, 112, 113, 115, 117, 291, 292, 295, 400, 401, 402, 403, 456, 457, 461, 463, 498, 499, 500, 761, 762, 763, 764, 819, 820, 821, 822, 1741]
REP KEYS: [696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738]
key - 696
h(x) = linear(x - 696)
FOUND PERFECT HASH FUNCTION FOR repinst
((11*key % 79) % 56)
x = Sigma(Ti << bit_shift)
FKS(x) = (11x mod 79) mod 56
FOUND PERFECT HASH FUNCTION FOR norepinst
FE:EMIT_FILE obj/xed-rep-map.c
FE:EMIT_FILE obj/xed-iform-enum.txt
FE:EMIT_FILE obj/xed-iform-enum.c
FE:EMIT_FILE obj/xed-iform-enum.h
FE:EMIT_FILE obj/xed-iformfl-enum.txt
FE:EMIT_FILE obj/xed-iformfl-enum.c
FE:EMIT_FILE obj/xed-iformfl-enum.h
FE:EMIT_FILE obj/xed-iform-max.c
FE:EMIT_FILE obj/xed-iclass-string.c
[DUPLICATE IFORM] FLDENV_MEMmem14
[DUPLICATE IFORM] FLDENV_MEMmem14
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem14
[DUPLICATE IFORM] FNSTENV_MEMmem14
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FRSTOR_MEMmem94
[DUPLICATE IFORM] FRSTOR_MEMmem94
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem94
[DUPLICATE IFORM] FNSAVE_MEMmem94
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] JMP_RELBRb
[DUPLICATE IFORM] CMPXCHG8B_LOCK_MEMq
[DUPLICATE IFORM] CMPXCHG8B_MEMq
[DUPLICATE IFORM] NOP_90
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1A
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] PUSHA
[DUPLICATE IFORM] PUSHAD
[DUPLICATE IFORM] POPA
[DUPLICATE IFORM] POPAD
[DUPLICATE IFORM] BOUND_GPRv_MEMa16
[DUPLICATE IFORM] BOUND_GPRv_MEMa32
[DUPLICATE IFORM] REP_INSB
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] INSW
[DUPLICATE IFORM] INSW
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] REP_OUTSB
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] OUTSW
[DUPLICATE IFORM] OUTSW
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] JO_RELBRb
[DUPLICATE IFORM] JNO_RELBRb
[DUPLICATE IFORM] JB_RELBRb
[DUPLICATE IFORM] JNB_RELBRb
[DUPLICATE IFORM] JZ_RELBRb
[DUPLICATE IFORM] JNZ_RELBRb
[DUPLICATE IFORM] JBE_RELBRb
[DUPLICATE IFORM] JNBE_RELBRb
[DUPLICATE IFORM] JS_RELBRb
[DUPLICATE IFORM] JNS_RELBRb
[DUPLICATE IFORM] JP_RELBRb
[DUPLICATE IFORM] JNP_RELBRb
[DUPLICATE IFORM] JL_RELBRb
[DUPLICATE IFORM] JNL_RELBRb
[DUPLICATE IFORM] JLE_RELBRb
[DUPLICATE IFORM] JNLE_RELBRb
[DUPLICATE IFORM] XCHG_MEMb_GPR8
[DUPLICATE IFORM] XCHG_MEMv_GPRv
[DUPLICATE IFORM] XCHG_GPRv_OrAX
[DUPLICATE IFORM] CBW
[DUPLICATE IFORM] CBW
[DUPLICATE IFORM] CWDE
[DUPLICATE IFORM] CWDE
[DUPLICATE IFORM] CWD
[DUPLICATE IFORM] CWD
[DUPLICATE IFORM] CDQ
[DUPLICATE IFORM] CDQ
[DUPLICATE IFORM] PUSHF
[DUPLICATE IFORM] PUSHF
[DUPLICATE IFORM] PUSHFD
[DUPLICATE IFORM] PUSHFQ
[DUPLICATE IFORM] POPF
[DUPLICATE IFORM] POPF
[DUPLICATE IFORM] POPFD
[DUPLICATE IFORM] POPFQ
[DUPLICATE IFORM] REP_MOVSB
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] MOVSW
[DUPLICATE IFORM] MOVSW
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] MOVSD
[DUPLICATE IFORM] MOVSD
[DUPLICATE IFORM] REP_MOVSQ
[DUPLICATE IFORM] REPE_CMPSW
[DUPLICATE IFORM] REPE_CMPSW
[DUPLICATE IFORM] REPNE_CMPSW
[DUPLICATE IFORM] REPNE_CMPSW
[DUPLICATE IFORM] CMPSW
[DUPLICATE IFORM] CMPSW
[DUPLICATE IFORM] REPE_CMPSD
[DUPLICATE IFORM] REPE_CMPSD
[DUPLICATE IFORM] REPNE_CMPSD
[DUPLICATE IFORM] REPNE_CMPSD
[DUPLICATE IFORM] CMPSD
[DUPLICATE IFORM] CMPSD
[DUPLICATE IFORM] REP_STOSB
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] STOSW
[DUPLICATE IFORM] STOSW
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] STOSD
[DUPLICATE IFORM] STOSD
[DUPLICATE IFORM] REP_STOSQ
[DUPLICATE IFORM] REP_LODSB
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] LODSW
[DUPLICATE IFORM] LODSW
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] LODSD
[DUPLICATE IFORM] LODSD
[DUPLICATE IFORM] REP_LODSQ
[DUPLICATE IFORM] REPE_SCASW
[DUPLICATE IFORM] REPE_SCASW
[DUPLICATE IFORM] REPNE_SCASW
[DUPLICATE IFORM] REPNE_SCASW
[DUPLICATE IFORM] SCASW
[DUPLICATE IFORM] SCASW
[DUPLICATE IFORM] REPE_SCASD
[DUPLICATE IFORM] REPE_SCASD
[DUPLICATE IFORM] REPNE_SCASD
[DUPLICATE IFORM] REPNE_SCASD
[DUPLICATE IFORM] SCASD
[DUPLICATE IFORM] SCASD
[DUPLICATE IFORM] IRET
[DUPLICATE IFORM] IRET
[DUPLICATE IFORM] IRETD
[DUPLICATE IFORM] IRETD
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] JECXZ_RELBRb
[DUPLICATE IFORM] SYSENTER
[DUPLICATE IFORM] SYSEXIT
[DUPLICATE IFORM] MOVNTI_MEMd_GPR32
[DUPLICATE IFORM] MOVD_XMMdq_MEMd
[DUPLICATE IFORM] MOVD_XMMdq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_XMMd
[DUPLICATE IFORM] MOVD_GPR32_XMMd
[DUPLICATE IFORM] MOVD_MMXq_MEMd
[DUPLICATE IFORM] MOVD_MMXq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_MMXd
[DUPLICATE IFORM] MOVD_GPR32_MMXd
[DUPLICATE IFORM] PCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] REP_MONTMUL
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] BNDMOV_BND_MEMq
[DUPLICATE IFORM] BNDMOV_BND_BND
[DUPLICATE IFORM] BNDMOV_MEMq_BND
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] MOVDIR64B_GPRa_MEM
[DUPLICATE IFORM] BSF_GPRv_MEMv
[DUPLICATE IFORM] BSF_GPRv_GPRv
[DUPLICATE IFORM] BSR_GPRv_MEMv
[DUPLICATE IFORM] BSR_GPRv_GPRv
[DUPLICATE IFORM] WBINVD
[DUPLICATE IFORM] TDCALL
[DUPLICATE IFORM] VPCMOV_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPCMOV_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VPPERM_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFMADDSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VFMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFMSUBSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VFNMADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMADDSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFNMADDSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VFNMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMSUBSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFNMSUBSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VPERMIL2PS_XMMdq_XMMdq_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPERMIL2PS_YMMqq_YMMqq_YMMqq_YMMqq_IMMb
[DUPLICATE IFORM] VPERMIL2PD_XMMdq_XMMdq_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPERMIL2PD_YMMqq_YMMqq_YMMqq_YMMqq_IMMb
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VMOVD_XMMdq_MEMd
[DUPLICATE IFORM] VMOVD_XMMdq_GPR32d
[DUPLICATE IFORM] VMOVD_MEMd_XMMd
[DUPLICATE IFORM] VMOVD_GPR32d_XMMd
[DUPLICATE IFORM] VPEXTRD_MEMd_XMMdq_IMMb
[DUPLICATE IFORM] VPEXTRD_GPR32d_XMMdq_IMMb
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_MEMd_IMMb
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_GPR32d_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PDEP_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] PDEP_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] PEXT_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] PEXT_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] ANDN_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] ANDN_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] BLSR_VGPR32d_MEMd
[DUPLICATE IFORM] BLSR_VGPR32d_VGPR32d
[DUPLICATE IFORM] BLSMSK_VGPR32d_MEMd
[DUPLICATE IFORM] BLSMSK_VGPR32d_VGPR32d
[DUPLICATE IFORM] BLSI_VGPR32d_MEMd
[DUPLICATE IFORM] BLSI_VGPR32d_VGPR32d
[DUPLICATE IFORM] BZHI_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] BZHI_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] BEXTR_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] BEXTR_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] SHLX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SHLX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] SARX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SARX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] SHRX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SHRX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] MULX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] MULX_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] RORX_VGPR32d_VGPR32d_IMMb
[DUPLICATE IFORM] RORX_VGPR32d_MEMd_IMMb
[DUPLICATE IFORM] KMOVD_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] KMOVD_GPR32u32_MASKmskw_AVX512
[DUPLICATE IFORM] VEXP2PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VEXP2PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRCP28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VRCP28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRCP28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VRCP28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VRSQRT28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VRSQRT28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRSQRT28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VRSQRT28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VADDPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VADDPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VADDSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VADDSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCMPPD_MASKmskw_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCMPPS_MASKmskw_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCMPSD_MASKmskw_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCMPSS_MASKmskw_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTDQ2PD_ZMMf64_MASKmskw_YMMi32_AVX512
[DUPLICATE IFORM] VCVTDQ2PS_ZMMf32_MASKmskw_ZMMi32_AVX512
[DUPLICATE IFORM] VCVTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPD2PS_YMMf32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPH2PS_ZMMf32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2PD_ZMMf64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2PH_YMMf16_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCVTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SS_XMMf32_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSS2SD_XMMf64_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTUDQ2PD_ZMMf64_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VCVTUDQ2PS_ZMMf32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR64u64_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR64u64_AVX512
[DUPLICATE IFORM] VDIVPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VDIVPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VDIVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VDIVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFIXUPIMMPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VGETEXPPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VGETEXPPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VGETEXPSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VGETEXPSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VGETMANTPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMAXPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMAXPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMAXSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMAXSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMINPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMINPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMINSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMINSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVAPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VMOVAPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_GPR32u32_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_MEMu32_AVX512
[DUPLICATE IFORM] VMOVD_GPR32u32_XMMu32_AVX512
[DUPLICATE IFORM] VMOVD_MEMu32_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_MEMu64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVQ_MEMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVUPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VMOVUPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMULPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMULPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMULSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMULSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_ZMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VRNDSCALEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VSCALEFPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSCALEFPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VSCALEFSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSCALEFSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSQRTPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VSQRTPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VSQRTSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSQRTSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSUBPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSUBPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VSUBSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSUBSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VUCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VUCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PD_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTUQQ2PD_ZMMf64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VCVTUQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VMOVDQU16_XMMu16_MASKmskw_XMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_YMMu16_MASKmskw_YMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_ZMMu16_MASKmskw_ZMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU8_XMMu8_MASKmskw_XMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_YMMu8_MASKmskw_YMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_ZMMu8_MASKmskw_ZMMu8_AVX512
[DUPLICATE IFORM] VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VPEXTRD_MEMu32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VPEXTRW_GPR32u16_XMMu16_IMM8_AVX512_C5
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512
[DUPLICATE IFORM] VRANGEPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRANGEPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VRANGESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRANGESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VREDUCEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VREDUCEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VADDPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VADDSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VCMPPH_MASKmskw_MASKmskw_ZMMf16_ZMMf16_IMM8_AVX512
[DUPLICATE IFORM] VCMPSH_MASKmskw_MASKmskw_XMMf16_XMMf16_IMM8_AVX512
[DUPLICATE IFORM] VCOMISH_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VCVTDQ2PH_YMMf16_MASKmskw_ZMMi32_AVX512
[DUPLICATE IFORM] VCVTPD2PH_XMMf16_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPH2DQ_ZMMi32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2PD_ZMMf64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2PSX_ZMMf32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2QQ_ZMMi64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2UDQ_ZMMu32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2UQQ_ZMMu64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2UW_ZMMu16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2W_ZMMi16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VCVTPS2PHX_YMMf16_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PH_XMMf16_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VCVTSD2SH_XMMf16_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSH2SD_XMMf64_MASKmskw_XMMf64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR32i32_MEMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR64i64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SS_XMMf32_MASKmskw_XMMf32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR32u32_MEMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR64u64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSS2SH_XMMf16_MASKmskw_XMMf16_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTPH2DQ_ZMMi32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2QQ_ZMMi64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2UDQ_ZMMu32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2UQQ_ZMMu64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2UW_ZMMu16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2W_ZMMi16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR32i32_MEMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR64i64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR32u32_MEMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR64u64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTUDQ2PH_YMMf16_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VCVTUQQ2PH_XMMf16_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_GPR64u64_AVX512
[DUPLICATE IFORM] VCVTUW2PH_ZMMf16_MASKmskw_ZMMu16_AVX512
[DUPLICATE IFORM] VCVTW2PH_ZMMf16_MASKmskw_ZMMi16_AVX512
[DUPLICATE IFORM] VDIVPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VDIVSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFCMADDCPH_ZMM2f16_MASKmskw_ZMM2f16_ZMM2f16_AVX512
[DUPLICATE IFORM] VFCMADDCSH_XMM2f16_MASKmskw_XMM2f16_XMM2f16_AVX512
[DUPLICATE IFORM] VFCMULCPH_ZMM2f16_MASKmskw_ZMM2f16_ZMM2f16_AVX512
[DUPLICATE IFORM] VFCMULCSH_XMM2f16_MASKmskw_XMM2f16_XMM2f16_AVX512
[DUPLICATE IFORM] VFMADD132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADD132SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMADD213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADD213SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMADD231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADD231SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMADDCPH_ZMM2f16_MASKmskw_ZMM2f16_ZMM2f16_AVX512
[DUPLICATE IFORM] VFMADDCSH_XMM2f16_MASKmskw_XMM2f16_XMM2f16_AVX512
[DUPLICATE IFORM] VFMADDSUB132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADDSUB213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADDSUB231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUB132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUB132SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMSUB213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUB213SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMSUB231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUB231SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMSUBADD132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUBADD213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUBADD231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMULCPH_ZMM2f16_MASKmskw_ZMM2f16_ZMM2f16_AVX512
[DUPLICATE IFORM] VFMULCSH_XMM2f16_MASKmskw_XMM2f16_XMM2f16_AVX512
[DUPLICATE IFORM] VFNMADD132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMADD132SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMADD213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMADD213SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMADD231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMADD231SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB132SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB213SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB231SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VGETEXPPH_ZMMf16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VGETEXPSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VGETMANTPH_ZMMf16_MASKmskw_ZMMf16_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTSH_XMMf16_MASKmskw_XMMf16_XMMf16_IMM8_AVX512
[DUPLICATE IFORM] VMAXPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VMAXSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VMINPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VMINSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VMOVSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VMULPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VMULSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VREDUCEPH_ZMMf16_MASKmskw_ZMMf16_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESH_XMMf16_MASKmskw_XMMf16_XMMf16_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALEPH_ZMMf16_MASKmskw_ZMMf16_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESH_XMMf16_MASKmskw_XMMf16_XMMf16_IMM8_AVX512
[DUPLICATE IFORM] VSCALEFPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VSCALEFSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VSQRTPH_ZMMf16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VSQRTSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VSUBPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VSUBSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VUCOMISH_XMMf16_XMMf16_AVX512
FE:EMIT_FILE obj/idata.txt
FE:EMIT_FILE obj/xed-iform-map-init.c
FE:EMIT_FILE obj/xed-exception-enum.txt
FE:EMIT_FILE obj/xed-exception-enum.c
FE:EMIT_FILE obj/xed-exception-enum.h
[Unique Operand Sequences] 2828
[Number of required operand sequence pointers] 8974
[Number of reused operand sequence pointers] 6976
[Number of required operands] 1502
[MAX OPERAND COUNT 11] 
[INVALID WIDTH CODE]  REP    imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REP    imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  LOCK   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x4] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x5] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  IMM0SIGNED imm_const [0x1] r EXPLICIT INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x10] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x20] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x40] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x8] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x0] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar8 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar9 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArDX INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar10 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar11 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT rIPa INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar14 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar15 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar13 INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_ESI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EDI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EBP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BX] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_SI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_DI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_INVALID] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArSP INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar12 INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT SEG_MOV INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_SP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_BP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_SI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_DI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_ESP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_EBP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_ESI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_EDI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_BP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_SI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_DI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_EBP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_ESI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_EDI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_IP] rw SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_ESP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_RSP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn rw SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG2   nt_lookup_fn r SUPPRESSED OrBX INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn rcw SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_R INVALID
[INVALID WIDTH CODE]  BASE1  nt_lookup_fn r SUPPRESSED A_GPR_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_B INVALID
FE:EMIT_FILE obj/xed-init-operand-data.c
FE:EMIT_FILE obj/xed-init-operand-sequences.c
FE:EMIT_FILE obj/xed-init-inst-table-data.c
FE:EMIT_FILE obj/xed-init-inst-table-0.c
FE:EMIT_FILE obj/xed-init-inst-table.c
emit_enum_info
OPERAND-NAMES SEG_OVD HINT ENCODE_FORCE LOCK NEED_MEMDISP DISP DISP_WIDTH BRDISP_WIDTH DF32 DF64 NOREX NEEDREX REX REXW REXR REXX REXB REP OSZ PREFIX66 ASZ EOSZ EASZ MOD REG SRM RM REALMODE CHIP MODE SMODE MODEP5 MODEP55C P4 LZCNT TZCNT MODE_FIRST_PREFIX MODE_SHORT_UD0 IMM0 IMM1 IMM0SIGNED UIMM0 UIMM1 IMM_WIDTH USING_DEFAULT_SEGMENT0 USING_DEFAULT_SEGMENT1 DEFAULT_SEG SEG0 BASE0 INDEX SCALE NEED_SIB SIBSCALE SIBBASE SIBINDEX SEG1 BASE1 MEM0 MEM1 MEM_WIDTH AGEN RELBR PTR REG0 REG1 REG2 REG3 REG4 REG5 REG6 REG7 REG8 REG9 OUTREG ENCODER_PREFERRED ERROR ICLASS NELEM ELEMENT_SIZE MAP OUT_OF_BYTES FIRST_F2F3 LAST_F2F3 ILD_F2 ILD_F3 MAX_BYTES ILD_SEG NSEG_PREFIXES NREXES NPREFIXES NOMINAL_OPCODE POS_NOMINAL_OPCODE HAS_MODRM HAS_SIB POS_MODRM POS_SIB POS_DISP POS_IMM POS_IMM1 IMM1_BYTES MODRM_BYTE ESRC VEXVALID DUMMY AMD3DNOW MPXMODE CET CLDEMOTE VEXDEST3 VEXDEST210 VL VEX_PREFIX VEX_C4 BCAST MUST_USE_EVEX ZEROING LLRC BCRC REXRR VEXDEST4 MASK ROUNDC SAE NO_SCALE_DISP8 UBIT WBNOINVD
FE:EMIT_FILE obj/xed-attributes-list.c
FE:EMIT_FILE obj/xed-nonterminal-enum.txt
FE:EMIT_FILE obj/xed-nonterminal-enum.c
FE:EMIT_FILE obj/xed-nonterminal-enum.h
FE:EMIT_FILE obj/xed-operand-enum.txt
FE:EMIT_FILE obj/xed-operand-enum.c
FE:EMIT_FILE obj/xed-operand-enum.h
FE:EMIT_FILE obj/xed-operand-type-enum.txt
FE:EMIT_FILE obj/xed-operand-type-enum.c
FE:EMIT_FILE obj/xed-operand-type-enum.h
FE:EMIT_FILE obj/xed-attribute-enum.txt
FE:EMIT_FILE obj/xed-attribute-enum.c
FE:EMIT_FILE obj/xed-attribute-enum.h
FE:EMIT_FILE obj/xed-category-enum.txt
FE:EMIT_FILE obj/xed-category-enum.c
FE:EMIT_FILE obj/xed-category-enum.h
FE:EMIT_FILE obj/xed-extension-enum.txt
FE:EMIT_FILE obj/xed-extension-enum.c
FE:EMIT_FILE obj/xed-extension-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-addr-width-enum.txt
FE:EMIT_FILE obj/xed-address-width-enum.c
FE:EMIT_FILE obj/xed-address-width-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-error-enum.txt
FE:EMIT_FILE obj/xed-error-enum.c
FE:EMIT_FILE obj/xed-error-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-flag-action-enum.txt
FE:EMIT_FILE obj/xed-flag-action-enum.c
FE:EMIT_FILE obj/xed-flag-action-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-flag-enum.txt
FE:EMIT_FILE obj/xed-flag-enum.c
FE:EMIT_FILE obj/xed-flag-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-machine-modes-enum.txt
FE:EMIT_FILE obj/xed-machine-mode-enum.c
FE:EMIT_FILE obj/xed-machine-mode-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-operand-action-enum.txt
FE:EMIT_FILE obj/xed-operand-action-enum.c
FE:EMIT_FILE obj/xed-operand-action-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-operand-visibility-enum.txt
FE:EMIT_FILE obj/xed-operand-visibility-enum.c
FE:EMIT_FILE obj/xed-operand-visibility-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-reg-role.enum.txt
FE:EMIT_FILE obj/xed-reg-role-enum.c
FE:EMIT_FILE obj/xed-reg-role-enum.h
PREFAB-ENUM: C:/$Fanta/IntelXED/xed\datafiles\xed-syntax-enum.txt
FE:EMIT_FILE obj/xed-syntax-enum.c
FE:EMIT_FILE obj/xed-syntax-enum.h
FE:EMIT_FILE obj/xed-attributes-init.c
FE:EMIT_FILE obj/xed-gen-table-defs.h
FE:EMIT_FILE obj/cdata.txt
FE:EMIT_FILE obj/xed-chip-enum.txt
FE:EMIT_FILE obj/xed-chip-enum.c
FE:EMIT_FILE obj/xed-chip-enum.h
[FROM CHIP MODEL] ['INVALID', '3DNOW', '3DNOW_PREFETCH', 'ADOX_ADCX', 'AES', 'AMD', 'AMD_INVLPGB', 'AMX_BF16', 'AMX_INT8', 'AMX_TILE', 'AVX', 'AVX2', 'AVX2GATHER', 'AVX512BW_128', 'AVX512BW_128N', 'AVX512BW_256', 'AVX512BW_512', 'AVX512BW_KOP', 'AVX512CD_128', 'AVX512CD_256', 'AVX512CD_512', 'AVX512DQ_128', 'AVX512DQ_128N', 'AVX512DQ_256', 'AVX512DQ_512', 'AVX512DQ_KOP', 'AVX512DQ_SCALAR', 'AVX512ER_512', 'AVX512ER_SCALAR', 'AVX512F_128', 'AVX512F_128N', 'AVX512F_256', 'AVX512F_512', 'AVX512F_KOP', 'AVX512F_SCALAR', 'AVX512PF_512', 'AVX512_4FMAPS_512', 'AVX512_4FMAPS_SCALAR', 'AVX512_4VNNIW_512', 'AVX512_BF16_128', 'AVX512_BF16_256', 'AVX512_BF16_512', 'AVX512_BITALG_128', 'AVX512_BITALG_256', 'AVX512_BITALG_512', 'AVX512_FP16_128', 'AVX512_FP16_128N', 'AVX512_FP16_256', 'AVX512_FP16_512', 'AVX512_FP16_SCALAR', 'AVX512_GFNI_128', 'AVX512_GFNI_256', 'AVX512_GFNI_512', 'AVX512_IFMA_128', 'AVX512_IFMA_256', 'AVX512_IFMA_512', 'AVX512_VAES_128', 'AVX512_VAES_256', 'AVX512_VAES_512', 'AVX512_VBMI2_128', 'AVX512_VBMI2_256', 'AVX512_VBMI2_512', 'AVX512_VBMI_128', 'AVX512_VBMI_256', 'AVX512_VBMI_512', 'AVX512_VNNI_128', 'AVX512_VNNI_256', 'AVX512_VNNI_512', 'AVX512_VP2INTERSECT_128', 'AVX512_VP2INTERSECT_256', 'AVX512_VP2INTERSECT_512', 'AVX512_VPCLMULQDQ_128', 'AVX512_VPCLMULQDQ_256', 'AVX512_VPCLMULQDQ_512', 'AVX512_VPOPCNTDQ_128', 'AVX512_VPOPCNTDQ_256', 'AVX512_VPOPCNTDQ_512', 'AVXAES', 'AVX_GFNI', 'AVX_VNNI', 'BMI1', 'BMI2', 'CET', 'CLDEMOTE', 'CLFLUSHOPT', 'CLFSH', 'CLWB', 'CLZERO', 'CMOV', 'CMPXCHG16B', 'ENQCMD', 'F16C', 'FAT_NOP', 'FCMOV', 'FMA', 'FMA4', 'FXSAVE', 'FXSAVE64', 'GFNI', 'HRESET', 'I186', 'I286PROTECTED', 'I286REAL', 'I386', 'I486', 'I486REAL', 'I86', 'INVPCID', 'KEYLOCKER', 'KEYLOCKER_WIDE', 'LAHF', 'LONGMODE', 'LWP', 'LZCNT', 'MCOMMIT', 'MONITOR', 'MONITORX', 'MOVBE', 'MOVDIR', 'MPX', 'PAUSE', 'PCLMULQDQ', 'PCONFIG', 'PENTIUMMMX', 'PENTIUMREAL', 'PKU', 'POPCNT', 'PPRO', 'PPRO_UD0_LONG', 'PPRO_UD0_SHORT', 'PREFETCHW', 'PREFETCHWT1', 'PREFETCH_NOP', 'PTWRITE', 'RDPID', 'RDPMC', 'RDPRU', 'RDRAND', 'RDSEED', 'RDTSCP', 'RDWRFSGS', 'RTM', 'SERIALIZE', 'SGX', 'SGX_ENCLV', 'SHA', 'SMAP', 'SMX', 'SNP', 'SSE', 'SSE2', 'SSE2MMX', 'SSE3', 'SSE3X87', 'SSE4', 'SSE42', 'SSE4A', 'SSEMXCSR', 'SSE_PREFETCH', 'SSSE3', 'SSSE3MMX', 'SVM', 'TBM', 'TDX', 'TSX_LDTRK', 'UINTR', 'VAES', 'VIA_PADLOCK_AES', 'VIA_PADLOCK_MONTMUL', 'VIA_PADLOCK_RNG', 'VIA_PADLOCK_SHA', 'VMFUNC', 'VPCLMULQDQ', 'VTX', 'WAITPKG', 'WBNOINVD', 'X87', 'XOP', 'XSAVE', 'XSAVEC', 'XSAVEOPT', 'XSAVES']
[FROM INSTRUCTIONS ] {'VIA_PADLOCK_SHA', 'SSE4A', 'AVX_VNNI', 'XOP', 'PREFETCHWT1', 'AVX512_VPCLMULQDQ_256', 'SSE42', 'AVX512_VNNI_256', 'PAUSE', 'AVX512PF_512', 'AVX512CD_256', 'WBNOINVD', 'RDTSCP', 'AVX512_VPOPCNTDQ_128', 'AVX_GFNI', 'MOVBE', 'AVX512BW_128N', 'VMFUNC', 'SSE_PREFETCH', 'AVX512_VBMI2_256', 'MONITORX', 'SSSE3MMX', 'AVX512DQ_KOP', 'AVX512_VNNI_128', 'I86', 'AVX512BW_512', 'UINTR', 'TSX_LDTRK', 'TBM', 'AVX512_FP16_512', 'VIA_PADLOCK_RNG', 'LWP', 'AVX512_GFNI_512', 'AVX512BW_KOP', 'PENTIUMMMX', 'KEYLOCKER', 'XSAVEOPT', 'CLDEMOTE', 'BMI2', 'AVX512_VAES_256', 'AVX512_VNNI_512', 'AVX512_VP2INTERSECT_256', 'MOVDIR', 'AVX512_IFMA_256', 'AVX512_GFNI_128', 'INVPCID', 'FMA', 'MONITOR', 'AVX2GATHER', 'AVX512_4FMAPS_SCALAR', 'AES', 'AVX512_VPCLMULQDQ_512', 'RDPRU', 'VPCLMULQDQ', 'CLZERO', 'AVX512F_512', 'AVX512BW_128', 'SNP', 'AVX512_BF16_128', '3DNOW', 'PPRO', 'AVX512CD_128', 'MPX', 'AVX512BW_256', 'AVX512_4FMAPS_512', 'LZCNT', 'AMD', 'CLFSH', 'VAES', 'XSAVEC', 'GFNI', 'AVX512_FP16_256', 'RDPID', 'PCONFIG', 'AMD_INVLPGB', 'AVX512_GFNI_256', 'AVX512DQ_128', 'AVX512_VBMI2_128', 'SMX', 'RDRAND', 'RDWRFSGS', 'AVX512DQ_512', 'PREFETCH_NOP', 'AVX512_VAES_128', 'KEYLOCKER_WIDE', 'AVX512_BITALG_128', 'I486REAL', 'AVX512F_128N', 'AVX512_VPOPCNTDQ_256', 'I386', 'WAITPKG', 'AVX512_VBMI_512', 'AVX', 'AVX512ER_512', 'SGX', 'LONGMODE', 'AVX512_VPCLMULQDQ_128', 'AVX512_VAES_512', 'SSEMXCSR', 'AMX_BF16', 'AVX512_VBMI2_512', 'AVX512DQ_SCALAR', 'AVX512_VBMI_128', 'RDPMC', 'SSSE3', 'PPRO_UD0_SHORT', 'HRESET', 'FXSAVE64', 'SSE3', 'AVX512_4VNNIW_512', 'ENQCMD', 'VIA_PADLOCK_AES', 'VIA_PADLOCK_MONTMUL', 'SSE2MMX', 'FMA4', 'AVX512_IFMA_512', 'PCLMULQDQ', 'AVX512F_128', 'RTM', 'AVXAES', 'AVX512CD_512', 'AVX512_BITALG_256', 'F16C', 'ADOX_ADCX', 'AVX512_VBMI_256', 'SERIALIZE', 'AVX512_IFMA_128', 'SSE2', 'VTX', 'AMX_INT8', 'SSE4', 'PKU', 'CMPXCHG16B', 'CLWB', 'SHA', 'PPRO_UD0_LONG', 'FAT_NOP', 'FXSAVE', 'I486', 'BMI1', 'AVX2', 'LAHF', 'AVX512_FP16_128N', 'XSAVE', 'I286REAL', 'CET', 'AVX512ER_SCALAR', 'SGX_ENCLV', 'SMAP', 'AMX_TILE', 'CLFLUSHOPT', 'XSAVES', 'AVX512F_SCALAR', 'AVX512_VP2INTERSECT_512', 'AVX512_BF16_256', 'SSE', 'POPCNT', 'SSE3X87', 'AVX512F_256', 'RDSEED', 'AVX512DQ_128N', 'AVX512F_KOP', 'AVX512_BF16_512', 'AVX512_VPOPCNTDQ_512', 'MCOMMIT', 'PENTIUMREAL', 'SVM', 'I186', 'TDX', 'X87', 'I286PROTECTED', 'AVX512_VP2INTERSECT_128', 'AVX512_BITALG_512', 'AVX512_FP16_SCALAR', 'CMOV', 'AVX512_FP16_128', 'PTWRITE', 'FCMOV', 'AVX512DQ_256'}
FE:EMIT_FILE obj/xed-isa-set-enum.txt
FE:EMIT_FILE obj/xed-isa-set-enum.c
FE:EMIT_FILE obj/xed-isa-set-enum.h
FE:EMIT_FILE obj/xed-chip-features-table.c
FE:EMIT_FILE obj\include-private/xed-chip-features-table.h
Created files: obj/cdata.txt obj/xed-chip-enum.h obj/xed-chip-enum.c obj/xed-isa-set-enum.h obj/xed-isa-set-enum.c obj\include-private/xed-chip-features-table.h obj/xed-chip-features-table.c
FE:EMIT_FILE obj/xed-operand-convert-enum.txt
FE:EMIT_FILE obj/xed-operand-convert-enum.c
FE:EMIT_FILE obj/xed-operand-convert-enum.h
FE:EMIT_FILE obj/xed-convert-table-init.c
FE:EMIT_FILE obj/xed-convert-table-init.h
FE:EMIT_FILE obj/xed-operand-storage.h
FE:EMIT_FILE obj/xed-classifiers.c
[ILD_MODRM] alias search for map legacy_map1 opcode 0x4
[ILD_MODRM] alias search for map legacy_map1 opcode 0xa
[ILD_MODRM] alias search for map legacy_map1 opcode 0xc
[ILD_MODRM] alias search for map legacy_map1 opcode 0xf
[ILD_MODRM] alias search for map legacy_map1 opcode 0x24
[ILD_MODRM] alias search for map legacy_map1 opcode 0x25
[ILD_MODRM] alias search for map legacy_map1 opcode 0x26
[ILD_MODRM] alias search for map legacy_map1 opcode 0x27
[ILD_MODRM] alias search for map legacy_map1 opcode 0x36
[ILD_MODRM] alias search for map legacy_map1 opcode 0x38
[ILD_MODRM] alias search for map legacy_map1 opcode 0x39
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3a
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3b
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3c
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3d
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3e
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3f
[ILD_MODRM] alias search for map legacy_map1 opcode 0x7a
[ILD_MODRM] alias search for map legacy_map1 opcode 0x7b
[ILD_MODRM] alias search for map vex_map1 opcode 0x0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x4 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x6
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xa = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xc = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xe
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xf
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xf = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x18
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x19
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x20
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x21
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x22
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x23
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x24
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x24 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x25
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x25 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x26
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x26 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x27
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x27 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x30
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x31
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x32
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x33
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x34
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x35
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x36
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x36 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x37
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x38
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x38 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x39
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x39 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3a
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3a = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3b
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3b = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3c
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3c = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3d
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3d = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3e
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3e = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3f
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3f = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x40
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x43
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x48
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x49
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x78
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x79
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7a
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x7a = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7b
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x7b = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x80
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x81
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x82
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x83
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x84
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x85
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x86
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x87
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x88
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x89
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x94
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x95
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x96
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x97
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa4
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa6
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0xa7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0xa8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xaa
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xab
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xac
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xad
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xaf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb4
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb6
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xba
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbc
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbe
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xca
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcc
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xce
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xff
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf
[ILD_MODRM] alias search for map legacy_map0 opcode 0x26
[ILD_MODRM] alias search for map legacy_map0 opcode 0x2e
[ILD_MODRM] alias search for map legacy_map0 opcode 0x36
[ILD_MODRM] alias search for map legacy_map0 opcode 0x3e
[ILD_MODRM] alias search for map legacy_map0 opcode 0x64
[ILD_MODRM] alias search for map legacy_map0 opcode 0x65
[ILD_MODRM] alias search for map legacy_map0 opcode 0x66
[ILD_MODRM] alias search for map legacy_map0 opcode 0x67
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf0
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf2
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf3
FE:EMIT_FILE obj/include-private/xed-ild-modrm.h
[ILD_MODRM] aliases supplied 110
FE:EMIT_FILE obj/ild_eosz_debug.txt
FE:EMIT_FILE obj/ild_eosz_debug_header.txt
FE:EMIT_FILE obj/xed-ild-eosz.c
FE:EMIT_FILE obj/include-private/xed-ild-eosz.h
FE:EMIT_FILE obj/include-private/xed-ild-eosz-getters.h
FE:EMIT_FILE obj/ild_easz_debug.txt
FE:EMIT_FILE obj/ild_easz_debug_header.txt
FE:EMIT_FILE obj/xed-ild-easz.c
FE:EMIT_FILE obj/include-private/xed-ild-easz.h
FE:EMIT_FILE obj/include-private/xed-ild-easz-getters.h
FE:EMIT_FILE obj/xed-operand-accessors.h
FE:EMIT_FILE obj/xed-operand-accessors.c
FE:EMIT_FILE obj/xed-ild-imm-l3.c
FE:EMIT_FILE obj/include-private/xed-ild-imm-l3.h
FE:EMIT_FILE obj/include-private/xed-ild-imm-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf6 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf7 map legacy_map0
FE:EMIT_FILE obj/include-private/xed-ild-imm-l1.h
FE:EMIT_FILE obj/include-private/xed-ild-imm-bytes.h
FE:EMIT_FILE obj/xed-ild-disp-l3.c
FE:EMIT_FILE obj/include-private/xed-ild-disp-l3.h
FE:EMIT_FILE obj/include-private/xed-ild-disp-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe9 map legacy_map0
FE:EMIT_FILE obj/include-private/xed-ild-disp-l1.h
FE:EMIT_FILE obj/include-private/xed-ild-disp-bytes.h
[ALL ZEROS] VV=0 MAP=amd_xop8
[ALL ZEROS] VV=0 MAP=amd_xop9
[ALL ZEROS] VV=0 MAP=amd_xopA
[ALL ZEROS] VV=0 MAP=vex_map2
[ALL ZEROS] VV=0 MAP=vex_map3
[ALL ZEROS] VV=0 MAP=evex_map2
[ALL ZEROS] VV=0 MAP=evex_map3
[ALL ZEROS] VV=0 MAP=evex_map5
[ALL ZEROS] VV=0 MAP=evex_map6
[ALL ZEROS] VV=0 MAP=vex_map1
[ALL ZEROS] VV=0 MAP=evex_map1
FE:EMIT_FILE obj/include-private/xed3-phash-vv0.h
FE:EMIT_FILE obj/xed3-phash-lu-vv0.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv0.h
[ALL ZEROS] VV=1 MAP=legacy_map2
[ALL ZEROS] VV=1 MAP=legacy_map3
[ALL ZEROS] VV=1 MAP=amd_3dnow
[ALL ZEROS] VV=1 MAP=amd_xop8
[ALL ZEROS] VV=1 MAP=amd_xop9
[ALL ZEROS] VV=1 MAP=amd_xopA
[ALL ZEROS] VV=1 MAP=evex_map2
[ALL ZEROS] VV=1 MAP=evex_map3
[ALL ZEROS] VV=1 MAP=legacy_map1
[ALL ZEROS] VV=1 MAP=evex_map5
[ALL ZEROS] VV=1 MAP=evex_map6
[ALL ZEROS] VV=1 MAP=evex_map1
[ALL ZEROS] VV=1 MAP=legacy_map0
FE:EMIT_FILE obj/include-private/xed3-phash-vv1.h
FE:EMIT_FILE obj/xed3-phash-lu-vv1.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv1.h
[ALL ZEROS] VV=2 MAP=legacy_map2
[ALL ZEROS] VV=2 MAP=legacy_map3
[ALL ZEROS] VV=2 MAP=amd_3dnow
[ALL ZEROS] VV=2 MAP=amd_xop8
[ALL ZEROS] VV=2 MAP=amd_xop9
[ALL ZEROS] VV=2 MAP=amd_xopA
[ALL ZEROS] VV=2 MAP=vex_map2
[ALL ZEROS] VV=2 MAP=vex_map3
[ALL ZEROS] VV=2 MAP=legacy_map1
[ALL ZEROS] VV=2 MAP=vex_map1
[ALL ZEROS] VV=2 MAP=legacy_map0
FE:EMIT_FILE obj/include-private/xed3-phash-vv2.h
FE:EMIT_FILE obj/xed3-phash-lu-vv2.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv2.h
[ALL ZEROS] VV=3 MAP=legacy_map2
[ALL ZEROS] VV=3 MAP=legacy_map3
[ALL ZEROS] VV=3 MAP=amd_3dnow
[ALL ZEROS] VV=3 MAP=vex_map2
[ALL ZEROS] VV=3 MAP=vex_map3
[ALL ZEROS] VV=3 MAP=evex_map2
[ALL ZEROS] VV=3 MAP=evex_map3
[ALL ZEROS] VV=3 MAP=legacy_map1
[ALL ZEROS] VV=3 MAP=evex_map5
[ALL ZEROS] VV=3 MAP=evex_map6
[ALL ZEROS] VV=3 MAP=vex_map1
[ALL ZEROS] VV=3 MAP=evex_map1
[ALL ZEROS] VV=3 MAP=legacy_map0
FE:EMIT_FILE obj/include-private/xed3-phash-vv3.h
FE:EMIT_FILE obj/xed3-phash-lu-vv3.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv3.h
FE:EMIT_FILE obj/include-private/xed3-operand-lu.h
FE:EMIT_FILE obj/xed3-operand-lu.c
FE:EMIT_FILE obj/include-private/xed3-phash.h
FE:EMIT_FILE obj/include-private/xed3-nt-capture.h
FE:EMIT_FILE obj/include-private/xed3-chain-capture.h
FE:EMIT_FILE obj/include-private/xed3-chain-capture-lu.h
FE:EMIT_FILE obj/include-private/xed3-op-chain-capture.h
FE:EMIT_FILE obj/include-private/xed3-op-chain-capture-lu.h
FE:EMIT_FILE obj/include-private/xed3-dynamic-part1-capture.h
FE:EMIT_FILE obj/xed-ild-enum.c
FE:EMIT_FILE obj/xed-ild-enum.h
FE:EMIT_FILE obj/xed-mapu-enum.c
FE:EMIT_FILE obj/xed-mapu-enum.h
FE:EMIT_FILE obj\include-private/xed-map-feature-tables.h
FE:EMIT_FILE obj/xed-cpuid-bit-enum.txt
FE:EMIT_FILE obj/xed-cpuid-bit-enum.c
FE:EMIT_FILE obj/xed-cpuid-bit-enum.h
ISASET:  INVALID
ISASET:  3DNOW
ISASET:  3DNOW_PREFETCH
ISASET:  ADOX_ADCX
ISASET:  AES
ISASET:  AMD
ISASET:  AMD_INVLPGB
ISASET:  AMX_BF16
ISASET:  AMX_INT8
ISASET:  AMX_TILE
ISASET:  AVX
ISASET:  AVX2
ISASET:  AVX2GATHER
ISASET:  AVX512BW_128
ISASET:  AVX512BW_128N
ISASET:  AVX512BW_256
ISASET:  AVX512BW_512
ISASET:  AVX512BW_KOP
ISASET:  AVX512CD_128
ISASET:  AVX512CD_256
ISASET:  AVX512CD_512
ISASET:  AVX512DQ_128
ISASET:  AVX512DQ_128N
ISASET:  AVX512DQ_256
ISASET:  AVX512DQ_512
ISASET:  AVX512DQ_KOP
ISASET:  AVX512DQ_SCALAR
ISASET:  AVX512ER_512
ISASET:  AVX512ER_SCALAR
ISASET:  AVX512F_128
ISASET:  AVX512F_128N
ISASET:  AVX512F_256
ISASET:  AVX512F_512
ISASET:  AVX512F_KOP
ISASET:  AVX512F_SCALAR
ISASET:  AVX512PF_512
ISASET:  AVX512_4FMAPS_512
ISASET:  AVX512_4FMAPS_SCALAR
ISASET:  AVX512_4VNNIW_512
ISASET:  AVX512_BF16_128
ISASET:  AVX512_BF16_256
ISASET:  AVX512_BF16_512
ISASET:  AVX512_BITALG_128
ISASET:  AVX512_BITALG_256
ISASET:  AVX512_BITALG_512
ISASET:  AVX512_FP16_128
ISASET:  AVX512_FP16_128N
ISASET:  AVX512_FP16_256
ISASET:  AVX512_FP16_512
ISASET:  AVX512_FP16_SCALAR
ISASET:  AVX512_GFNI_128
ISASET:  AVX512_GFNI_256
ISASET:  AVX512_GFNI_512
ISASET:  AVX512_IFMA_128
ISASET:  AVX512_IFMA_256
ISASET:  AVX512_IFMA_512
ISASET:  AVX512_VAES_128
ISASET:  AVX512_VAES_256
ISASET:  AVX512_VAES_512
ISASET:  AVX512_VBMI2_128
ISASET:  AVX512_VBMI2_256
ISASET:  AVX512_VBMI2_512
ISASET:  AVX512_VBMI_128
ISASET:  AVX512_VBMI_256
ISASET:  AVX512_VBMI_512
ISASET:  AVX512_VNNI_128
ISASET:  AVX512_VNNI_256
ISASET:  AVX512_VNNI_512
ISASET:  AVX512_VP2INTERSECT_128
ISASET:  AVX512_VP2INTERSECT_256
ISASET:  AVX512_VP2INTERSECT_512
ISASET:  AVX512_VPCLMULQDQ_128
ISASET:  AVX512_VPCLMULQDQ_256
ISASET:  AVX512_VPCLMULQDQ_512
ISASET:  AVX512_VPOPCNTDQ_128
ISASET:  AVX512_VPOPCNTDQ_256
ISASET:  AVX512_VPOPCNTDQ_512
ISASET:  AVXAES
ISASET:  AVX_GFNI
ISASET:  AVX_VNNI
ISASET:  BMI1
ISASET:  BMI2
ISASET:  CET
ISASET:  CLDEMOTE
ISASET:  CLFLUSHOPT
ISASET:  CLFSH
ISASET:  CLWB
ISASET:  CLZERO
ISASET:  CMOV
ISASET:  CMPXCHG16B
ISASET:  ENQCMD
ISASET:  F16C
ISASET:  FAT_NOP
ISASET:  FCMOV
ISASET:  FMA
ISASET:  FMA4
ISASET:  FXSAVE
ISASET:  FXSAVE64
ISASET:  GFNI
ISASET:  HRESET
ISASET:  I186
ISASET:  I286PROTECTED
ISASET:  I286REAL
ISASET:  I386
ISASET:  I486
ISASET:  I486REAL
ISASET:  I86
ISASET:  INVPCID
ISASET:  KEYLOCKER
ISASET:  KEYLOCKER_WIDE
ISASET:  LAHF
ISASET:  LONGMODE
ISASET:  LWP
ISASET:  LZCNT
ISASET:  MCOMMIT
ISASET:  MONITOR
ISASET:  MONITORX
ISASET:  MOVBE
ISASET:  MOVDIR
ISASET:  MPX
ISASET:  PAUSE
ISASET:  PCLMULQDQ
ISASET:  PCONFIG
ISASET:  PENTIUMMMX
ISASET:  PENTIUMREAL
ISASET:  PKU
ISASET:  POPCNT
ISASET:  PPRO
ISASET:  PPRO_UD0_LONG
ISASET:  PPRO_UD0_SHORT
ISASET:  PREFETCHW
ISASET:  PREFETCHWT1
ISASET:  PREFETCH_NOP
ISASET:  PTWRITE
ISASET:  RDPID
ISASET:  RDPMC
ISASET:  RDPRU
ISASET:  RDRAND
ISASET:  RDSEED
ISASET:  RDTSCP
ISASET:  RDWRFSGS
ISASET:  RTM
ISASET:  SERIALIZE
ISASET:  SGX
ISASET:  SGX_ENCLV
ISASET:  SHA
ISASET:  SMAP
ISASET:  SMX
ISASET:  SNP
ISASET:  SSE
ISASET:  SSE2
ISASET:  SSE2MMX
ISASET:  SSE3
ISASET:  SSE3X87
ISASET:  SSE4
ISASET:  SSE42
ISASET:  SSE4A
ISASET:  SSEMXCSR
ISASET:  SSE_PREFETCH
ISASET:  SSSE3
ISASET:  SSSE3MMX
ISASET:  SVM
ISASET:  TBM
ISASET:  TDX
ISASET:  TSX_LDTRK
ISASET:  UINTR
ISASET:  VAES
ISASET:  VIA_PADLOCK_AES
ISASET:  VIA_PADLOCK_MONTMUL
ISASET:  VIA_PADLOCK_RNG
ISASET:  VIA_PADLOCK_SHA
ISASET:  VMFUNC
ISASET:  VPCLMULQDQ
ISASET:  VTX
ISASET:  WAITPKG
ISASET:  WBNOINVD
ISASET:  X87
ISASET:  XOP
ISASET:  XSAVE
ISASET:  XSAVEC
ISASET:  XSAVEOPT
ISASET:  XSAVES
FE:EMIT_FILE obj/xed-cpuid-tables.c
FE: Closing an already-closed file: obj/xed-init-inst-table.c
FE:EMIT_FILE obj/xed-flags-simple.c
FE:EMIT_FILE obj/xed-flags-complex.c
FE:EMIT_FILE obj/xed-flags-actions.c
FE: Closing an already-closed file: obj/xed-operand-convert-init.c
FE: Closing an already-closed file: obj/xed-iclass-string.c
FE: Closing an already-closed file: obj/xed-iform-map-init.c
FE: Closing an already-closed file: obj/xed-init-inst-table-0.c
FE: Closing an already-closed file: obj/xed-attributes-init.c
